{
    "collab_server" : "",
    "contents" : "# # install.packages(\"tidyjson\")\n# library(\"tidyjson\", lib.loc=\"/Library/Frameworks/R.framework/Versions/3.2/Resources/library\")\n# library(\"httr\", lib.loc=\"/Library/Frameworks/R.framework/Versions/3.2/Resources/library\")\n# library(\"curl\", lib.loc=\"/Library/Frameworks/R.framework/Versions/3.2/Resources/library\")\n# library(\"curlconverter\", lib.loc=\"/Library/Frameworks/R.framework/Versions/3.2/Resources/library\")\n# library(\"jsonlite\", lib.loc=\"/Library/Frameworks/R.framework/Versions/3.2/Resources/library\")\n# library(\"stringi\", lib.loc=\"/Library/Frameworks/R.framework/Versions/3.2/Resources/library\")\n# library(\"curl\", lib.loc=\"/Library/Frameworks/R.framework/Versions/3.2/Resources/library\")\n# library(\"lsr\", lib.loc=\"/Library/Frameworks/R.framework/Versions/3.2/Resources/library\")\n# library(\"stringr\", lib.loc=\"/Library/Frameworks/R.framework/Versions/3.2/Resources/library\")\n# library(\"stringi\", lib.loc=\"/Library/Frameworks/R.framework/Versions/3.2/Resources/library\")\n# library(\"reshape2\", lib.loc=\"/Library/Frameworks/R.framework/Versions/3.2/Resources/library\")\n# library(\"strptimer\", lib.loc=\"/Library/Frameworks/R.framework/Versions/3.2/Resources/library\")\nlibrary(RMySQL, pos=4,quietly=TRUE)\nlibrary(httr)\nlibrary(jsonlite)\n# library(stringi)\n# library(stringr)\n# library(strptimer)\n# library(curl)\nlibrary(dplyr)\n# Use strftime( with formating) to dislay system time in text format\n# library(strptimer)\n# strftime(Sys.time(),\"%Y-%m-%d %H:%M:%S\")\n\n\n##################################################################################################################################################\n#########################################################################################################\n\n# KYCUUID is uuid, kserv options '' for prod, 'dev', 'staging.'; amlPaid = 'true' or 'false  \nget.apiKYCCallOld <- function(KYCUUID, kserv='prod.', amlPaid='false'){  \n  # curl -X GET --header 'Accept: application/json' 'http://staging.kyc-api.kountable.com/v0/admin/users'\n  attempts <- 0\n  \n  if (kserv == 'staging.') {\n    repeat {\n      ## Starts with 1\n      attempts <-  attempts + 1\n      # this Prod website bearer token call is\n      # curl -X GET --header 'Accept: application/json' 'http://staging.kyc-api.kountable.com/v0/admin/users'\n      # needs user name and password authentication 'admin', 'RzpvnDXv8fVjpu3h'\n      getAuthenticationToken <- GET(paste('http://',kserv,'kyc-api.kountable.com/v0/admin/users', sep = \"\"),\n                                    authenticate('admin', 'RzpvnDXv8fVjpu3h', type = \"basic\"),\n                                    add_headers(\n                                      \"Accept\" = \"application/json\")\n      )         \n      # the content returns a group of token calls in Json format, but first convert from raw to Char format\n      AuthenticationTokenGroup <- fromJSON(rawToChar(getAuthenticationToken$content))\n      # for the 'staging' server look for the admin permissions token find the location index with grep \n      adminAuthenticationToken <- AuthenticationTokenGroup$token[ grep('admin',AuthenticationTokenGroup$description)]\n      #getAuthenticationToken$status_code\n      cat(KYCUUID,\"-->get.apiKYCCall Staging BearerToken attempts-->\", attempts, ' TimeStamp: ',strftime(Sys.time(),\"%Y-%m-%d %H:%M:%S\"),\"\\n\", sep = \"\")\n      # exit if the condition is met\n      if (grepl(\"Resource representation is only available with these Content-Types:\\ntext/plain; charset=UTF-8\\ntext/plain\", \n                rawToChar(getAuthenticationToken$content)) == FALSE) {break} \n    }\n  } else {\n    repeat {\n      ## Starts with 1\n      attempts <-  attempts + 1\n      # this Prod website bearer token call is\n      # curl -X GET --header 'Accept: application/json' 'http://kyc-api.kountable.com/v0/admin/users'\n      # needs user name and password authentication 'admin', 'RzpvnDXv8fVjpu3h'\n      getAuthenticationToken <- GET(paste('http://',kserv,'kyc-api.kountable.com/v0/admin/users', sep = \"\"),\n                                    authenticate('admin', 'RzpvnDXv8fVjpu3h', type = \"basic\"),\n                                    add_headers(\n                                      \"Accept\" = \"application/json\")\n      )         \n      # the content returns a group of token calls in Json format, but first convert from raw to Char format\n      AuthenticationTokenGroup <- fromJSON( rawToChar(getAuthenticationToken$content))\n      # for the 'Prod' server look for the person permissions token find the location index with grep \n      personAuthenticationToken <- AuthenticationTokenGroup$token[ grep('person',AuthenticationTokenGroup$description)]\n      #getAuthenticationToken$status_code\n      cat(KYCUUID,\"-->get.apiKYCCall BearerToken attempts-->\", attempts, ' TimeStamp: ',strftime(Sys.time(),\"%Y-%m-%d %H:%M:%S\"),\"\\n\", sep = \"\")\n      # exit if the condition is met\n      if (grepl(\"Resource representation is only available with these Content-Types:\\ntext/plain; charset=UTF-8\\ntext/plain\", \n                rawToChar(getAuthenticationToken$content)) == FALSE) {break} \n      \n    }\n  }\n  \n  ## Part 2 call the data using the bearer token from part one, each server has a different token name to use\n  attempts <- 0\n  ## repeat the call if it 'hangsup'\n  if (kserv == 'staging.') {\n    bearerToken <-  adminAuthenticationToken\n  } else {\n    bearerToken <- personAuthenticationToken\n  }\n  repeat {\n    attempts = attempts + 1\n    # this Prod website data call with bearer token is\n    # curl -X GET --header 'Accept: application/json' --header 'KYC-Bearer-Token: oJLXXlf4Q24FZgCnYeYR3ps2oIXtVqzZ' \n    # 'http://kyc-api.kountable.com/v0/persons/2099?amlPaidCheck=false'\n    # curl -X GET --header 'Accept: application/json' --header 'KYC-Bearer-Token: cv6yzIsmvMiwXFjit5-wtZHWPGBD-4l-' \n    # 'http://staging.kyc-api.kountable.com/v0/persons/2099?amlFriendsPaidCnt=0&amlFriendsFreeCnt=100'\n    #http://prod.kyc-api.kountable.com/v0/doc#!/persons/getUser\n    \n    apiKYCget <- GET(paste('http://',kserv,'kyc-api.kountable.com/v0/persons/', KYCUUID,\"?amlFriendsPaidCnt=0&amlFriendsFreeCnt=100\", sep = \"\"),\n                     add_headers(\n                       \"Accept\" = \"application/json\",\n                       \"KYC-Bearer-Token\" = bearerToken\n                     ))\n    ## How many call attempts\n    cat(KYCUUID,\"-->get.apiKYCCall attempts-->\", attempts, ' Server--> ',kserv, ' TimeStamp: ',strftime(Sys.time(),\"%Y-%m-%d %H:%M:%S\"),\"\\n\", sep=\"\")\n    \n    # exit if the condition is met\n    if (grepl(\"Resource representation is only available with these Content-Types:\\ntext/plain; charset=UTF-8\\ntext/plain\"\n              ,rawToChar(apiKYCget$content))==FALSE){ break} \n  }\n  \n  x <- fromJSON( rawToChar(apiKYCget$content), simplifyVector = TRUE, simplifyMatrix = TRUE, simplifyDataFrame = TRUE)\n  return(x) \n}\n# get.apiKYCCall('10395')\n\n########################################################################################################################\n########################################################################################################################\n########################################################################################################################\n# KYCUUID is uuid, kserv options '' for prod, 'dev', 'staging.'; amlPaid = 'true' or 'false  \n# kserv <- 'prod.\nget.apiKYCCall <- function(KYCUUID, kserv='prod.', amlPaid='false', amlFriendsPaidCnt=0, amlFriendsFreeCnt=100) {  \n  require(httr)\n  require(jsonlite)\n  # curl -X GET --header 'Accept: application/json' 'http://staging.kyc-api.kountable.com/v0/admin/users'\n  cat(KYCUUID,\" Called new get.apiKYCCAll(6) -->kserv=\",kserv,\" amlPaid=\",amlPaid,\" amlFriendsPaidCnt=\",amlFriendsPaidCnt,\" amlFriendsFreeCnt=\",amlFriendsFreeCnt,\"\\n\",sep = \"\")\n  attempts <- 0\n  \n  if (kserv == 'staging.') {\n    repeat {\n      ## Starts with 1\n      attempts <-  attempts + 1\n      # this Prod website bearer token call is\n      # curl -X GET --header 'Accept: application/json' 'http://staging.kyc-api.kountable.com/v0/admin/users'\n      # needs user name and password authentication 'admin', 'RzpvnDXv8fVjpu3h'\n      getAuthenticationToken <- GET(paste('http://',kserv,'kyc-api.kountable.com/v0/admin/users', sep = \"\"),\n                                    authenticate('admin', 'RzpvnDXv8fVjpu3h', type = \"basic\"),\n                                    add_headers(\n                                      \"Accept\" = \"application/json\")\n      )         \n      # the content returns a group of token calls in Json format, but first convert from raw to Char format\n      AuthenticationTokenGroup <- fromJSON(rawToChar(getAuthenticationToken$content))\n      # for the 'staging' server look for the admin permissions token find the location index with grep \n      adminAuthenticationToken <- AuthenticationTokenGroup$token[ grep('admin',AuthenticationTokenGroup$description)]\n      #getAuthenticationToken$status_code\n      cat(KYCUUID,\"--> BearerToken attempts-->\", attempts, ' TimeStamp: ',strftime(Sys.time(),\"%Y-%m-%d %H:%M:%S\"),\"\\n\", sep = \"\")\n      # exit if the condition is met\n      if (grepl(\"Resource representation is only available with these Content-Types:\\ntext/plain; charset=UTF-8\\ntext/plain\", \n                rawToChar(getAuthenticationToken$content)) == FALSE) {break} \n    }\n  } else {\n    repeat {\n      ## Starts with 1\n      attempts <-  attempts + 1\n      # this Prod website bearer token call is\n      # curl -X GET --header 'Accept: application/json' 'http://kyc-api.kountable.com/v0/admin/users'\n      # needs user name and password authentication 'admin', 'RzpvnDXv8fVjpu3h'\n      getAuthenticationToken <- GET(paste('http://',kserv,'kyc-api.kountable.com/v0/admin/users', sep = \"\"),\n                                    authenticate('admin', 'RzpvnDXv8fVjpu3h', type = \"basic\"),\n                                    add_headers(\n                                      \"Accept\" = \"application/json\")\n      )         \n      # the content returns a group of token calls in Json format, but first convert from raw to Char format\n      AuthenticationTokenGroup <- fromJSON( rawToChar(getAuthenticationToken$content))\n      # for the 'Prod' server look for the person permissions token find the location index with grep \n      personAuthenticationToken <- AuthenticationTokenGroup$token[ grep('person',AuthenticationTokenGroup$description)]\n      #getAuthenticationToken$status_code\n      cat(KYCUUID,\"--> BearerToken attempts-->\", attempts, ' TimeStamp: ',strftime(Sys.time(),\"%Y-%m-%d %H:%M:%S\"),\"\\n\", sep = \"\")\n      # exit if the condition is met\n      if (grepl(\"Resource representation is only available with these Content-Types:\\ntext/plain; charset=UTF-8\\ntext/plain\", \n                rawToChar(getAuthenticationToken$content)) == FALSE) {break} \n      \n    }\n  }\n  \n  ## Part 2 call the data using the bearer token from part one, each server has a different token name to use\n  attempts <- 0\n  ## repeat the call if it 'hangsup'\n  if (kserv == 'staging.') {\n    bearerToken <-  adminAuthenticationToken\n  } else {\n    bearerToken <- personAuthenticationToken\n  }\n  repeat {\n    attempts = attempts + 1\n    # this Prod website data call with bearer token is\n    # curl -X GET --header 'Accept: application/json' --header 'KYC-Bearer-Token: oJLXXlf4Q24FZgCnYeYR3ps2oIXtVqzZ' \n    # 'http://kyc-api.kountable.com/v0/persons/2099?amlPaidCheck=false'\n    # curl -X GET --header 'Accept: application/json' --header 'KYC-Bearer-Token: cv6yzIsmvMiwXFjit5-wtZHWPGBD-4l-' \n    # 'http://staging.kyc-api.kountable.com/v0/persons/2099?amlFriendsPaidCnt=0&amlFriendsFreeCnt=100'\n    ## october 18, 2016\n    # curl -X GET --header 'Accept: application/json' --header 'KYC-Bearer-Token: oJLXXlf4Q24FZgCnYeYR3ps2oIXtVqzZ' \n    # 'http://kyc-api.kountable.com/v0/persons/10747?amlPaidCheck=false&amlFriendsPaidCnt=0&amlFriendsFreeCnt=100'\n    \n    \n    apiKYCget <- GET(paste0('http://',kserv,'kyc-api.kountable.com/v0/persons/', KYCUUID,'?amlPaidCheck=',amlPaid,'&amlFriendsPaidCnt=',amlFriendsPaidCnt,'&amlFriendsFreeCnt=',amlFriendsFreeCnt),\n                     add_headers(\n                       \"Accept\" = \"application/json\",\n                       \"KYC-Bearer-Token\" = bearerToken\n                     ))\n    ## How many call attempts\n    cat(KYCUUID,\"--> apiKYCCall6 attempts-->\", attempts, ' Server--> ',kserv, ' TimeStamp: ',strftime(Sys.time(),\"%Y-%m-%d %H:%M:%S\"),\"\\n\", sep=\"\")\n    \n    # exit if the condition is met\n    if (grepl(\"Resource representation is only available with these Content-Types:\\ntext/plain; charset=UTF-8\\ntext/plain\"\n              ,rawToChar(apiKYCget$content))==FALSE){ break} \n  }\n  \n  x <- fromJSON( rawToChar(apiKYCget$content), simplifyVector = TRUE, simplifyMatrix = TRUE, simplifyDataFrame = TRUE)\n  \n  ## check to make sure profile has data if not call swagger profile\n  if(is.null(x$profile)){\n    cat('================================================================\\n')\n    cat('================================================================\\n')\n    cat('======================no Profile data===========================\\n')\n    cat('================================================================\\n')\n    cat('================================================================\\n')\n    x$profile <- get.V2UserProfile(apiUUID = x$uuid)\n  }\n  \n  return(x) \n}\n\n\n# apikycCall <- get.apiKYCCall('10198')\n\n\n##########################################################################################################################################\n##########################################################################################################################################\n\n### we are pulling json formatted text from within a Json format\nget.webPresencepages <- function(uuidApiKYC1){\n  \n  uuidApiWebKYC1 <- lapply(uuidApiKYC1$collectedProfile$web$webpresencePages, fromJSON, simplifyVector = TRUE,simplifyDataFrame = TRUE,simplifyMatrix = TRUE)\n  names(uuidApiWebKYC1) <- paste0('url_',sprintf(\"%03d\",1:length(uuidApiWebKYC1)))\n  \n  ## which bestParts are greater than 0\n  ## only keep those with found text in bestParts\n  uuidApiWebKYC1 <- uuidApiWebKYC1[which(lapply(uuidApiWebKYC1, function(x) {length(x[['bestParts']])})>0)]\n  \n  ### now put matchedItems and otherItems into one dataframe per url\n  ###Success!!! this goes using the bind_rows(c(i,j)) logic solves it!  the list within solution for dplyr\n  uuidApiWebMatchedOtherKYC <- lapply(uuidApiWebKYC1,function(j){lapply(1:length(j[['bestParts']][['relatedness']]), function(x){ bind_rows( c(j[['bestParts']][['matchedItems']][x],j[['bestParts']][['otherItems']][x]))})})\n  \n  #lapply(uuidApiWebKYC1,function(x){x[['otherMatched']] <- uuidApiWebMatchedOtherKYC[[x]]})\n  \n  for (i in 1:length(uuidApiWebKYC1)) {\n    uuidApiWebKYC1[[i]]$bestParts$otherMatched <- uuidApiWebMatchedOtherKYC[[i]]\n    \n  }\n  return(uuidApiWebKYC1)\n}\n##########################################################################################################################################\n##########################################################################################################################################\n\nget.categoryWebSummary <- function(uuidApiWebKYC1,slideRange) {\n  ## put categories into a list or table\n  # make a tbl_df with the check box results then just keep the 1s to display\n  # a min max range on every category airlines .445 - .670\n  ## create list of url categories and values\n  cat('-->get.categoryWebSummary  TimeStamp: ',strftime(Sys.time(),\"%Y-%m-%d %H:%M:%S\"),\"\\n\", sep = \"\")\n  categ1 <- lapply(min(slideRange):max(slideRange), function(i) {uuidApiWebKYC1[[i]]$categories})\n  ## turn each urls list of categories into a data.frame use dplyr's bind_rows to turn the list of dataframe categories into a  \n  tbl.categories <- bind_rows(lapply(categ1,function(x){data.frame(categories=names(x),values=unlist(x,use.names = FALSE))}))\n  cat('-->get.categoryWebSummary  Length of Categories:', length(tbl.categories),' TimeStamp: ',strftime(Sys.time(),\"%Y-%m-%d %H:%M:%S\"),\"\\n\", sep = \"\")\n  tbl.categories <- tbl.categories %>% group_by(categories) %>% summarise(freq=n(),min=min(values),max=max(values))\n  return(tbl.categories)\n}\n##################################################################################################################################\n##################################################################################################################################\n## sample url code for DT\n##################################################################################################################################\n##################################################################################################################################\n\n# get.socialMediaData <- function(uuidApiKYC1){\n#   ## list of icons used on major providers\n#   iconList <-   tagList(\n#     tags$img(src = \"http://icons.iconarchive.com/icons/fasticon/web-2/48/FaceBook-icon.png\", height=25, width=25),\n#     tags$img(src = \"https://cdn1.iconfinder.com/data/icons/iconza-circle-social/64/697029-twitter-128.png\",height=25, width=25),\n#     tags$img(src = \"http://icons.iconarchive.com/icons/designbolts/free-instagram/128/Active-Instagram-3-icon.png\", height=25, width=25),                             \n#     tags$img(src = \"https://cdn0.iconfinder.com/data/icons/social-network-7/50/9-128.png\", height=25, width=25),\n#     tags$img(src = \"http://icons.iconarchive.com/icons/danleech/simple/128/yahoo-icon.png\", height=25, width=25),\n#     tags$img(src = \"http://icons.iconarchive.com/icons/carlosjj/google-jfk/128/googleplus-icon.png\", height=25, width=25),\n#     tags$img(src = \"http://icons.iconarchive.com/icons/tatice/cristal-intense/128/Apple-grey-icon.png\", height=25, width=25),\n#     tags$img(src = \"http://icons.iconarchive.com/icons/icons8/windows-8/128/Systems-Android-Os-icon.png\", height=25, width=25),\n#     tags$img(src = \"http://icons.iconarchive.com/icons/dtafalonso/android-l/128/Gmail-icon.png\", height=25, width=25)\n#   )\n#   iconList <- lapply(iconList,paste)\n#   \n#   \n#   ## complete list\n#   providerNameList <- c(\"Facebook\",\"Twitter\",\"Instagram\",\"LinkedIn\",\"Yahoo\",\"Google+\",\"iOS mobile app\",\"Android mobile app\",\"Gmail\")\n#   providerProfileName <- c(\"Facebook\",\"Twitter\",\"Instagram\",\"LinkedIn\",\"Yahoo\",\"Google+\") # these have photo url and profile url\n#   nonProviderName <- providerNameList[which(!(providerNameList %in% providerProfileName))] #the not ! before is a nice trick for not in\n#   \n#   ## add the names to the icons for indexing provider$name\n#   names(iconList) <- providerNameList\n#   \n#   ## use dplyr tbl_df for ease of use with identities$provider which is currently a data.frame\n#   tbl.provider <- tbl_df(uuidApiKYC1$identities$provider)\n#   tbl.provider$photoUrl <- uuidApiKYC1$identities$photoUrl\n#   tbl.provider$profileUrl <- uuidApiKYC1$identities$profileUrl\n#   \n#   \n#   \n#   ## we want to only display photos or profiles where they should exist\n#   ## if provider and photo display photo, else diplay no 'provider' photo url\n#   ## if provider and profile display profile, else display no 'provider' profile url\n#   ## if non provider display NA in photo and profile url\n#   \n#   ##get rid of Gigya\n#   tbl.provider <- tbl.provider %>% filter(name != \"Gigya\")\n#   \n#   # use filter to make non provider and provider tables\n#   # then row_bind them back into original table (dplyr has no in row mutate function)\n#   \n#   # subset non providers and fix photo and profile url with NA\n#   tbl.nonProvider <- tbl.provider %>% filter(name %in% nonProviderName) %>% rowwise() %>% mutate(profileUrl='NA', photoUrl='NA')\n#   \n#   tbl.providerMatches <- tbl.provider %>% filter(name %in% providerProfileName) %>% rowwise() %>% \n#     mutate(profileUrl=ifelse(profileUrl=='',paste0(\"No \",paste0(name),\" Profile Url\"),paste0(tags$a(\"View \", paste0(name), \" Profile\", href = profileUrl))), \n#            photoUrl=ifelse(photoUrl=='',paste0(\"No \",paste0(name),\" Photo Url\"),paste0(tags$img(src = photoUrl, height=100, width=100))))\n#   #glimpse(tbl.providerMatches)\n#   \n#   tbl.providerModified <- bind_rows(tbl.nonProvider,tbl.providerMatches)\n#   #glimpse(tbl.providerModified)\n#   \n#   ## add icons\n#   tbl.providerModified$icon <- unlist(unname(iconList[tbl.providerModified$name]))\n#   #glimpse(tbl.providerModified)\n#   \n#   ## keep only key columns for now\n#   tbl.providerKey <- tbl.providerModified %>% select(icon,name,photoUrl,profileUrl)\n#   return(tbl.providerKey)\n#   \n# }\nget.socialMediaData <- function(uuidApiKYC1){\n  ## list of icons used on major providers\n  iconList <-   tagList(\n    tags$img(src = \"http://icons.iconarchive.com/icons/fasticon/web-2/48/FaceBook-icon.png\", height=25, width=25),\n    tags$img(src = \"https://cdn1.iconfinder.com/data/icons/iconza-circle-social/64/697029-twitter-128.png\",height=25, width=25),\n    tags$img(src = \"http://icons.iconarchive.com/icons/designbolts/free-instagram/128/Active-Instagram-3-icon.png\", height=25, width=25),                             \n    tags$img(src = \"https://cdn0.iconfinder.com/data/icons/social-network-7/50/9-128.png\", height=25, width=25),\n    tags$img(src = \"http://icons.iconarchive.com/icons/danleech/simple/128/yahoo-icon.png\", height=25, width=25),\n    tags$img(src = \"http://icons.iconarchive.com/icons/carlosjj/google-jfk/128/googleplus-icon.png\", height=25, width=25),\n    tags$img(src = \"http://icons.iconarchive.com/icons/tatice/cristal-intense/128/Apple-grey-icon.png\", height=25, width=25),\n    tags$img(src = \"http://icons.iconarchive.com/icons/icons8/windows-8/128/Systems-Android-Os-icon.png\", height=25, width=25),\n    tags$img(src = \"http://icons.iconarchive.com/icons/dtafalonso/android-l/128/Gmail-icon.png\", height=25, width=25)\n  )\n  iconList <- lapply(iconList,paste)\n  \n  \n  ## complete list\n  providerNameList <- c(\"Facebook\",\"Twitter\",\"Instagram\",\"LinkedIn\",\"Yahoo\",\"Google+\",\"iOS mobile app\",\"Android mobile app\",\"Gmail\")\n  providerProfileName <- c(\"Facebook\",\"Twitter\",\"Instagram\",\"LinkedIn\",\"Yahoo\",\"Google+\") # these have photo url and profile url\n  nonProviderName <- providerNameList[which(!(providerNameList %in% providerProfileName))] #the not ! before is a nice trick for not in\n  \n  ## add the names to the icons for indexing provider$name\n  names(iconList) <- providerNameList\n  \n  ## use dplyr tbl_df for ease of use with identities$provider which is currently a data.frame\n  tbl.provider <- tbl_df(uuidApiKYC1$identities$provider)\n  tbl.provider$photoUrl <- uuidApiKYC1$identities$photoUrl\n  tbl.provider$profileUrl <- uuidApiKYC1$identities$profileUrl\n  \n  ## first add providerUid to table\n  tbl.provider$providerUid <- uuidApiKYC1$identities$providerUid\n  \n  ##get rid of Gigya\n  tbl.provider <- tbl.provider %>% filter(name != \"Gigya\")\n  \n  # use filter to make non provider and provider tables\n  # subset non providers and fix photo and profile url with NA\n  tbl.nonProvider <- tbl.provider %>% filter(name %in% nonProviderName) %>% rowwise() %>% mutate(profileUrl='NA', photoUrl='NA')\n  \n  ## we want to only display photos or profiles where they should exist\n  ## if provider and photo display photo, else diplay no 'provider' photo url\n  ## then build the constructedProfileUrl complete with html a href tags by profile name\n  ##########################################################################################################################\n  ## facebook https://facebook.com/<UID>   https://facebook.com/1001765633264274\n  ## twitter https://twitter.com/intent/user?user_id=twitter_id   https://twitter.com/intent/user?user_id=739931893722980360   \n  ## instagram \thttps://instagram.com/user/?id={USER_ID}1251854138  https://instagram.com/user/?id=1251854138\n  ## linkedIn http://www.linkedin.com/profile/qa?id=\n  ## Yahoo uri in cassandra yahoo requires oath token, unkown how to construct yahoo profile\n  ## googleplus  https://plus.google.com/111030069939436266012\n  ##########################################################################################################################\n  tbl.providerMatches <- tbl.provider %>% filter(name %in% providerProfileName) %>% rowwise() %>% \n    mutate(photoUrl=ifelse(photoUrl=='',paste0(\"No \",paste0(name),\" Photo Url\"),paste0(tags$img(src = photoUrl, height=100, width=100))),\n           constructedProfileUrl = \n             ifelse(grepl('FACEBOOK',code), paste0(tags$a(\"Facebook profile\",href = paste0('https://facebook.com/',providerUid),target='_blank',style='float:right')),\n                    ifelse(grepl('TWITTER',code), paste0(tags$a(\"Twitter profile\",href = paste0('https://twitter.com/intent/user?user_id=',providerUid),target='_blank',style='float:right')),\n                           ifelse(grepl('INSTAGRAM',code), paste0(tags$a(\"Instagram profile\",href = paste0('https://instagram.com/user/?id=',providerUid),target='_blank',style='float:right')),\n                                  # ifelse(grepl('LINKEDIN',code), paste0(tags$a(\"LinkedIn profile\",href = paste0('http://www.linkedin.com/profile/qa?id=',providerUid),target='_blank',style='float:right')),\n                                  ifelse(grepl('GOOGLEPLUS',code), paste0(tags$a(\"Googleplus profile\",href = paste0('https://plus.google.com/',providerUid),target='_blank',style='float:right')),\n                                         \"No Profile Url\")))))\n  \n  \n  ## Finally, if the original profileUrl field is empty, replace it with constructedProfileUrl\n  tbl.providerMatches <-  tbl.providerMatches %>% rowwise() %>% \n    mutate(profileUrl = ifelse(profileUrl == '', constructedProfileUrl, paste0(tags$a(profileUrl, href=profileUrl,target='_blank'))))\n  \n  \n  # then row_bind them back into original table (dplyr has no in row mutate function)\n  tbl.providerModified <- bind_rows(tbl.nonProvider,tbl.providerMatches)\n  \n  ## add icons\n  tbl.providerModified$icon <- unlist(unname(iconList[tbl.providerModified$name]))\n  #glimpse(tbl.providerModified)\n  \n  ## keep only key columns for now\n  tbl.providerKey <- tbl.providerModified %>% select(icon,name,photoUrl,profileUrl)\n  return(tbl.providerKey)\n  \n}\n\n############################################################################################################################\n############################################################################################################################\n############################################################################################################################\nget.locationsImages <- function(df.locations) {\n  require(dplyr)\n  require(shiny)\n  if (is.null(df.locations)){ return(NULL)}\n  ## use sapply on the list of images and sapply within to create a chracter vector equal to the number of rows in the locations table\n  ## then join the character vector to the dataframe as images\n  #imgChar <- sapply(df.locations$images, function(i) {paste(sapply(i, function(x){paste0(tags$img(src = x, height=100, width=100))}),collapse=', ')})\n  imgChar <- paste0(sapply(df.locations$images, function(i) {paste(sapply(i, function(x){paste0(tags$a(tags$img(src = x, height=50, width=100),href=x,target='_blank'))}))}), collapse = '')\n  \n  df.locations$images <- imgChar\n  ##order dataframe columns and convert to tbl(dplyr)\n  ## street dissapeared 2016-07-12 \n  \n  if (is.null(df.locations$street)) {\n    df.locations <- tbl_df(df.locations[c(\"userNote\",\"name\", 'images', 'lt','lg','city','state','country')])\n  } else {\n    df.locations <- tbl_df(df.locations[c(\"userNote\",\"name\", 'images', 'lt','lg','street','city','state','country')])\n  }\n  \n  \n  return(df.locations)\n}\n############################################################################################################################\n############################################################################################################################\n\n############################################################################################################################\n############################################################################################################################\n############################################################################################################################\nget.kycDocumentsTbl <- function(kycDocuments){\n  require(dplyr)\n  require(shiny)\n  cat('Called get.kycDocumentsTbl','\\n', sep = '')\n  ## select all columns but dataframes items and dataframe type\n  kycDocs <- tbl_df(kycDocuments %>% select(-items,-type))\n  # colnames(kycDocuments) <- paste0(\"documents.\",colnames(kycDocuments))\n  \n  ## select all columns but dataframes file \n  ## then bind_rows to make table sapply gets rid of the list of 1 in between !!!!!!\n  kycDocFiles <- bind_rows(sapply(kycDocuments$items, dplyr::select, file))\n  \n  ## add file. to filenames and order table by list\n  colnames(kycDocFiles) <- paste0('file.',names(kycDocFiles))\n  kycDocFiles <- kycDocFiles[ c('file.id','file.name','file.description','file.mimeType','file.lat','file.lng','file.url','file.timestamp')]\n  \n  ## use mutate to add the hyperlink and image tags to file.url\n  kycDocFiles <- kycDocFiles %>% rowwise() %>% mutate(file.url=paste0(tags$a(tags$img(src = file.url, height=300, width=300),href = file.url,target='_blank')))\n  \n  ## for the non subsets coluns, documentId, id, sortOrd uses lapply, bind_rows will adapt and combine them all\n  kycDocItems <- bind_rows(lapply(kycDocuments$items, dplyr::select, documentId,id, sortOrd ))\n  colnames(kycDocItems) <- paste0('items.',names(kycDocItems))\n  \n  ## for the non subsets coluns, documentId, id, sortOrd uses lapply, bind_rows will adapt and combine them all\n  kycDocType <- tbl_df(kycDocuments$type)\n  colnames(kycDocType) <- paste0('type.',names(kycDocType))\n  \n  ## ok if you have multipage documents, use table on documentId to identify their frequencies\n  ## use rep by their freq convert to integer and use to repeat rownames\n  ## to repeate rows in a dataframe accordingly\n  multiPageDocs <- as.integer(rep(rownames(kycDocs),table(kycDocItems$items.documentId)))\n  \n  \n  \n  ## combine them all together and maker urls images with hyperlinks\n  ## use multiPageDocs in case their are multPage file uploads in file on KYC Documents and kyc Doc Type\n  tbl.kycDocuments <- data.frame(kycDocs[multiPageDocs,],kycDocItems,kycDocType[multiPageDocs,],kycDocFiles)\n  ## combine them all together and maker urls images with hyperlinks\n  # tbl.kycDocuments <- data.frame(kycDocs,kycDocItems,kycDocType,kycDocFiles)\n  tbl.kycDocuments <- tbl.kycDocuments[c(1,2,11,9,19,17,18,20,3,5,6,13)]\n  cat('made it to the end of kycDocumentsTbl with length tbl.kycDocuments = ',length(tbl.kycDocuments),'\\n', sep = '')\n  # print(tbl.kycDocuments)\n  \n  return(tbl.kycDocuments)\n}\n\n############################################################################################################################\n############################################################################################################################\n\n############################################################################################################################\n############################################################################################################################\n############################################################################################################################\nget.V2UserProfile <- function(apiUUID = '504') { \n  ### Returns the search list by userId and name\n  require(httr)\n  require(dplyr)\n  require(jsonlite)\n  ##### SWAGGER for project calls from api.kountable.com\n  cat(\"---> Called get.V2UsersList\",\"\\n\",sep = \"\")\n  \n  tSwaggerPost <- POST(paste('http://api.kountable.com/api/v2/user/login', sep = \"\"),\n                       add_headers(\n                         \"Content-Type\" = \"application/json\",\n                         \"k-app-type\" = \"3rd\",\n                         \"k-app-version\" = \"1.0.0\",\n                         \"Cache-Control\" = \"no-cache\"),\n                       body = '{\"primary_email\" : \"joe@kountable.com\", \"password\" : \"ksH-g3u-hkA-VYp\"}') \n  # the content returns a group of token calls in Json format, but first convert from raw to Char format\n  accessToken <- fromJSON(rawToChar(tSwaggerPost$content))\n  cat(\"---> BearerToken: \", accessToken$data$access_token,\"\\n\",sep = \"\")\n  \n  getV2Swagger <- GET(paste0('http://api.kountable.com/api/v2/users/',apiUUID),\n                      add_headers(\n                        \"Authorization\" = paste(\"Bearer \", accessToken$data$access_token, sep=''),\n                        \"Content-Type\" = \"application/json\", \n                        \"k-app-type\" = \"3rd\",\n                        \"k-app-version\" = \"1.0.0\",\n                        \"Cache-Control\" = \"no-cache\"))\n  getV2Swagger <- fromJSON(rawToChar(getV2Swagger$content), simplifyVector = TRUE, simplifyDataFrame = TRUE, simplifyMatrix = TRUE)\n  \n  str(getV2Swagger)\n  ## make sure this is a profile data structure\n  ## put the country name is as country and overwrite the list structure there\n  getV2Swagger$data$country <- getV2Swagger$data$country$name\n  \n  ls.profile <- getV2Swagger$data\n  ## correct to camelcase\n  names(ls.profile) <- c(\"id\", \"createdAt\",\n                         \"updatedAt\",\n                         \"createdBy\",\n                         \"statusId\",\n                         \"firstName\",\n                         \"lastName\",\n                         \"middleName\",\n                         \"primaryEmail\",\n                         \"primaryImageFull\",\n                         \"primaryImageThumb\",\n                         \"emailVerified\",\n                         \"district\",\n                         \"sector\",\n                         \"primaryPhone\",\n                         \"skype\",\n                         \"phoneVerified\",\n                         \"avatar\",\n                         \"firebaseIdentifier\",\n                         \"isNew\",\n                         \"address\",\n                         \"address2\",\n                         \"city\",\n                         \"state\",\n                         \"province\",\n                         \"countryId\",\n                         \"country\",\n                         \"postalCode\", \"govIdNumber\", \"passportId\", \"birthday\", \"nationalityId\")\n  \n  return(ls.profile)\n}\n\n############################################################################################################################\n############################################################################################################################\n\n\n############################################################################################################################\n############################################################################################################################\n############################################################################################################################\n\nget.frankProfileTable <- function(uuidApiKYC1) {\n  require(dplyr)\n  require(shiny)\n  \n  ## check to make sure profile has data if not call swagger profile\n  if(is.null(uuidApiKYC1$profile)){\n    uuidApiKYC1$profile <- get.V2UserProfile(apiUUID = uuidApiKYC1$uuid)\n  }\n  ## build initial table of 20 fields from profile call\n  tbl.profile <- tbl_df(data.frame(profile=names(unlist(uuidApiKYC1$profile)), data = unname(unlist(uuidApiKYC1$profile)), stringsAsFactors = F))\n  cat('nrows tbl.profile ->',nrow(tbl.profile),\"\\n\", sep = '')\n  # ## add governmentId, passportId and birthDate to table\n  # missingProfileFieldsNames <- c('governmentId','passportId','birthDate', 'nationality')\n  # missingProfileFieldsData <- c('','','','')\n  # tbl.profile <- bind_rows(tbl.profile,data.frame(profile=missingProfileFieldsNames, data = missingProfileFieldsData))\n  # cat('nrows tbl.profile add 4 missing->',nrow(tbl.profile),\"\\n\", sep = '')\n  # \n  ## keep everything but the reffererId its intermittant and may be only apart of the June 24 update of the app?\n  # tbl.profile <- tbl.profile %>% rowwise() %>% filter(profile != 'referrerId')\n  # cat('nrows tbl.profile remove referreId missing->',nrow(tbl.profile),\"\\n\", sep = '')\n  # print(tbl.profile$profile)\n  # ##get profile sort order field sortBy, kActive, kScore\n  ##built table using paste_from_clipboard, toJSON, copied and pasted output added single quotes, etc.\n  #sortProfileBy <- fromJSON('[{\"sortBy\":10,\"kActive\":1,\"kScore\":2},{\"sortBy\":19,\"kActive\":1,\"kScore\":10},{\"sortBy\":22,\"kActive\":1,\"kScore\":0},{\"sortBy\":17,\"kActive\":1,\"kScore\":2},{\"sortBy\":5,\"kActive\":1,\"kScore\":0},{\"sortBy\":11,\"kActive\":1,\"kScore\":2},{\"sortBy\":1,\"kActive\":1,\"kScore\":10},{\"sortBy\":13,\"kActive\":1,\"kScore\":2},{\"sortBy\":8,\"kActive\":1,\"kScore\":0},{\"sortBy\":12,\"kActive\":1,\"kScore\":2},{\"sortBy\":4,\"kActive\":1,\"kScore\":2},{\"sortBy\":3,\"kActive\":1,\"kScore\":2},{\"sortBy\":20,\"kActive\":1,\"kScore\":10},{\"sortBy\":23,\"kActive\":1,\"kScore\":0},{\"sortBy\":18,\"kActive\":1,\"kScore\":2},{\"sortBy\":21,\"kActive\":1,\"kScore\":0},{\"sortBy\":9,\"kActive\":1,\"kScore\":0},{\"sortBy\":6,\"kActive\":1,\"kScore\":10},{\"sortBy\":2,\"kActive\":0,\"kScore\":0},{\"sortBy\":7,\"kActive\":1,\"kScore\":0},{\"sortBy\":14,\"kActive\":0,\"kScore\":10},{\"sortBy\":15,\"kActive\":0,\"kScore\":10},{\"sortBy\":16,\"kActive\":0,\"kScore\":5}]')\n  # if (nrow(tbl.profile)==25) {\n  #   sortProfileBy <- fromJSON('[{\"sortBy\":10,\"kActive\":1,\"kScore\":2},{\"sortBy\":26,\"kActive\":0,\"kScore\":0},{\"sortBy\":20,\"kActive\":1,\"kScore\":10},{\"sortBy\":24,\"kActive\":1,\"kScore\":0},{\"sortBy\":17,\"kActive\":1,\"kScore\":0},{\"sortBy\":5,\"kActive\":1,\"kScore\":0},{\"sortBy\":11,\"kActive\":1,\"kScore\":2},{\"sortBy\":1,\"kActive\":1,\"kScore\":10},{\"sortBy\":13,\"kActive\":1,\"kScore\":2},{\"sortBy\":8,\"kActive\":1,\"kScore\":0},{\"sortBy\":12,\"kActive\":1,\"kScore\":2},{\"sortBy\":4,\"kActive\":1,\"kScore\":2},{\"sortBy\":3,\"kActive\":1,\"kScore\":2},{\"sortBy\":21,\"kActive\":1,\"kScore\":10},{\"sortBy\":25,\"kActive\":1,\"kScore\":0},{\"sortBy\":19,\"kActive\":1,\"kScore\":0},{\"sortBy\":23,\"kActive\":1,\"kScore\":0},{\"sortBy\":9,\"kActive\":1,\"kScore\":0},{\"sortBy\":6,\"kActive\":1,\"kScore\":10},{\"sortBy\":2,\"kActive\":0,\"kScore\":0},{\"sortBy\":7,\"kActive\":1,\"kScore\":0},{\"sortBy\":14,\"kActive\":0,\"kScore\":10},{\"sortBy\":15,\"kActive\":0,\"kScore\":10},{\"sortBy\":16,\"kActive\":0,\"kScore\":5},{\"sortBy\":18,\"kActive\":0,\"kScore\":5}]')  \n  # }else {\n  #   sortProfileBy <- fromJSON('[{\"sortBy\":10,\"kActive\":1,\"kScore\":2},{\"sortBy\":26,\"kActive\":0,\"kScore\":0},{\"sortBy\":20,\"kActive\":1,\"kScore\":10},{\"sortBy\":24,\"kActive\":1,\"kScore\":0},{\"sortBy\":17,\"kActive\":1,\"kScore\":0},{\"sortBy\":5,\"kActive\":1,\"kScore\":0},{\"sortBy\":11,\"kActive\":1,\"kScore\":2},{\"sortBy\":1,\"kActive\":1,\"kScore\":10},{\"sortBy\":13,\"kActive\":1,\"kScore\":2},{\"sortBy\":8,\"kActive\":1,\"kScore\":0},{\"sortBy\":22,\"kActive\":0,\"kScore\":0},{\"sortBy\":12,\"kActive\":1,\"kScore\":2},{\"sortBy\":4,\"kActive\":1,\"kScore\":2},{\"sortBy\":3,\"kActive\":1,\"kScore\":2},{\"sortBy\":21,\"kActive\":1,\"kScore\":10},{\"sortBy\":25,\"kActive\":1,\"kScore\":0},{\"sortBy\":19,\"kActive\":1,\"kScore\":0},{\"sortBy\":23,\"kActive\":1,\"kScore\":0},{\"sortBy\":9,\"kActive\":1,\"kScore\":0},{\"sortBy\":6,\"kActive\":1,\"kScore\":10},{\"sortBy\":2,\"kActive\":0,\"kScore\":0},{\"sortBy\":7,\"kActive\":1,\"kScore\":0},{\"sortBy\":14,\"kActive\":0,\"kScore\":10},{\"sortBy\":15,\"kActive\":0,\"kScore\":10},{\"sortBy\":16,\"kActive\":0,\"kScore\":5},{\"sortBy\":18,\"kActive\":0,\"kScore\":5}]')\n  #   \n  # }\n  #toJSON(sortProfileBy)\n  # sortProfileBy <- paste_from_clipboard(sep = \"\\t\", header = T)\n  ## add profile sort order to tbl and sort table with arrange(tbl.profile,sortBy) and drop sortBy\n  # tbl.profile <- bind_cols(sortProfileBy,tbl.profile)\n  # tbl.profile <- tbl.profile %>% arrange(sortBy) %>% select(-sortBy)\n  # ## Here is the kscore table version 2 which is the version with key and using dplyr to merge with \n  ## whatever fields are in the current call.  We are attempting to be fluid by scoring only fields we decide before hand\n  ## sortPrwhofileBy is made in a numbers spreadsheet\n  sortProfileBy <- fromJSON('[{\"sortBy\":6,\"kActive\":1,\"kScore\":2,\"profile\":\"city\"},{\"sortBy\":21,\"kActive\":1,\"kScore\":0,\"profile\":\"updatedAt\"},{\"sortBy\":16,\"kActive\":1,\"kScore\":10,\"profile\":\"emailVerified\"},{\"sortBy\":22,\"kActive\":1,\"kScore\":0,\"profile\":\"avatar\"},{\"sortBy\":11,\"kActive\":1,\"kScore\":0,\"profile\":\"primaryEmail\"},{\"sortBy\":23,\"kActive\":1,\"kScore\":0,\"profile\":\"middleName\"},{\"sortBy\":7,\"kActive\":1,\"kScore\":2,\"profile\":\"state\"},{\"sortBy\":1,\"kActive\":1,\"kScore\":10,\"profile\":\"primaryImageFull\"},{\"sortBy\":9,\"kActive\":1,\"kScore\":2,\"profile\":\"country\"},{\"sortBy\":24,\"kActive\":1,\"kScore\":0,\"profile\":\"sector\"},{\"sortBy\":8,\"kActive\":1,\"kScore\":2,\"profile\":\"postalCode\"},{\"sortBy\":3,\"kActive\":1,\"kScore\":5,\"profile\":\"lastName\"},{\"sortBy\":2,\"kActive\":1,\"kScore\":5,\"profile\":\"firstName\"},{\"sortBy\":17,\"kActive\":1,\"kScore\":10,\"profile\":\"phoneVerified\"},{\"sortBy\":25,\"kActive\":1,\"kScore\":0,\"profile\":\"statusId\"},{\"sortBy\":10,\"kActive\":1,\"kScore\":0,\"profile\":\"primaryPhone\"},{\"sortBy\":20,\"kActive\":1,\"kScore\":0,\"profile\":\"createdAt\"},{\"sortBy\":18,\"kActive\":1,\"kScore\":2,\"profile\":\"province\"},{\"sortBy\":4,\"kActive\":1,\"kScore\":2,\"profile\":\"address\"},{\"sortBy\":26,\"kActive\":1,\"kScore\":0,\"profile\":\"primaryImageThumb\"},{\"sortBy\":19,\"kActive\":1,\"kScore\":2,\"profile\":\"district\"},{\"sortBy\":5,\"kActive\":1,\"kScore\":0,\"profile\":\"address2\"},{\"sortBy\":12,\"kActive\":1,\"kScore\":10,\"profile\":\"govIdNumber\"},{\"sortBy\":13,\"kActive\":1,\"kScore\":10,\"profile\":\"passportId\"},{\"sortBy\":14,\"kActive\":1,\"kScore\":10,\"profile\":\"birthday\"},{\"sortBy\":15,\"kActive\":1,\"kScore\":5,\"profile\":\"nationalityId\"}]')\n  # write.table(tbl.profile, file=pipe(\"pbcopy\"), quote = FALSE, sep=\"\\t\", row.names = FALSE)\n  # sortProfileBy <- paste_from_clipboard(sep='\\t', header = T)\n  # toJSON(sortProfileBy)\n  \n  ## full join by Key\n  ## arrange by sortBy field all missing should go to the bottom then remove sortBy column\n  \n  tbl.profile <- dplyr::full_join( tbl.profile, sortProfileBy, by = \"profile\")\n  tbl.profile <- tbl.profile %>% arrange(sortBy) %>% select(-sortBy)\n  \n  \n  ## if kscore or kactive are NA change to 0\n  tbl.profile$kActive[which(is.na(tbl.profile$kActive))] <- 0\n  tbl.profile$kScore[which(is.na(tbl.profile$kScore))] <- 0\n  \n  ## calculate Kscore Red by checking for NAN, NA, blank in data field\n  naData <- -as.integer(is.na(tbl.profile$data)) \n  nanData <- -as.integer(is.nan(tbl.profile$data))\n  blankData <- -as.integer(nchar(tbl.profile$data) < 1)\n  ## add the three vectors then add them to the kActive Vector\n  emptyData <- naData + nanData + blankData\n  ## but first if kActive is not counted or 0 make sure emptyData is also 0 and not negative 1\n  emptyData[which(tbl.profile$kActive == 0)] <- 0\n  \n  tbl.profile$missingData <- tbl.profile$kActive + emptyData\n  \n  ## email verified and phone verified true/false should be 0/1 in missing data\n  tbl.profile$missingData[which(tbl.profile$data %in% c(\"TRUE\",\"FALSE\"))] <- as.integer(as.logical(tbl.profile$data[which(tbl.profile$data %in% c(\"TRUE\",\"FALSE\"))]))\n  \n  ## make sure NAs are 0 so all calculations work\n  tbl.profile$missingData[which(is.na(tbl.profile$missingData))] <- 0\n  \n  ## multiply by Kscore\n  tbl.profile$FrankProfileKScore <- tbl.profile$missingData * tbl.profile$kScore\n  \n  ## add numericInputs and checkboxes to table\n  ## put tags on photos\n  \n  tbl.profile$data[which(tbl.profile$profile %in% c(\"primaryImageFull\",\"avatar\"))] <- paste0(tags$a(tags$img(src = tbl.profile$data[which(tbl.profile$profile %in% c(\"primaryImageFull\",\"avatar\"))], height=250, width=250),href = tbl.profile$data[which(tbl.profile$profile %in% c(\"primaryImageFull\",\"avatar\"))],target='_blank',style='float:right'))\n  \n  # tbl.profile <- tbl.profile %>% rowwise() %>% \n  #   mutate(kScore = paste0(tags$div(numericInput(paste0(\"kNum_\",profile),label=\"\",value = kScore, width=75),style='float:center-block')),\n  #          kActive = paste0(tags$div(br(),checkboxInput(paste0(\"kBox_\",profile), label=\"\", value = as.logical(as.integer(missingData)), width = 30),style='float:right')),\n  #          data = ifelse(regexpr('http',data) == 1, paste0(tags$a(tags$img(src = data, height=250, width=250),href = data,target='_blank',style='float:right')),data))\n  # \n  ## now lets get rid of checkboxes and numericInputs for 1, 15-25 rows\n  ## tbl.profile[ c(2,5,7,8,9,22:25),c('kActive','kScore')] <- ''\n  ## now we'll keep only the rows we want to display\n  ## tbl.profile <- tbl.profile[ c(1,3:4,6:22,24),]\n  \n  \n  #View(tbl.profile)\n  \n  return(tbl.profile)\n  \n}\n############################################################################################################################\n############################################################################################################################\n#get.frankProfileTable(uuidApiKYC1)\n\n############################################################################################################################\n############################################################################################################################\n############################################################################################################################\n\nget.frankBusinessData <- function(uuidApiKYC1){\n  require(dplyr)\n  cat('call-> get.frankBusinessData -> any data? length should be 20', length(uuidApiKYC1$businessReputation$information), '\\n', sep = \"  \")\n  if(is.null(uuidApiKYC1$businessReputation)){return(NULL)}\n  print(uuidApiKYC1$businessReputation$information)\n  ## make it a dyplr table\n  ## keep on the first record, the first record appears to be FrankBusiness\n  tbl.business <- tbl_df(uuidApiKYC1$businessReputation$information[1,])\n  \n  tbl.business <- data.frame(profile=names(unlist(tbl.business)), data=unname(unlist(tbl.business)))\n  \n  sortProfileBy <- fromJSON('[{\"sortBy\":15,\"kActive\":1,\"kScore\":0},{\"sortBy\":5,\"kActive\":1,\"kScore\":2},{\"sortBy\":1,\"kActive\":1,\"kScore\":5},{\"sortBy\":9,\"kActive\":1,\"kScore\":10},{\"sortBy\":6,\"kActive\":1,\"kScore\":2},{\"sortBy\":2,\"kActive\":1,\"kScore\":5},{\"sortBy\":16,\"kActive\":1,\"kScore\":10},{\"sortBy\":17,\"kActive\":1,\"kScore\":2},{\"sortBy\":7,\"kActive\":1,\"kScore\":2},{\"sortBy\":11,\"kActive\":1,\"kScore\":2},{\"sortBy\":20,\"kActive\":1,\"kScore\":0},{\"sortBy\":10,\"kActive\":1,\"kScore\":2},{\"sortBy\":4,\"kActive\":1,\"kScore\":0},{\"sortBy\":18,\"kActive\":1,\"kScore\":0},{\"sortBy\":13,\"kActive\":1,\"kScore\":0},{\"sortBy\":3,\"kActive\":1,\"kScore\":10},{\"sortBy\":14,\"kActive\":1,\"kScore\":2},{\"sortBy\":19,\"kActive\":1,\"kScore\":0},{\"sortBy\":12,\"kActive\":0,\"kScore\":0},{\"sortBy\":21,\"kActive\":0,\"kScore\":0},{\"sortBy\":8,\"kActive\":1,\"kScore\":5}]')\n  #sortProfileBy <- paste_from_clipboard(sep='\\t', header = T)\n  #toJSON(sortProfileBy)\n  \n  ## add profile sort order to tbl and sort table with arrange(tbl.profile,sortBy) and drop sortBy\n  tbl.business <- bind_cols(sortProfileBy,tbl.business)\n  tbl.business <- tbl.business %>% arrange(sortBy) %>% select(-sortBy)\n  \n  ## add numericInputs and checkboxes to table\n  ## put tags on photos\n  \n  tbl.business <- tbl.business %>% rowwise() %>% mutate(kScore = paste0(tags$div(numericInput(paste0(\"kNum_\",profile),label=\"\",value = kScore, width=75),style='float:center-block')),\n                                                        kActive = paste0(tags$div(br(),checkboxInput(paste0(\"kBox_\",profile), label=\"\", value = as.logical(as.integer(kActive)), width = 30),style='float:right')))\n  \n  \n  \n  # kScore=paste0(paste0(tags$div(numericInput(paste0(\"kNumB_\",profile),label=\"\",value = kScore, width=25),style=\"float:left\"))),\n  #                                                     kActive= paste0(tags$div(br(),checkboxInput(paste0(\"kBoxB_\",profile), label=\"\", value = kActive, width = 25), style = \"float:left\"))))\n  # \n  cat('Lets Print tbl.business ->','\\n',sep = '')\n  print(tbl.business)\n  return(tbl.business)\n  \n  \n}\n\n\n\n############################################################################################################################\n############################################################################################################################\n\n############################################################################################################################\n############################################################################################################################\n############################################################################################################################\n\nget.V2UsersList <- function(users) { \n  ### Returns the search list by userId and name\n  require(httr)\n  require(dplyr)\n  require(jsonlite)\n  ##### SWAGGER for project calls from api.kountable.com\n  cat(\"---> Called get.V2UsersList\",\"\\n\",sep = \"\")\n  \n  tSwaggerPost <- POST(paste('http://api.kountable.com/api/v2/user/login', sep = \"\"),\n                       add_headers(\n                         \"Content-Type\" = \"application/json\",\n                         \"k-app-type\" = \"3rd\",\n                         \"k-app-version\" = \"1.0.0\",\n                         \"Cache-Control\" = \"no-cache\"),\n                       body = '{\"primary_email\" : \"joe@kountable.com\", \"password\" : \"ksH-g3u-hkA-VYp\"}') \n  # the content returns a group of token calls in Json format, but first convert from raw to Char format\n  accessToken <- fromJSON(rawToChar(tSwaggerPost$content))\n  cat(\"---> BearerToken: \", accessToken$data$access_token,\"\\n\",sep = \"\")\n  \n  getV2Swagger <- GET(paste0('http://api.kountable.com/api/v2/users'),\n                      add_headers(\n                        \"Authorization\" = paste(\"Bearer \", accessToken$data$access_token, sep=''),\n                        \"Content-Type\" = \"application/json\", \n                        \"k-app-type\" = \"3rd\",\n                        \"k-app-version\" = \"1.0.0\",\n                        \"Cache-Control\" = \"no-cache\"))\n  getV2Swagger <- fromJSON(rawToChar(getV2Swagger$content), simplifyVector = TRUE, simplifyDataFrame = TRUE, simplifyMatrix = TRUE)\n  ## create the search field\n  tbl.allUsers <- tbl_df(getV2Swagger$data)\n  #write.table(tbl.allUsers, file=pipe(\"pbcopy\"), quote = FALSE, sep=\"\\t\", row.names = FALSE)\n  tbl.allUsers <- tbl.allUsers %>% rowwise() %>% \n    mutate(searchName=paste0(id, ' - ',first_name,', ',last_name))\n  # mutate(searchName=paste0(id, ' - ',first_name,', ',last_name,'; ', country))\n  ## arrange in descending order\n  tbl.allUsers <- dplyr::arrange(tbl.allUsers,desc(as.integer(tbl.allUsers$id)))\n  \n  ## create the id vectorl and add the search names\n  user_id <- tbl.allUsers$id\n  names(user_id) <- tbl.allUsers$searchName\n  return(user_id)\n}\n\n############################################################################################################################\n############################################################################################################################\n############################################################################################################################\n############################################################################################################################\n############################################################################################################################\n\nget.V2AllProjectsList <- function(){ \n  ##### SWAGGER for project calls from api.kountable.com\n  require(httr)\n  require(jsonlite)\n  tSwaggerPost <- POST(paste('http://api.kountable.com/api/v2/user/login', sep = \"\"),\n                       add_headers(\n                         \"Content-Type\" = \"application/json\",\n                         \"k-app-type\" = \"3rd\",\n                         \"k-app-version\" = \"1.0.0\",\n                         \"Cache-Control\" = \"no-cache\"),\n                       body = '{\"primary_email\" : \"joe@kountable.com\", \"password\" : \"ksH-g3u-hkA-VYp\"}') \n  # the content returns a group of token calls in Json format, but first convert from raw to Char format\n  accessToken <- fromJSON(rawToChar(tSwaggerPost$content))\n  cat(\"--> get.V2ProjectsList\",\"\\n\")\n  getV2Swagger <- GET(paste0('http://api.kountable.com/api/v2/projects?'),\n                      add_headers(\n                        \"Authorization\" = paste(\"Bearer \", accessToken$data$access_token, sep=''),\n                        \"Content-Type\" = \"application/json\", \n                        \"k-app-type\" = \"3rd\",\n                        \"k-app-version\" = \"1.0.0\",\n                        \"Cache-Control\" = \"no-cache\"))\n  getV2Swagger <- fromJSON(rawToChar(getV2Swagger$content), simplifyVector = TRUE, simplifyDataFrame = TRUE, simplifyMatrix = TRUE)\n  \n  return(getV2Swagger$data)\n}\n\n\n\n\n############################################################################################################################\n############################################################################################################################\n\n\n############################################################################################################################\n############################################################################################################################\n############################################################################################################################\nget.V2business_types <- function() { \n  ## get the V2 business types dictionary http://api.kountable.com/api/v2/dictionary/business_types\n  require(httr)\n  require(dplyr)\n  ##### SWAGGER for project calls from api.kountable.com\n  ## need jo@kountable.com with admin rights\n  tSwaggerPost <- POST(paste('http://api.kountable.com/api/v2/user/login', sep = \"\"),\n                       add_headers(\n                         \"Content-Type\" = \"application/json\",\n                         \"k-app-type\" = \"3rd\",\n                         \"k-app-version\" = \"1.0.0\",\n                         \"Cache-Control\" = \"no-cache\"),\n                       body = '{\"primary_email\" : \"joe@kountable.com\", \"password\" : \"ksH-g3u-hkA-VYp\"}') \n  # the content returns a group of token calls in Json format, but first convert from raw to Char format\n  accessToken <- fromJSON(rawToChar(tSwaggerPost$content))\n  \n  getV2Swagger <- GET(paste0('http://api.kountable.com/api/v2/dictionary/business_types'),\n                      add_headers(\n                        \"Authorization\" = paste(\"Bearer \", accessToken$data$access_token, sep=''),\n                        \"Content-Type\" = \"application/json\", \n                        \"k-app-type\" = \"3rd\",\n                        \"k-app-version\" = \"1.0.0\",\n                        \"Cache-Control\" = \"no-cache\"))\n  getV2Swagger <- fromJSON(rawToChar(getV2Swagger$content), simplifyVector = TRUE, simplifyDataFrame = TRUE, simplifyMatrix = TRUE)\n  return(getV2Swagger)\n}\n############################################################################################################################\n############################################################################################################################\n\n############################################################################################################################\n############################################################################################################################\n############################################################################################################################\n\nget.V2BusinessesList <- function(uuid) { \n  ### Returns the search list by userId and name\n  require(httr)\n  require(dplyr)\n  ##### SWAGGER for project calls from api.kountable.com\n  \n  tSwaggerPost <- POST(paste('http://api.kountable.com/api/v2/user/login', sep = \"\"),\n                       add_headers(\n                         \"Content-Type\" = \"application/json\",\n                         \"k-app-type\" = \"3rd\",\n                         \"k-app-version\" = \"1.0.0\",\n                         \"Cache-Control\" = \"no-cache\"),\n                       body = '{\"primary_email\" : \"joe@kountable.com\", \"password\" : \"ksH-g3u-hkA-VYp\"}') \n  # the content returns a group of token calls in Json format, but first convert from raw to Char format\n  accessToken <- fromJSON(rawToChar(tSwaggerPost$content))\n  \n  getV2Swagger <- GET(paste0('http://api.kountable.com/api/v2/businesses?ownedby=',uuid),\n                      add_headers(\n                        \"Authorization\" = paste(\"Bearer \", accessToken$data$access_token, sep=''),\n                        \"Content-Type\" = \"application/json\", \n                        \"k-app-type\" = \"3rd\",\n                        \"k-app-version\" = \"1.0.0\",\n                        \"Cache-Control\" = \"no-cache\"))\n  getV2Swagger <- fromJSON(rawToChar(getV2Swagger$content), simplifyVector = TRUE, simplifyDataFrame = TRUE, simplifyMatrix = TRUE)\n  return(getV2Swagger)\n}\n############################################################################################################################\n############################################################################################################\n############################################################################################################################\n############################################################################################################################\n############################################################################################################################\n\nget.V2ProjectsList <- function(uuid){ \n  ##### SWAGGER for project calls from api.kountable.com\n  require(httr)\n  require(jsonlite)\n  tSwaggerPost <- POST(paste('http://api.kountable.com/api/v2/user/login', sep = \"\"),\n                       add_headers(\n                         \"Content-Type\" = \"application/json\",\n                         \"k-app-type\" = \"3rd\",\n                         \"k-app-version\" = \"1.0.0\",\n                         \"Cache-Control\" = \"no-cache\"),\n                       body = '{\"primary_email\" : \"joe@kountable.com\", \"password\" : \"ksH-g3u-hkA-VYp\"}') \n  # the content returns a group of token calls in Json format, but first convert from raw to Char format\n  accessToken <- fromJSON(rawToChar(tSwaggerPost$content))\n  cat(\"--> get.V2ProjectsList for \",uuid,\"\\n\")\n  getV2Swagger <- GET(paste0('http://api.kountable.com/api/v2/projects?ownedby=',uuid),\n                      add_headers(\n                        \"Authorization\" = paste(\"Bearer \", accessToken$data$access_token, sep=''),\n                        \"Content-Type\" = \"application/json\", \n                        \"k-app-type\" = \"3rd\",\n                        \"k-app-version\" = \"1.0.0\",\n                        \"Cache-Control\" = \"no-cache\"))\n  getV2Swagger <- fromJSON(rawToChar(getV2Swagger$content), simplifyVector = TRUE, simplifyDataFrame = TRUE, simplifyMatrix = TRUE)\n  \n  return(getV2Swagger$data)\n}\n\n\n\n\n############################################################################################################################\n############################################################################################################################\n# testProjectsCall <- get.V2ProjectsList('504')\n# testProjectsCall$data$payors\n# testProjectsCall$data$suppliers\n# testProjectsCall$data$id\n############################################################################################################################\n############################################################################################################################\n############################################################################################################################\n\nget.frankBusinessData2 <- function(userProjects, business_types, countries) {\n  ## use frank_business data.frame to get unique buisness\n  \n  require(dplyr)\n  cat('call-> get.frankBusinessData -> any data? length should be 25 Actual Length = ', length(userProjects$data$frank_business), '\\n', sep = \"  \")\n  if(is.null(userProjects$data$frank_business)){return(NULL)}\n  print(userProjects$data$frank_business)\n  ## make it a dyplr table\n  ## keep on the first record, the first record appears to be FrankBusiness\n  ## assume one unique business for now,\n  tbl.business <- tbl_df(unique(userProjects$data$frank_business))\n  tbl.business <- tbl.business[1,]\n  \n  ## add in countries and business type_name\n  tbl.business$country <- countries$name[tbl.business$country_id]\n  if(tbl.business$legal_registered_country_id > 0){\n    tbl.business$legal_registered_country <- countries$name[tbl.business$legal_registered_country_id]\n  } else {\n    tbl.business$legal_registered_country <- ''\n  }\n  \n  tbl.business$type_name <- business_types$data$name[tbl.business$type_id]\n  tbl.business <- data.frame(profile=names(unlist(tbl.business)), data=unname(unlist(tbl.business)), stringsAsFactors = FALSE)\n  \n  \n  \n  ## sortProfileBy is made in a numbers spreadsheet\n  sortProfileBy <- fromJSON('[{\"sortBy\":1,\"kActive\":1,\"kScore\":0,\"profile\":\"id\"},{\"sortBy\":17,\"kActive\":1,\"kScore\":0,\"profile\":\"created_at\"},{\"sortBy\":18,\"kActive\":1,\"kScore\":0,\"profile\":\"updated_at\"},{\"sortBy\":19,\"kActive\":1,\"kScore\":0,\"profile\":\"created_by\"},{\"sortBy\":2,\"kActive\":1,\"kScore\":2,\"profile\":\"name\"},{\"sortBy\":3,\"kActive\":1,\"kScore\":2,\"profile\":\"description\"},{\"sortBy\":14,\"kActive\":1,\"kScore\":1,\"profile\":\"contact\"},{\"sortBy\":6,\"kActive\":1,\"kScore\":2,\"profile\":\"phone\"},{\"sortBy\":16,\"kActive\":1,\"kScore\":10,\"profile\":\"registration_num\"},{\"sortBy\":20,\"kActive\":1,\"kScore\":0,\"profile\":\"supplier_score\"},{\"sortBy\":21,\"kActive\":1,\"kScore\":0,\"profile\":\"payor_score\"},{\"sortBy\":22,\"kActive\":1,\"kScore\":0,\"profile\":\"legal_registered_country_id\"},{\"sortBy\":10,\"kActive\":1,\"kScore\":2,\"profile\":\"city\"},{\"sortBy\":11,\"kActive\":1,\"kScore\":2,\"profile\":\"state\"},{\"sortBy\":26,\"kActive\":1,\"kScore\":0,\"profile\":\"country_id\"},{\"sortBy\":12,\"kActive\":1,\"kScore\":2,\"profile\":\"postal_code\"},{\"sortBy\":8,\"kActive\":1,\"kScore\":2,\"profile\":\"address\"},{\"sortBy\":24,\"kActive\":1,\"kScore\":0,\"profile\":\"enabled\"},{\"sortBy\":25,\"kActive\":1,\"kScore\":0,\"profile\":\"type_id\"},{\"sortBy\":27,\"kActive\":1,\"kScore\":0,\"profile\":\"organization_id\"},{\"sortBy\":23,\"kActive\":1,\"kScore\":0,\"profile\":\"owned_by\"},{\"sortBy\":7,\"kActive\":1,\"kScore\":5,\"profile\":\"website\"},{\"sortBy\":15,\"kActive\":1,\"kScore\":2,\"profile\":\"incorporation_date\"},{\"sortBy\":9,\"kActive\":1,\"kScore\":0,\"profile\":\"address2\"},{\"sortBy\":13,\"kActive\":1,\"kScore\":2,\"profile\":\"country\"},{\"sortBy\":5,\"kActive\":1,\"kScore\":2,\"profile\":\"legal_registered_country\"},{\"sortBy\":4,\"kActive\":1,\"kScore\":5,\"profile\":\"type_name\"}]')\n  # write.table(tbl.business, file=pipe(\"pbcopy\"), quote = FALSE, sep=\"\\t\", row.names = FALSE)\n  # sortProfileBy <- paste_from_clipboard(sep='\\t', header = T)\n  # toJSON(sortProfileBy)\n  \n  ## add profile sort order to tbl and sort table with arrange(tbl.profile,sortBy) and drop sortBy\n  # tbl.business <- bind_cols(sortProfileBy,tbl.business)\n  # tbl.business <- tbl.business %>% arrange(sortBy) %>% select(-sortBy)\n  # # View(tbl.business)\n  ## Here is the kscore table version 2 which is the version with key and using dplyr to merge with \n  ## whatever fields are in the current call.  We are attempting to be fluid by scoring only fields we decide before hand\n  ## sortPrwhofileBy is made in a numbers spreadsheet\n  # sortProfileBy <- fromJSON('[{\"sortBy\":13,\"kActive\":0,\"kScore\":0,\"key\":\"\"},{\"sortBy\":6,\"kActive\":1,\"kScore\":2,\"key\":\"age_range\"},{\"sortBy\":1,\"kActive\":1,\"kScore\":5,\"key\":\"avatar_link\"},{\"sortBy\":10,\"kActive\":0,\"kScore\":0,\"key\":\"email\"},{\"sortBy\":12,\"kActive\":0,\"kScore\":0,\"key\":\"facebook_id\"},{\"sortBy\":3,\"kActive\":1,\"kScore\":2,\"key\":\"first_name\"},{\"sortBy\":2,\"kActive\":1,\"kScore\":2,\"key\":\"friends_number\"},{\"sortBy\":5,\"kActive\":1,\"kScore\":2,\"key\":\"full_name\"},{\"sortBy\":7,\"kActive\":1,\"kScore\":1,\"key\":\"gender\"},{\"sortBy\":4,\"kActive\":1,\"kScore\":2,\"key\":\"last_name\"},{\"sortBy\":8,\"kActive\":1,\"kScore\":1,\"key\":\"locale\"},{\"sortBy\":11,\"kActive\":1,\"kScore\":10,\"key\":\"profile_link\"},{\"sortBy\":9,\"kActive\":1,\"kScore\":1,\"key\":\"timezone\"}]')\n  # write.table(tbl.business, file=pipe(\"pbcopy\"), quote = FALSE, sep=\"\\t\", row.names = FALSE)\n  # sortProfileBy <- paste_from_clipboard(sep='\\t', header = T)\n  # toJSON(sortProfileBy)\n  \n  ## full join by Key\n  ## arrange by sortBy field all missing should go to the bottom then remove sortBy column\n  \n  tbl.business <- dplyr::full_join( tbl.business, sortProfileBy, by = \"profile\")\n  tbl.business <- tbl.business %>% arrange(sortBy) %>% select(-sortBy)\n  \n  \n  ## calculate Kscore Red by checking for NAN, NA, blank in data field\n  naData <- -as.integer(is.na(tbl.business$data)) \n  nanData <- -as.integer(is.nan(tbl.business$data))\n  blankData <- -as.integer(nchar(tbl.business$data) < 1)\n  ## add the three vectors then add them to the kActive Vector\n  emptyData <- naData + nanData + blankData\n  tbl.business$missingData <- tbl.business$kActive + emptyData\n  \n  \n  ## make sure NAs are 0 so all calculations work\n  tbl.business$missingData[which(is.na(tbl.business$missingData))] <- 0\n  \n  ## multiply by Kscore\n  tbl.business$FrankBusinessKScore <- tbl.business$missingData * tbl.business$kScore\n  \n  ## add numericInputs and checkboxes to table\n  ## put tags on photos\n  \n  # tbl.business <- tbl.business %>% rowwise() %>% mutate(kScore = paste0(tags$div(numericInput(paste0(\"kNum_\",profile),label=\"\",value = kScore, width=75),style='float:center-block')),\n  #                                                       kActive = paste0(tags$div(br(),checkboxInput(paste0(\"kBox_\",profile), label=\"\", value = as.logical(as.integer(missingData)), width = 30),style='float:right')))\n  # \n  ## now lets get rid of checkboxes and numericInputs for 1, 15-25 rows\n  # tbl.business[ c(1,15:25),c('kActive','kScore')] <- ''\n  ## now we'll remove the extra rows 15:25\n  # tbl.business <- tbl.business[ c(1:14),]\n  \n  \n  # kScore=paste0(paste0(tags$div(numericInput(paste0(\"kNumB_\",profile),label=\"\",value = kScore, width=25),style=\"float:left\"))),\n  #                                                     kActive= paste0(tags$div(br(),checkboxInput(paste0(\"kBoxB_\",profile), label=\"\", value = kActive, width = 25), style = \"float:left\"))))\n  # \n  cat('Lets Print tbl.business ->','\\n',sep = '')\n  print(tbl.business)\n  return(tbl.business)\n  \n}\n#userProjects <- get.V2ProjectsList('10198')\n#get.frankBusinessData2(userProjects, business_types, countries)\n############################################################################################################################\n############################################################################################################################\n\n############################################################################################################################\n############################################################################################################################\n############################################################################################################################\n\nget.frankBusinessDataALL <- function(userProjects, business_types, countries) {\n  ## use frank_business data.frame to get unique buisness\n  \n  require(dplyr)\n  cat('call-> get.frankBusinessData -> any data? length should be 25 Actual Length = ', length(userProjects$data$frank_business), '\\n', sep = \"  \")\n  if(is.null(userProjects$data$frank_business)){\n    return(NULL)\n  } else {\n    print(userProjects$data$frank_business)\n    ## make it a dyplr table\n    ## keep on the first record, the first record appears to be FrankBusiness\n    ## assume one unique business for now,\n    tbl.business <- tbl_df(unique(userProjects$data$frank_business))\n    cat('There are ', nrow(tbl.business), ' frank businesses')\n    \n    ## add in countries and business type_name\n    countries <- tbl_df(countries$data)\n    business_types <- tbl_df(business_types$data)\n    ## create country field from legal registered country id\n    tbl.business <- tbl.business %>% \n      rowwise() %>% \n      mutate(country = ifelse(legal_registered_country_id > 0, countries$name[legal_registered_country_id], 'Unknown'),\n             type_name = ifelse(type_id > 0, business_types$name[type_id], 'Unknown'))\n    \n    \n    \n    ## make key businessId columns of data\n    require(tidyr)\n    tbl.business <- tbl.business %>% group_by(id) %>% tidyr::gather(\"key\",\"value\",2:ncol(tbl.business)) %>% tidyr::spread(id,value)\n    \n    \n    cat('Lets Print tbl.businessall ->','\\n',sep = '')\n    print(tbl.business)\n    return(tbl.business)\n    \n  }\n  \n}\n#userProjects <- get.V2ProjectsList('10198')\n# tbl.businessAll <- get.frankBusinessDataALL(userProjects, business_types, countries)\n############################################################################################################################\n############################################################################################################################\n\n############################################################################################################################\n############################################################################################################################\n############################################################################################################################\n\n\nget.SocialMediaDataKscore <- function(uuidApiKYC1) {\n  \n  providerNameList <- c(\"Facebook\",\"Twitter\",\"Instagram\",\"LinkedIn\",\"Yahoo\",\"Google+\",\"Gmail\")\n  providerKScoreList <- c(8,6,4,10,5,5,0)\n  \n  \n  socialMediaAuthenticationKscore <- sum(providerKScoreList[which(providerNameList %in% uuidApiKYC1$identities$provider$name)])\n  return(socialMediaAuthenticationKscore)\n}\n\n############################################################################################################################\n############################################################################################################################\n\n############################################################################################################################\n############################################################################################################################\n############################################################################################################################\n\nget.PhoneAppKscore <- function(uuidApiKYC1) {\n  \n  phoneAppList <- c(\"iOS mobile app\",\"Android mobile app\")\n  phoneAppKscoreList <- c(50,50)\n  \n  \n  phoneAppKscore <- phoneAppKscoreList[which(phoneAppList %in% uuidApiKYC1$identities$provider$name)]\n  ifelse(length(phoneAppKscore)==2, phoneAppKscore <-sum(phoneAppKscore)/2, phoneAppKscore <- sum(phoneAppKscore))\n  \n  return(phoneAppKscore)\n}\n\n############################################################################################################################\n############################################################################################################################\n\n############################################################################################################################\n############################################################################################################################\n############################################################################################################################\n\nget.userDocumentsTable <- function(projectsList){\n  require(dplyr)\n  ## KEEP only the non rejected projects\n  projectsList$data <- projectsList$data[which(!projectsList$data$state$code==\"REJECTED\"),]\n  \n  projectDocumentsAllS <- sapply(projectsList$data$id, get.V2UsersProjectDocuments)\n  \n  \n  ## keep the ones we want to display\n  keyDocuments <- c(2,12,13,14,15,16,22)\n  # which(projectDocumentsAll[[1]]$data$type_id %in% keyDocuments)\n  \n  ## keep only dataframes for this next part\n  projectDocumentsAllS <- projectDocumentsAllS[sapply(projectDocumentsAllS, function(x){is.data.frame(x)})]\n  ## which have the key documents\n  projectDocumentsAllS <- lapply(projectDocumentsAllS, function(x){x[which(x$type_id %in% keyDocuments),]})\n  ## get rid of 0 row data.frames\n  projectDocumentsAllS <- projectDocumentsAllS[sapply(projectDocumentsAllS, function(x){nrow(x)>0})]\n  \n  ## make the massive talbe and combine\n  projectDocumentsAllS <- bind_rows(lapply(projectDocumentsAllS, function(x){get.ProjectsDocumentsTbl( x)}))\n  return(projectDocumentsAllS)\n}\n############################################################################################################################\n############################################################################################################################\n\n############################################################################################################################\n############################################################################################################################\n############################################################################################################################\n\nget.userDocumentsTableAll <- function(projectsList){\n  require(dplyr)\n  ## KEEP only the non rejected projects\n  # projectsList$data <- projectsList$data[which(!projectsList$data$state$code==\"REJECTED\"),]\n  \n  projectDocumentsAllS <- sapply(projectsList$data$id, get.V2UsersProjectDocuments)\n  \n  ## keep the ones we want to display\n  keyDocuments <- c(2,12,13,14,15,16,22)\n  # which(projectDocumentsAll[[1]]$data$type_id %in% keyDocuments)\n  \n  ## keep only dataframes for this next part\n  projectDocumentsAllS <- projectDocumentsAllS[sapply(projectDocumentsAllS, function(x){is.data.frame(x)})]\n  ## which have the key documents\n  projectDocumentsAllS <- lapply(projectDocumentsAllS, function(x){x[which(x$type_id %in% keyDocuments),]})\n  ## get rid of 0 row data.frames\n  projectDocumentsAllS <- projectDocumentsAllS[sapply(projectDocumentsAllS, function(x){nrow(x)>0})]\n  \n  ## make the massive talbe and combine\n  projectDocumentsAllS <- bind_rows(lapply(projectDocumentsAllS, function(x){get.ProjectsDocumentsTbl( x)}))\n  return(projectDocumentsAllS)\n}\n############################################################################################################################\n############################################################################################################################\n\n############################################################################################################################\n############################################################################################################################\n############################################################################################################################\n# projectsList <- get.V2ProjectsList('49')\nget.userDocumentsTableAllEntered <- function(projectsList){\n  require(dplyr)\n  ## KEEP only the non rejected projects\n  # projectsList$data <- projectsList$data[which(!projectsList$data$state$code==\"REJECTED\"),]\n  \n  projectDocumentsAllS <- sapply(projectsList$data$id, get.V2UsersProjectDocuments)\n  cat(\"projectDocumentAllS length\",length(projectDocumentsAllS),'\\n')\n  # print(str(projectDocumentsAllS))\n  if (length(projectDocumentsAllS)==0) {\n    return(NULL)\n  } else {## keep the ones we want to display\n    ## keyDocuments <- c(2,12,13,14,15,16,22)\n    # which(projectDocumentsAll[[1]]$data$type_id %in% keyDocuments)\n    \n    ## keep only dataframes for this next part\n    projectDocumentsAllS <- projectDocumentsAllS[sapply(projectDocumentsAllS, function(x){is.data.frame(x)})]\n    ## which have the key documents\n    # projectDocumentsAllS <- lapply(projectDocumentsAllS, function(x){x[which(x$type_id %in% keyDocuments),]})\n    ## get rid of 0 row data.frames\n    projectDocumentsAllS <- projectDocumentsAllS[sapply(projectDocumentsAllS, function(x){nrow(x)>0})]\n    \n    ## make the massive talbe and combine\n    projectDocumentsAllS <- bind_rows(lapply(projectDocumentsAllS, function(x){get.ProjectsDocumentsTbl( x)}))\n    return(projectDocumentsAllS)}\n  \n}\n############################################################################################################################\n############################################################################################################################\n\n\n############################################################################################################################\n############################################################################################################################\n############################################################################################################################\n\nget.V2UsersProjectDocuments <- function(apiProjectId){ \n  ##### SWAGGER for project calls from api.kountable.com\n  require(httr)\n  require(jsonlite)\n  tSwaggerPost <- POST(paste('http://api.kountable.com/api/v2/user/login', sep = \"\"),\n                       add_headers(\n                         \"Content-Type\" = \"application/json\",\n                         \"k-app-type\" = \"3rd\",\n                         \"k-app-version\" = \"1.0.0\",\n                         \"Cache-Control\" = \"no-cache\"),\n                       body = '{\"primary_email\" : \"joe@kountable.com\", \"password\" : \"ksH-g3u-hkA-VYp\"}') \n  # the content returns a group of token calls in Json format, but first convert from raw to Char format\n  accessToken <- fromJSON(rawToChar(tSwaggerPost$content))\n  cat(\"Project Id: \", apiProjectId,\" --> get.V2UsersProjectDocuemtns\",\"\\n\")\n  getV2Swagger <- GET(paste('http://api.kountable.com/api/v2/projects/',apiProjectId,'/documents', sep = \"\"),\n                      add_headers(\n                        \"Authorization\" = paste(\"Bearer \", accessToken$data$access_token, sep=''),\n                        \"Content-Type\" = \"application/json\", \n                        \"k-app-type\" = \"3rd\",\n                        \"k-app-version\" = \"1.0.0\",\n                        \"Cache-Control\" = \"no-cache\"))\n  getV2Swagger <- fromJSON(rawToChar(getV2Swagger$content), simplifyVector = TRUE, simplifyDataFrame = TRUE, simplifyMatrix = TRUE)\n  return(getV2Swagger)\n}\n\n############################################################################################################################\n############################################################################################################################\n# projectDocuments <- get.V2UsersProjectDocuments('335')\n# str(projectDocuments)\n# projectDocuments$data$related_entity_id\n############################################################################################################################\n############################################################################################################################\n############################################################################################################################\n# projectDocuments <- projectDocumentsAllS[[1]]\n# projectDocuments <- projectDocumentsAllS[[2]]\n# projectDocuments <- projectDocumentsAllS[[3]]\nget.ProjectsDocumentsTbl <- function(projectDocuments){\n  require(dplyr)\n  require(shiny)\n  cat('Called get.kycDocumentsTbl','\\n', sep = '')\n  # print(projectDocuments)\n  ## get the projectId from releated_entity_id\n  project_id <- unique(projectDocuments$related_entity_id)\n  cat('documents for project_id: ', project_id, '\\n')\n  \n  if(is.null(projectDocuments$items)){\n    return(NULL)\n  } else{\n    ## select all columns but dataframes items and dataframe type\n    kycDocs <- tbl_df(projectDocuments %>% select(-items,-type, -organization))\n    # colnames(kycDocuments) <- paste0(\"documents.\",colnames(kycDocuments))\n    \n    \n    \n    ## select all columns but dataframes file \n    ## then bind_rows to make table sapply gets rid of the list of 1 in between !!!!!!\n    kycDocFiles <- bind_rows(sapply(projectDocuments$items, dplyr::select, file))\n    \n    ## add file. to filenames and order table by list\n    colnames(kycDocFiles) <- paste0('file.',names(kycDocFiles))\n    kycDocFiles <- kycDocFiles[ c('file.id','file.name','file.description','file.mime_type','file.lat','file.lng','file.url','file.timestamp')]\n    \n    ## use mutate to add the hyperlink and image tags to file.url\n    # kycDocFiles <- kycDocFiles %>% rowwise() %>% mutate(file.url=paste0(tags$a(tags$img(src = file.url, height=300, width=300),href = file.url,target='_blank')))\n    kycDocFiles <- kycDocFiles %>% rowwise() %>% mutate(file.url=paste0(tags$a(tags$img(src = file.url),href = file.url,target='_blank')))\n    \n    ## for the non subsets coluns, documentId, id, sortOrd uses lapply, bind_rows will adapt and combine them all\n    kycDocItems <- bind_rows(lapply(projectDocuments$items, dplyr::select, document_id,id, sort_ord ))\n    colnames(kycDocItems) <- paste0('items.',names(kycDocItems))\n    \n    ## for the non subsets coluns, documentId, id, sortOrd uses lapply, bind_rows will adapt and combine them all\n    kycDocType <- tbl_df(projectDocuments$type)\n    colnames(kycDocType) <- paste0('type.',names(kycDocType))\n    \n    ## ok if you have multipage documents, use table on documentId to identify their frequencies\n    ## use rep by their freq convert to integer and use to repeat rownames\n    ## to repeate rows in a dataframe accordingly\n    multiPageDocs <- as.integer(rep(rownames(kycDocs),table(kycDocItems$items.document_id)))\n    \n    \n    \n    ## combine them all together and maker urls images with hyperlinks\n    ## use multiPageDocs in case their are multPage file uploads in file on KYC Documents and kyc Doc Type\n    tbl.kycDocuments <- data.frame(kycDocs[multiPageDocs,],kycDocItems,kycDocType[multiPageDocs,],kycDocFiles)\n    ## combine them all together and maker urls images with hyperlinks\n    # tbl.kycDocuments <- data.frame(kycDocs,kycDocItems,kycDocType,kycDocFiles)\n    # tbl.kycDocuments1 <- tbl.kycDocuments[c(5,6,7,20,1,28,27,26,23,24,25,22,2,4,1)]\n    ## final step add in project_id\n    tbl.kycDocuments$project_id <- project_id\n    tbl.kycDocuments <- tbl.kycDocuments[c(\"project_id\",\"name\",\"description\", \"file.url\", \"file.id\", \"file.name\", \"file.description\",\"created_at\",\"created_by\",\"type.name\",\"id\", \"file.lat\",\"file.lng\")]\n    cat('made it to the end of kycDocumentsTbl with length tbl.kycDocuments = ',length(tbl.kycDocuments),'\\n', sep = '')\n    # print(tbl.kycDocuments)\n    \n    return(tbl.kycDocuments)\n  }\n  \n  \n  \n}\n############################################################################################################################\n############################################################################################################################\n\n############################################################################################################################\n############################################################################################################################\n############################################################################################################################\n# uuidApiKYC1 <- get.apiKYCCall('10730')\n# apiUUID <- '10730'\nget.userLoginList <- function(apiUUID, uuidApiKYC1) {\n  require(dplyr)\n  require(lubridate)\n  cat(apiUUID, \"--> Calling get.userLoginList\",'\\n')\n  \n  ## data entry estimated times in minutes\n  ## data frame used for login list/time table display in min\n  ls.dataEntryTime <- list(loginTime = dminutes(2), \n                           documentUploadTime = dminutes(3), \n                           createUserTime = dminutes(5), \n                           createBusinessTime = dminutes(3), \n                           creatProjectTime = dminutes(5), \n                           installPhoneAppTime = dminutes(10), \n                           authenticateSocialMediaTime = dminutes(3)\n  )\n  \n  # uuidApiKYC1 <- get.apiKYCCall(apiUUID)\n  ## its in T Z format remove the T and Z make timezone UTC\n  userCreatedDate <- as.POSIXct( gsub('[A-Z]',' ',uuidApiKYC1$profile$createdAt),tz = 'UTC')\n  \n  ##dates of events in Frank Data Entry\n  ## do it by table?  user, project, business, social media, documents?\n  ## When did they download the app?\n  ## create action column with event action Installed phone app or authenticated with social media\n  tbl.userIdentity <- get.userIdentitiesTable(apiUUID)\n  cat(apiUUID, '--> inside get.UserLoginList before tbl.userIdentity check', '\\n')\n  if(nrow(tbl.userIdentity)!=0) {\n    cat(nrow(tbl.userIdentity), '--> nrow of tbl.userIdentity', '\\n')\n    \n    tbl.userIdentity <- tbl.userIdentity %>% \n      rowwise() %>% \n      mutate(created_at = as.POSIXct( gsub('[A-Z]',' ', created_at),tz = 'UTC'),\n             entered_by = ifelse(provider_name %in% c('Android mobile app','iOS mobile app'), \n                                 paste0('Frank'), paste0('Frank')),\n             entered_by_userId = id,\n             action = ifelse(provider_name %in% c('Android mobile app','iOS mobile app'), \n                             paste0('Installed ', provider_name), paste0('Authenticated with ', provider_name)),\n             location = c(''),\n             dataEntryTime = ifelse(provider_name %in% c('Android mobile app','iOS mobile app'), \n                                    ls.dataEntryTime$installPhoneAppTime, ls.dataEntryTime$authenticateSocialMediaTime)) %>% \n      arrange(created_at)\n    \n    ## get user login location data\n    tbl.user_login_location <- get.userLoginLocatationData(apiUUID)\n    if(!is.null(tbl.user_login_location)){\n      tbl.user_login_location <- tbl.user_login_location %>% rowwise() %>% \n        mutate(created_at = as.POSIXct( gsub('[A-Z]',' ', created_at),tz = 'UTC'),\n               entered_by = c('Frank'),\n               entered_by_userId = user_id,\n               action =paste0(device, \" login\"),\n               location = paste(latitude, longitude, country_code, country, hostname, sep = ', '),\n               dataEntryTime = ls.dataEntryTime$loginTime) %>% \n        arrange(created_at)\n      \n    }\n    \n    \n    ## projects\n    tbl.userProjectsData <- get.V2ProjectsList(apiUUID)\n    if(length(tbl.userProjectsData$data)!=0) {\n      \n      tbl.userProjectsList <- tbl.userProjectsData$data\n      ## if no projects kill documents\n      tbl.userProjectsList <- tbl.userProjectsList %>% rowwise() %>% \n        mutate(created_at = as.POSIXct( gsub('[A-Z]',' ', created_at),tz = 'UTC'),\n               entered_by = ifelse(created_by == apiUUID, paste0('Frank'), paste0('Molly')),\n               entered_by_userId = created_by,\n               action = paste0(\"Created project \", id, ' - ', ifelse(name =='', \"No Project Name\", name)),\n               location = c('')) %>% \n        arrange(created_at)\n      tbl.userProjectsList$dataEntryTime <- ls.dataEntryTime$creatProjectTime\n      \n      ## documents\n      tbl.userProjectDocuments <- get.userDocumentsTableAllEntered(projectsList = tbl.userProjectsData)\n      \n      if (nrow(tbl.userProjectDocuments) > 0) {\n        tbl.userProjectDocuments <- tbl.userProjectDocuments %>% rowwise() %>% \n          mutate(created_at = as.POSIXct( gsub('[A-Z]',' ', created_at),tz = 'UTC'),\n                 entered_by = ifelse(created_by == apiUUID, paste0('Frank'), paste0('Molly')),\n                 entered_by_userId = created_by,\n                 action = paste0(\"Document uploaded \", id, '-', type.name, ' ', name),\n                 location = paste(file.lat, file.lng, sep = ', ')) %>% \n          arrange(created_at)\n        tbl.userProjectDocuments$dataEntryTime <- ls.dataEntryTime$documentUploadTime\n      }\n    } else {\n      tbl.userProjectDocuments <- NULL\n      \n      \n    }\n    \n    \n    \n    ## get dates of businesses created\n    tbl.userBusinessList <- get.V2BusinessesList(apiUUID)\n    if(length(tbl.userBusinessList$data)!=0){\n      ## identify role payors, suppliers, frank business\n      ## get unique list of suppliers and payors\n      frankPayors <- unique(unlist(tbl.userProjectsList$payors))\n      frankSuppliers <- unique(unlist(tbl.userProjectsList$suppliers))\n      frankBusinesses <- unique(unlist(tbl.userProjectsList$frank_business$id))\n      \n      ## since a business can be both a supplier and a payor, we need to make sure that we get multiple records if this occurs\n      ## if any are null make a table with -99999 id so no matches\n      ifelse(is.null(frankPayors), tbl.frankBusinessPayors <- data_frame(id = -99999, frankBusinessRole = 'payor'), \n             tbl.frankBusinessPayors <- data_frame(id =  frankPayors, frankBusinessRole = rep('payor',length(frankPayors))))\n      ifelse(is.null(frankSuppliers), tbl.frankBusinessSuppliers <- data_frame(id = -99999, frankBusinessRole = 'supplier'), \n             tbl.frankBusinessSuppliers <- data_frame(id =  frankSuppliers, frankBusinessRole = rep('supplier',length(frankSuppliers))))\n      ifelse(is.null(frankBusinesses), tbl.frankBusinesses <- data_frame(id =  c('-99999'), frankBusinessRole = 'frank business'), \n             tbl.frankBusinesses <- data_frame(id =  frankBusinesses, frankBusinessRole = rep('frank business',length(frankBusinesses))))\n      \n      \n      \n      ## build a table of frank business Roles of ids and roles\n      ## make the construction conditional on whether these exist\n      \n      tbl.frankBusinessRole <- bind_rows(tbl.frankBusinessPayors,\n                                         tbl.frankBusinessSuppliers,\n                                         tbl.frankBusinesses)\n      \n      ##convert to dplyr tbl\n      tbl.frankBusinessData <- tbl_df(tbl.userBusinessList$data)\n      ## combine business list with business role - if the role exists for that business\n      tbl.frankBusinessData <- left_join(tbl.frankBusinessData,tbl.frankBusinessRole, by = 'id')\n      ## make N/A roles, unassigned business and create action field of Entered business\n      tbl.frankBusinessData <-  tbl.frankBusinessData %>% \n        rowwise() %>%  \n        mutate(created_at = as.POSIXct( gsub('[A-Z]',' ', created_at),tz = 'UTC'),\n               frankBusinessRole = ifelse(is.na(frankBusinessRole),c('unassigned business'), frankBusinessRole),\n               entered_by = ifelse(created_by == apiUUID, paste0('Frank'), paste0('Molly')),\n               entered_by_userId = created_by,\n               action = paste0(\"Entered \", frankBusinessRole, ', ', id,' - ', name)\n        )\n      ## Add data entry time\n      tbl.frankBusinessData$dataEntryTime <- ls.dataEntryTime$createBusinessTime \n      \n    }\n    ## combine with bind rows to create the login action history list\n    \n    tbl.loginListCore <- bind_rows(data_frame(loginDate = userCreatedDate, \n                                              entered_by = c('Frank'),\n                                              entered_by_userId = as.integer(uuidApiKYC1$uuid),\n                                              action = c('Created User Account'), \n                                              location = c(''), \n                                              dataEntryTime = ls.dataEntryTime$createUserTime), \n                                   data_frame(loginDate = tbl.userIdentity$created_at, \n                                              entered_by = tbl.userIdentity$entered_by, \n                                              entered_by_userId = tbl.userIdentity$entered_by_userId,\n                                              action = tbl.userIdentity$action, \n                                              location = c(''),\n                                              dataEntryTime = tbl.userIdentity$dataEntryTime)\n    )\n    \n    if(!is.null(tbl.user_login_location)){\n      tbl.loginListCore <- bind_rows(tbl.loginListCore, \n                                     data_frame(loginDate = tbl.user_login_location$created_at, \n                                                entered_by = tbl.user_login_location$entered_by, \n                                                entered_by_userId = tbl.user_login_location$entered_by_userId,\n                                                action = tbl.user_login_location$action, \n                                                location = tbl.user_login_location$location,\n                                                dataEntryTime =  tbl.user_login_location$dataEntryTime)\n      )\n    }\n    \n    if(length(tbl.userBusinessList$data)!=0) {\n      tbl.loginListCore <- bind_rows(tbl.loginListCore, \n                                     data_frame(loginDate = tbl.frankBusinessData$created_at, \n                                                entered_by = tbl.frankBusinessData$entered_by, \n                                                entered_by_userId = tbl.frankBusinessData$entered_by_userId,\n                                                action = tbl.frankBusinessData$action, \n                                                location = c(''), \n                                                dataEntryTime = tbl.frankBusinessData$dataEntryTime)\n      )\n    }\n    if(length(tbl.userProjectsData$data)!=0) {\n      tbl.loginListCore <- bind_rows(tbl.loginListCore, \n                                     data_frame(loginDate = tbl.userProjectsList$created_at, \n                                                entered_by = tbl.userProjectsList$entered_by, \n                                                entered_by_userId = tbl.userProjectsList$entered_by_userId,\n                                                action = tbl.userProjectsList$action, \n                                                location = c(''), \n                                                dataEntryTime = tbl.userProjectsList$dataEntryTime)\n      )\n    }                           \n    if(nrow(tbl.userProjectDocuments) > 0) {\n      tbl.loginListCore <- bind_rows(tbl.loginListCore, \n                                     data_frame(loginDate = tbl.userProjectDocuments$created_at, \n                                                entered_by = tbl.userProjectDocuments$entered_by, \n                                                entered_by_userId = tbl.userProjectDocuments$entered_by_userId,\n                                                action = tbl.userProjectDocuments$action, \n                                                location = tbl.userProjectDocuments$location, \n                                                dataEntryTime = tbl.userProjectDocuments$dataEntryTime)\n      )\n    }                           \n    \n    \n    \n    ## arrange by loginDate default is ascending\n    tbl.loginList <- tbl.loginListCore %>% arrange(loginDate)\n    tbl.loginList$dataEntryTime <- dseconds(tbl.loginList$dataEntryTime)\n    \n    ## add App Version \n    ## Version 1.0.4 Oct 8, 2015\n    ## Version 1.1.8 Jan 29, 2016\n    ## Version 1.2.2 Mar 25, 2016 - jCI\n    ## Version 2.0.20 Jun 23, 2016 - Easy Frank\n    ## Version 2.0.24 Jul 13, 2016 - Easy Frank Gmail\n    tbl.loginList <- tbl.loginList %>% \n      rowwise() %>% \n      mutate(appVersion = ifelse(loginDate < as.POSIXct(\"2016-01-29 00:00:00\", tz=\"UTC\"),c('Version 1.0.4'),\n                                 ifelse(loginDate < as.POSIXct(\"2016-03-25 00:00:00\", tz=\"UTC\"),c('Version 1.1.8'),\n                                        ifelse(loginDate < as.POSIXct(\"2016-06-23 00:00:00\", tz=\"UTC\"),c('Version 1.2.2(JCI)'),\n                                               ifelse(loginDate < as.POSIXct(\"2016-07-13 00:00:00\", tz=\"UTC\"),c('Version 2.0.20(Easy Frank)'),\n                                                      ifelse(loginDate < as.POSIXct(\"2016-08-24 00:00:00\", tz=\"UTC\"),c('Version 2.0.24(Easy Frank GMail)'),\n                                                             ifelse(loginDate < as.POSIXct(\"2016-09-01 00:00:00\", tz=\"UTC\"),c('Version 2.0.26(Easy Frank Push)'),\n                                                                    ifelse(loginDate < as.POSIXct(\"2016-09-20 00:00:00\", tz=\"UTC\"),c('Version 2.0.27(Easy Frank Project Messaging)'),\n                                                                           c('Version 2.0.28(Easy Frank Country Integration')))))))))\n    ## add frank Country\n    tbl.loginList$frankCountry <- uuidApiKYC1$profile$country\n    ## order columns\n    tbl.loginList <-tbl.loginList[,c(1,2,4,6,7,3,5,8)]\n    cat('Print tbl.loginList','\\n')\n    print(tbl.loginList, '\\n')\n    return(tbl.loginList)\n    \n  } else{\n    return(NULL)  \n  }\n  \n}\n############################################################################################################################\n############################################################################################################################\n# test.userloginlist <- get.userLoginList(apiUUID, uuidApiKYC1) \n############################################################################################################################\n############################################################################################################################\n############################################################################################################################\n\nget.userLoginLocatationData <- function(apiUUID) {\n  require(dplyr)\n  require(httr)\n  ## load to manual tables\n  # tbl.user_login_locations <- tbl_df(readRDS(\"/Users/doucetteemail/Documents/KountableFiles/RDevelopment/RMarker/RMarker/data/user_login_location.rds\"))\n  tbl.user_login_locations <- get.V3UserLoginLocation(apiUUID)\n  \n  if (nrow(tbl.user_login_locations) == 0) {\n    return(NULL)\n  } else {\n    # tbl.countries <- tbl_df(readRDS(\"/Users/doucetteemail/Documents/KountableFiles/RDevelopment/RMarker/RMarker/data/country.rds\"))\n    tbl.countries <- tbl_df(get.V3CountriesDictionary()$data)\n    ## get list of providers\n    tbl.providers <- tbl_df(get.V2User_Identities_ProvidersDictionary())\n    ## clean up countries and rename fields for merge, then merge providers for completed named table\n    tbl.countries <- tbl.countries %>% select(country_id = id, country_code = code, country_code2 = code2,country_name = name)\n    tbl.user_login_location <- dplyr::left_join(tbl.user_login_locations, tbl.countries, by = c(\"country_id\" = \"country_id\"))\n    tbl.user_login_location <- dplyr::left_join(tbl.user_login_location, tbl.providers, by = c(\"provider_id\" = \"provider_id\"))\n    \n    ## now select only the user_id data\n    # tbl.user_login_location <- tbl.user_login_location %>% filter(user_id == apiUUID)\n    \n    return(tbl.user_login_location)\n    \n  }\n  \n}\n############################################################################################################################\n############################################################################################################################\n\n############################################################################################################################\n############################################################################################################################\n############################################################################################################################\n\nget.userIdentitiesTable <- function(apiUUID) {\n  require(dplyr)\n  require(httr)\n  ## call userIdentities\n  tbl.user_identitys <- tbl_df(get.V2UsersIdentities(apiUUID))\n  # tbl.countries <- tbl_df(readRDS(\"/Users/doucetteemail/Documents/KountableFiles/RDevelopment/RMarker/RMarker/data/country.rds\"))\n  tbl.countries <- tbl_df(get.V3CountriesDictionary()$data)\n  ## clean up countries and rename fields for merge, then merge providers for completed named table\n  tbl.countries <- tbl.countries %>% select(country_id = id, country_code = code, country_code2 = code2,country_name = name)\n  tbl.user_identity <- dplyr::left_join(tbl.user_identitys, tbl.countries, by = c(\"country_id\" = \"country_id\"))\n  \n  \n  return(tbl.user_identity)\n  \n}\n############################################################################################################################\n############################################################################################################################\n\n############################################################################################################################\n############################################################################################################################\n############################################################################################################################\n\nget.V2User_Identities_ProvidersDictionary <- function(){\n  ### Returns the search list by userId and name\n  require(httr)\n  require(dplyr)\n  ##### SWAGGER for project calls from api.kountable.com\n  \n  tSwaggerPost <- POST(paste('http://api.kountable.com/api/v2/user/login', sep = \"\"),\n                       add_headers(\n                         \"Content-Type\" = \"application/json\",\n                         \"k-app-type\" = \"3rd\",\n                         #\"k-app-version\" = \"1.0.0\",\n                         \"Cache-Control\" = \"no-cache\"),\n                       body = '{\"primary_email\" : \"joe@kountable.com\", \"password\" : \"ksH-g3u-hkA-VYp\"}') \n  # the content returns a group of token calls in Json format, but first convert from raw to Char format\n  accessToken <- fromJSON(rawToChar(tSwaggerPost$content))\n  \n  getV2Swagger <- GET(paste0('http://api.kountable.com/api/v2/dictionary/user_identity_providers'),\n                      add_headers(\n                        \"Authorization\" = paste(\"Bearer \", accessToken$data$access_token, sep=''),\n                        \"Content-Type\" = \"application/json\", \n                        \"k-app-type\" = \"3rd\",\n                        #\"k-app-version\" = \"1.0.0\",\n                        \"Cache-Control\" = \"no-cache\"))\n  getV2Swagger <- fromJSON(rawToChar(getV2Swagger$content), simplifyVector = TRUE, simplifyDataFrame = TRUE, simplifyMatrix = TRUE)\n  \n  getV2Swagger <-  tbl_df(getV2Swagger$data)\n  getV2Swagger <- getV2Swagger %>% select(provider_id = id, provider_code = code, provider_name = name, provider_description = description)\n  return(getV2Swagger)\n}\n\n\n\n############################################################################################################################\n############################################################################################################################\n\n\n############################################################################################################################\n############################################################################################################################\n############################################################################################################################\n\n# curl -X GET -H \"Authorization: Bearer yJ0sXjbUhhrJi1TBy0mdWhphxowZ7vhBoDZHwcD1HGs=\" -H \n# \"Content-Type: application/json\" -H \"k-app-type: web\" -H \"k-app-version: 1.0.0\" -H \n# \"Cache-Control: no-cache\" \"http://api.kountable.com/api/v3/users/10001/user_login_location\"\n\nget.V3UserLoginLocation <- function(apiUUID){\n  ### Returns the search list by userId and name\n  require(httr)\n  require(dplyr)\n  ##### SWAGGER for project calls from api.kountable.com\n  \n  tSwaggerPost <- POST(paste('http://api.kountable.com/api/v2/user/login', sep = \"\"),\n                       add_headers(\n                         \"Content-Type\" = \"application/json\",\n                         \"k-app-type\" = \"3rd\",\n                         #\"k-app-version\" = \"1.0.0\",\n                         \"Cache-Control\" = \"no-cache\"),\n                       body = '{\"primary_email\" : \"joe@kountable.com\", \"password\" : \"ksH-g3u-hkA-VYp\"}') \n  # the content returns a group of token calls in Json format, but first convert from raw to Char format\n  accessToken <- fromJSON(rawToChar(tSwaggerPost$content))\n  \n  getV2Swagger <- GET(paste0('http://api.kountable.com/api/v3/users/',apiUUID,'/user_login_location'),\n                      add_headers(\n                        \"Authorization\" = paste(\"Bearer \", accessToken$data$access_token, sep=''),\n                        \"Content-Type\" = \"application/json\", \n                        \"k-app-type\" = \"3rd\",\n                        \"k-app-version\" = \"1.0.0\",\n                        \"Cache-Control\" = \"no-cache\"))\n  getV2Swagger <- fromJSON(rawToChar(getV2Swagger$content), simplifyVector = TRUE, simplifyDataFrame = TRUE, simplifyMatrix = TRUE)\n  \n  getV2Swagger <-  tbl_df(getV2Swagger$data)\n  # getV2Swagger <- getV2Swagger %>% select(provider_id = id, provider_code = code, provider_name = name, provider_description = description)\n  return(getV2Swagger) \n}\n############################################################################################################################\n############################################################################################################################\n\n############################################################################################################################\n############################################################################################################################\n############################################################################################################################\n## http://api.kountable.com/api/v2/users/10395/identities\n\nget.V2UsersIdentities <- function(apiUUID){\n  ### Returns the search list by userId and name\n  require(httr)\n  require(dplyr)\n  require(jsonlite)\n  ##### SWAGGER for project calls from api.kountable.com\n  \n  tSwaggerPost <- POST(paste('http://api.kountable.com/api/v2/user/login', sep = \"\"),\n                       add_headers(\n                         \"Content-Type\" = \"application/json\",\n                         \"k-app-type\" = \"3rd\",\n                         #\"k-app-version\" = \"1.0.0\",\n                         \"Cache-Control\" = \"no-cache\"),\n                       body = '{\"primary_email\" : \"joe@kountable.com\", \"password\" : \"ksH-g3u-hkA-VYp\"}') \n  # the content returns a group of token calls in Json format, but first convert from raw to Char format\n  accessToken <- fromJSON(rawToChar(tSwaggerPost$content))\n  \n  getV2Swagger <- GET(paste0('http://api.kountable.com/api/v2/users/',apiUUID,'/identities'),\n                      add_headers(\n                        \"Authorization\" = paste(\"Bearer \", accessToken$data$access_token, sep=''),\n                        \"Content-Type\" = \"application/json\", \n                        \"k-app-type\" = \"3rd\",\n                        \"k-app-version\" = \"1.0.0\",\n                        \"Cache-Control\" = \"no-cache\"))\n  getV2Swagger <- fromJSON(rawToChar(getV2Swagger$content), simplifyVector = TRUE, simplifyDataFrame = TRUE, simplifyMatrix = TRUE)\n  \n  ## first isolate the provider data.frame from the call, rename variables then add back\n  ## \n  tbl.provider <- tbl_df(getV2Swagger$data$provider)\n  tbl.provider <- tbl.provider %>% select(provider_id = id, provider_code = code, provider_name = name, provider_description = description)\n  tbl.data <- tbl_df(subset(getV2Swagger$data, select=-provider))\n  tbl.identities <- data.frame(tbl.data, tbl.provider)\n  \n  return(tbl.identities) \n}\n############################################################################################################################\n############################################################################################################################\n\n############################################################################################################################\n############################################################################################################################\n############################################################################################################################\nget.V3CountriesDictionary <- function() { \n  ### Returns the search list by userId and name\n  require(httr)\n  require(dplyr)\n  ##### SWAGGER for project calls from api.kountable.com\n  \n  tSwaggerPost <- POST(paste('http://api.kountable.com/api/v2/user/login', sep = \"\"),\n                       add_headers(\n                         \"Content-Type\" = \"application/json\",\n                         \"k-app-type\" = \"3rd\",\n                         #\"k-app-version\" = \"1.0.0\",\n                         \"Cache-Control\" = \"no-cache\"),\n                       body = '{\"primary_email\" : \"joe@kountable.com\", \"password\" : \"ksH-g3u-hkA-VYp\"}') \n  # the content returns a group of token calls in Json format, but first convert from raw to Char format\n  accessToken <- fromJSON(rawToChar(tSwaggerPost$content))\n  \n  getV2Swagger <- GET(paste0('http://api.kountable.com/api/v3/dictionary/countries'),\n                      add_headers(\n                        \"Authorization\" = paste(\"Bearer \", accessToken$data$access_token, sep=''),\n                        \"Content-Type\" = \"application/json\", \n                        \"k-app-type\" = \"3rd\",\n                        #\"k-app-version\" = \"1.0.0\",\n                        \"Cache-Control\" = \"no-cache\"))\n  getV2Swagger <- fromJSON(rawToChar(getV2Swagger$content), simplifyVector = TRUE, simplifyDataFrame = TRUE, simplifyMatrix = TRUE)\n  \n  \n  return(getV2Swagger)\n}\n############################################################################################################################\n############################################################################################################################\n\n##############################################################################################################################################\n##############################################################################################################################################\n##############################################################################################################################################\n\nget.AMLFreeData <- function(uuidApiKYC1){\n  ## Frank AML FREE\n  require(dplyr)\n  require(shiny)\n  tbl.foundIDs <- tbl_df(uuidApiKYC1$aml$free$profile$indexFoundData$foundIds)\n  ## if no Frank free aml data then \n  if (nrow(tbl.foundIDs) > 0) {\n    tbl.foundIDs <- tbl.foundIDs %>% \n      mutate(amlFreeListCode = toupper(gsub('([^_]*)_(.*)','\\\\1',id)),\n             matchedUrl = ifelse(regexec('http',rawData)==1, gsub('(http.*?)(\\t.*)','\\\\1',rawData), \"no Url\"),\n             matchedText = gsub('\\\\)','', gsub('List\\\\(','', gsub('\\t','; ', gsub('(http.*?)(\\t.*?)(.*)','\\\\3', rawData)))))\n    ## build HTML tags for Shiny DT table\n    ## color likelihood \n    ## Add hyperlinks to matchedUrl\n    tbl.foundIDs <- tbl.foundIDs %>% rowwise() %>% \n      mutate(likelihood = ifelse(likelihood < 0.25, paste0(tags$span(likelihood,style=\"color:green\")), \n                                 ifelse(likelihood < 0.50, paste0(tags$span(likelihood,style=\"color:gold\")),\n                                        paste0(tags$span(likelihood,style=\"color:red\")))),\n             matchedUrl = paste0(tags$a(paste0(matchedUrl), href = matchedUrl,target='_blank')))\n    \n    ## paste together everything but what is published in table form,  The idea here is to do firstNames: bill, Joe; LastNames: murray, pesci \n    searchQuery <- paste(sapply(names(sapply(uuidApiKYC1$aml$free$profile$indexFoundData$searchQuery, function(x){ paste(x,collapse = ', ')})), function(x){paste(tags$span(x,style = 'font-weight:bold'))}), sapply(uuidApiKYC1$aml$free$profile$indexFoundData$searchQuery, function(x){ paste(x,collapse = ', ')}), sep = ': ',collapse = '; ')\n    \n    ## add first name, last name, userId\n    tbl.foundIDs$userId <- uuidApiKYC1$uuid\n    tbl.foundIDs$firstName <- uuidApiKYC1$profile$firstName\n    tbl.foundIDs$lastName <- uuidApiKYC1$profile$lastName\n    tbl.foundIDs$searchQuery <- searchQuery\n    \n    return(tbl.foundIDs)\n    \n    \n  } else {\n    ## if no rows in found Ids return No Match Table\n    cat('_____________________________\\n')\n    cat('No Rows Found In AMLFreeTable\\n')\n    cat('_____________________________\\n')\n    tbl.foundIDs <-  data_frame(amlFreeListCode = paste0(tags$span(\"No Match\",style=\"color:green\")),likelihood = ' ',matchedText = ' ', matchedUrl = ' ', id = ' ' )\n    \n    ## paste together everything but what is published in table form,  The idea here is to do firstNames: bill, Joe; LastNames: murray, pesci \n    searchQuery <- paste(sapply(names(sapply(uuidApiKYC1$aml$free$profile$indexFoundData$searchQuery, function(x){ paste(x,collapse = ', ')})), function(x){paste(tags$span(x,style = 'font-weight:bold'))}), sapply(uuidApiKYC1$aml$free$profile$indexFoundData$searchQuery, function(x){ paste(x,collapse = ', ')}), sep = ': ',collapse = '; ')\n    \n    ## add first name, last name, userId\n    tbl.foundIDs$userId <- uuidApiKYC1$uuid\n    tbl.foundIDs$firstName <- uuidApiKYC1$profile$firstName\n    tbl.foundIDs$lastName <- uuidApiKYC1$profile$lastName\n    tbl.foundIDs$searchQuery <- searchQuery\n    \n    \n    return(tbl.foundIDs)}\n  \n}\n##############################################################################################################################################\n##############################################################################################################################################\n\n##########################################################################################################################################\n##########################################################################################################################################\n##########################################################################################################################################\nget.AMLFreeDataOutputList <- function(uuidApiKYC1,shinyUser) {\n  require(shiny)\n  ## call get.AMLPaidData\n  tbl.AMLPaidData <- get.AMLFreeData(uuidApiKYC1 = uuidApiKYC1)\n  cat(\"====================================================\\n\")\n  cat(\"called get.AMLFreeDataOutputList \\n\")\n  cat(\"====================================================\\n\")\n  ## make checkbox Review?\n  ## tbl.AMLPaidData$amlPaidCheckBoxInputs <- lapply(1:nrow(tbl.AMLPaidData), function(j){paste0(tags$div(checkboxInput(paste0(\"paidCheckbox_input_\", j), label = tags$h6(\"Reviewed by\"), value = 0)))})\n  \n  ## add rowCount which is a row number.  Use this number on mutate to create the checkboxes and signature fields\n  tbl.AMLPaidData$rowCount <-  1:nrow(tbl.AMLPaidData)\n  \n  # tags$style(type=\"text/css\", \"input.shiny-bound-input { font-size:20px; height:35px;}\")\n  \n  tbl.AMLPaidData <- tbl.AMLPaidData %>% rowwise() %>% \n    mutate(reviewCompleted = paste0(tags$div(checkboxInput(paste0(\"paidCheckbox_input_\",rowCount), label=\"\", value = FALSE, width = 25), style = \"float:right\")),\n           completedBy =paste0(textInput(paste0(\"paidTextInputSignature_\",rowCount), label = \"\", value = shinyUser, width='250px')))\n  \n  # my_list_1 <- lapply(1:nrow(tbl.AMLPaidData), function(i) {\n  #   \n  #   # plotname <- paste(\"amlPaid\", i, sep=\"\") \n  #   # output[[paste0('amlPaid', i)]] <- renderUI({\n  #   outputItem <- renderUI({\n  #     list(\n  #       tags$div(tags$h3(\"AML Free Check Id: \",tags$span(tags$b(tbl.AMLPaidData$id[i]),style='color:black')),\n  #                tags$p(tags$b(tags$span('User Id: ',style='color:black'),tbl.AMLPaidData$userId[[i]],\n  #                              tags$span(' First Name: ',style='color:black'), tbl.AMLPaidData$firstName[[i]],\n  #                              tags$span(' Last Name: ',style='color:black'), tbl.AMLPaidData$lastName[[i]],\n  #                              style = 'color:blue')) ## Use span to change color of labels\n  #                , tags$blockquote(\"Search Query: \",HTML(tbl.AMLPaidData$searchQuery[[i]]))\n  #                ),\n  #       tags$h4(\"Details\"),\n  #       tags$h4('AML Free List Code: ',tags$b(HTML(tbl.AMLPaidData$amlFreeListCode[i]))),\n  #       tags$h4(\"Likelihood:\", HTML(tbl.AMLPaidData$likelihood[i])),\n  #       tags$h4(\"Further Information: \"), \n  #       tags$p(tbl.AMLPaidData$matchedText[i]),\n  #       tags$h4(\"External Sources: \"), \n  #       HTML(tbl.AMLPaidData$matchedUrl[i]),\n  #       hr()\n  #     )\n  #   })\n  # })\n  # do.call(tagList, my_list_1)\n  # return(my_list_1)\n  ls.subList <- lapply(1, function(i) {\n    outputItem <- renderUI({\n      list(\n        tags$div(\n          tags$h4(\"AML Free Seach For: \"),\n          tags$p(tags$b(tags$span('User Id: ',style='color:black'),tbl.AMLPaidData$userId[[i]],\n                        tags$span(' First Name: ',style='color:black'), tbl.AMLPaidData$firstName[[i]],\n                        tags$span(' Last Name: ',style='color:black'), tbl.AMLPaidData$lastName[[i]],\n                        style = 'color:blue')) ## Use span to change color of labels\n          , tags$blockquote(\"Search Query: \", HTML(tbl.AMLPaidData$searchQuery[[i]]))),\n        DT::renderDataTable({\n          DT::datatable(tbl.AMLPaidData[,c(\"likelihood\",\"amlFreeListCode\",\"id\",'reviewCompleted','completedBy')],class='compact stripe', escape = FALSE, rownames = FALSE,\n                        options = list(\n                          #order = list(list(2, 'desc'), list(4, 'desc')),\n                          # pageLength=nrow(AMLFreeBusinessData()), # needs to match nrow on the table, currently with 4 addins its 24\n                          # autoWidth = TRUE,\n                          bLengthChange=0, # show/hide records per page dropdown\n                          bFilter=0,       # global search box on/off\n                          bInfo=0,         #removes # of reccords filter bottom left\n                          bPaginate=0,      #removes the page select bottom right\n                          columnDefs = list(list(width = 100, targets = c(0, 1, 2, 3)),\n                                            list(className=\"dt-center\", targets=c(0))\n                          )\n                        )\n          ) \n        }),\n        tags$h4(\"Details\"),\n        lapply(  1:nrow(tbl.AMLPaidData), function(j){\n          list(\n            tags$h4(\"AML Free Check Id: \",tags$span(tags$b(tbl.AMLPaidData$id[j]),style='color:black')),\n            tags$h5('AML Free List Code: ',tags$b(HTML(tbl.AMLPaidData$amlFreeListCode[j]))),\n            tags$h5(\"Likelihood:\", HTML(tbl.AMLPaidData$likelihood[j])),\n            # tags$h5(\"Key Data: \"),\n            # tags$p(HTML(tbl.AMLPaidData$amlKeyData[j])),\n            tags$h5(\"Further Information: \"), \n            tags$p(tbl.AMLPaidData$matchedText[j]),\n            tags$h5(\"External Sources: \"), \n            HTML(tbl.AMLPaidData$matchedUrl[j])\n          )\n        }),\n        hr()\n      )\n    })\n  })\n  do.call(tagList, ls.subList)\n  return(ls.subList) \n}\n##########################################################################################################################################\n##########################################################################################################################################\n\n\n##############################################################################################################################################\n##############################################################################################################################################\n##############################################################################################################################################\n\nget.userBusinessList <- function(apiUUID) {\n  require(dplyr)\n  require(lubridate)\n  cat(apiUUID, \"--> Calling get.userBusinessList\",'\\n')\n  \n  ## data entry estimated times in minutes\n  ## data frame used for login list/time table display in min\n  \n  \n  ## projects\n  tbl.userProjectsData <- get.V2ProjectsList(apiUUID)\n  ## no projects means no businesses\n  if(length(tbl.userProjectsData$data)!=0) {\n    ## get data table\n    tbl.userProjectsList <- tbl.userProjectsData$data\n    \n    ## get dates of businesses created\n    tbl.userBusinessList <- get.V2BusinessesList(apiUUID)\n    \n    ## no businesses means no business list\n    if(length(tbl.userBusinessList$data)!=0){\n      ## identify role payors, suppliers, frank business\n      ## get unique list of suppliers and payors\n      frankPayors <- unique(unlist(tbl.userProjectsList$payors))\n      frankSuppliers <- unique(unlist(tbl.userProjectsList$suppliers))\n      frankBusinesses <- unique(unlist(tbl.userProjectsList$frank_business$id))\n      \n      ## since a business can be both a supplier and a payor, we need to make sure that we get multiple records if this occurs\n      ## if any are null make a table with -99999 id so no matches\n      ifelse(is.null(frankPayors), tbl.frankBusinessPayors <- data_frame(id = -99999, frankBusinessRole = 'payor'), \n             tbl.frankBusinessPayors <- data_frame(id =  frankPayors, frankBusinessRole = rep('payor',length(frankPayors))))\n      ifelse(is.null(frankSuppliers), tbl.frankBusinessSuppliers <- data_frame(id = -99999, frankBusinessRole = 'supplier'), \n             tbl.frankBusinessSuppliers <- data_frame(id =  frankSuppliers, frankBusinessRole = rep('supplier',length(frankSuppliers))))\n      ifelse(is.null(frankBusinesses), tbl.frankBusinesses <- data_frame(id =  c('-99999'), frankBusinessRole = 'frank business'), \n             tbl.frankBusinesses <- data_frame(id =  frankBusinesses, frankBusinessRole = rep('frank business',length(frankBusinesses))))\n      \n      ## build a table of frank business Roles of ids and roles\n      ## make the construction conditional on whether these exist\n      \n      tbl.frankBusinessRole <- bind_rows(tbl.frankBusinessPayors,\n                                         tbl.frankBusinessSuppliers,\n                                         tbl.frankBusinesses)\n      \n      ##convert to dplyr tbl\n      tbl.frankBusinessData <- tbl_df(tbl.userBusinessList$data)\n      ## combine business list with business role - if the role exists for that business\n      tbl.frankBusinessData <- left_join(tbl.frankBusinessData,tbl.frankBusinessRole, by = 'id')\n      \n      ## get rid of any NA roles\n      tbl.frankBusinessData <-  tbl.frankBusinessData[which(!is.na(tbl.frankBusinessData$frankBusinessRole)),]\n      ## rename id field to businessId\n      tbl.frankBusinessData <- tbl.frankBusinessData %>% rename(businessId = id)\n      \n      ## return table\n      return(tbl.frankBusinessData)\n      \n    } else{\n      return(NULL)  \n    }\n    \n  } else{\n    return(NULL)\n  }\n  \n  \n}\n##############################################################################################################################################\n##############################################################################################################################################\n\n##############################################################################################################################################\n##############################################################################################################################################\n##############################################################################################################################################\n\n\nget.businessAMLFreeTable <- function(businessKYC1){\n  require(dplyr)\n  require(shiny)\n  cat('call get.businessAMLFreeTable for businessKYC information id = ',businessKYC1$information$id, '\\n')\n  tbl.foundIDs <- tbl_df(businessKYC1$aml$free$indexFoundData$foundIds)\n  ## if no Frank free aml data then \n  if (nrow(tbl.foundIDs) > 0) {\n    tbl.foundIDs <- tbl.foundIDs %>% \n      mutate(amlFreeListCode = toupper(gsub('([^_]*)_(.*)','\\\\1',id)),\n             matchedUrl = ifelse(regexec('http',rawData)==1, gsub('(http.*?)(\\t.*)','\\\\1',rawData), \"no Url\"),\n             matchedText = gsub('\\\\)','', gsub('List\\\\(','', gsub('\\t','; ', gsub('(http.*?)(\\t.*?)(.*)','\\\\3', rawData)))))\n    ## build HTML tags for Shiny DT table\n    ## color likelihood \n    ## Add hyperlinks to matchedUrl\n    tbl.foundIDs <- tbl.foundIDs %>% rowwise() %>% \n      mutate(likelihood = ifelse(likelihood < 0.25, paste0(tags$span(likelihood,style=\"color:green\")), \n                                 ifelse(likelihood < 0.50, paste0(tags$span(likelihood,style=\"color:gold\")),\n                                        paste0(tags$span(likelihood,style=\"color:red\")))),\n             matchedUrl = paste0(tags$a(paste0(matchedUrl), href = matchedUrl,target='_blank')))\n    ## assign business ID, business name\n    tbl.foundIDs$businessId <- businessKYC1$information$id\n    \n    \n    \n    return(tbl.foundIDs)\n    \n  } else {\n    ## if no rows in found Ids return No Match Table\n    cat('No Rows Found In frankBusinessAMLFreeTable for businessId:',businessKYC1$information$id,'\\n')\n    tbl.foundIDs <-  data_frame(amlFreeListCode = paste0(tags$span(\"No Match\",style=\"color:green\")),likelihood = ' ',matchedText = ' ', matchedUrl = ' ', id = ' ' )\n    tbl.foundIDs$businessId <- businessKYC1$information$id\n    \n    return(tbl.foundIDs)}\n  \n}\n##############################################################################################################################################\n##############################################################################################################################################\n\n##########################################################################################################################################\n##########################################################################################################################################\n##########################################################################################################################################\n## modify this to work for DT \nget.AMLFreeBusinessList <- function(tbl.AMLBusinessData,shinyUser) {\n  require(shiny)\n  # # Insert plot output objects the list\n  # plot_output_list <- lapply(1:nrow(tbl.AMLBusinessData), function(i) {\n  #   plotname <- paste(\"plot\", i, sep=\"\")\n  #   plot_output_object <- DT::dataTableOutput(plotname, width = \"100%\") ## plotOutput(plotname, height = 280, width = 250)\n  #   plot_output_object <- DT::renderDataTable({\n  #     ## 'frankBusinessRole','businessId','name',\n  #     DT::datatable(tbl.AMLBusinessData$rawDataTable[[i]][,c('amlFreeListCode','likelihood','matchedText','matchedUrl', 'id')], \n  #                   class='compact stripe', \n  #                   escape = FALSE, \n  #                   rownames = FALSE,\n  #                   caption = tags$caption(style = 'caption-side: top; text-align: left;',\n  #                                          tags$div(tags$h4(\"AML Free Business Seach For: \",\n  #                                                           tags$p(tags$b(paste0(tbl.AMLBusinessData$frankBusinessRole[[i]],', ',tbl.AMLBusinessData$businessId[[i]],'-',tbl.AMLBusinessData$name[[i]]),style = 'color:blue')))\n  #                                                   , tags$blockquote(paste0(\"Search Query: \", tbl.AMLBusinessData$searchQuery[[i]])))),\n  #                   options = list(\n  #                     #order = list(list(2, 'desc'), list(4, 'desc')),\n  #                     pageLength=nrow(tbl.AMLBusinessData$rawDataTable[[i]]), # needs to match nrow on the table, currently with 4 addins its 24\n  #                     autoWidth = TRUE,\n  #                     bLengthChange=0, # show/hide records per page dropdown\n  #                     bFilter=0,       # global search box on/off\n  #                     bInfo=0,         #removes # of reccords filter bottom left\n  #                     bPaginate=0,      #removes the page select bottom right\n  #                     columnDefs = list(list(width = 50, targets = c(0, 1)),\n  #                                       list(width = 400, targets = c(2)),\n  #                                       list(className=\"dt-center\", targets=c(0,1)))\n  #                   )\n  #                   \n  #     )\n  #   })\n  # })\n  # \n  # do.call(tagList, plot_output_list) # needed to display properly.\n  # \n  # return(plot_output_list)\n  \n  require(shiny)\n  cat(\"====================================================\\n\")\n  cat(\"called get.AMLFreeBusinessList \\n\")\n  cat(\"====================================================\\n\")\n  \n  tbl.AMLBusinessData$rawDataTable <- lapply(tbl.AMLBusinessData$rawDataTable, function(x){\n    ## add rowCount which is a row number.  Use this number on mutate to create the checkboxes and signature fields\n    x$rowCount <-  1:nrow(x)\n    x <- x %>% rowwise() %>% \n      mutate(reviewCompleted = paste0(tags$div(checkboxInput(paste0(\"paidCheckbox_input_\",rowCount), label=\"\", value = FALSE, width = 25), style = \"float:right\")),\n             completedBy =paste0(textInput(paste0(\"paidTextInputSignature_\",rowCount), label = \"\",value = shinyUser, width='250px')))\n    \n  })\n  \n  \n  \n  ls.subList <- lapply(1:nrow(tbl.AMLBusinessData), function(i) {\n    outputItem <- renderUI({\n      list(\n        tags$div(\n          tags$h4(\"AML Free Business Seach For: \"),\n          tags$p(tags$b(tags$span('Business Role: ',style='color:black'),toupper(tbl.AMLBusinessData$frankBusinessRole[[i]]),\n                        tags$span('Business Id: ',style='color:black'),tbl.AMLBusinessData$businessId[[i]],\n                        tags$span(' Business Name: ',style='color:black'), tbl.AMLBusinessData$name[[i]],\n                        tags$span(' Business Description: ',style='color:black'), tbl.AMLBusinessData$description[[i]],\n                        style = 'color:blue')) ## Use span to change color of labels\n          \n          , tags$blockquote(paste0(\"Search Query: \", tbl.AMLBusinessData$searchQuery[[i]])) ## Use span to change color of labels\n          \n        ),\n        DT::renderDataTable({\n          DT::datatable(tbl.AMLBusinessData$rawDataTable[[i]][,c(\"likelihood\",\"amlFreeListCode\",\"id\",'reviewCompleted','completedBy')],class='compact stripe', escape = FALSE, rownames = FALSE,\n                        options = list(\n                          #order = list(list(2, 'desc'), list(4, 'desc')),\n                          # pageLength=nrow(AMLFreeBusinessData()), # needs to match nrow on the table, currently with 4 addins its 24\n                          # autoWidth = TRUE,\n                          bLengthChange=0, # show/hide records per page dropdown\n                          bFilter=0,       # global search box on/off\n                          bInfo=0,         #removes # of reccords filter bottom left\n                          bPaginate=0,      #removes the page select bottom right\n                          columnDefs = list(list(width = 100, targets = c(0, 1, 2, 3)),\n                                            list(className=\"dt-center\", targets=c(0))\n                          )\n                        )\n          ) \n        }),\n        tags$h4(\"Details\"),\n        lapply(  tbl.AMLBusinessData$rawDataTable[i], function(x){\n          lapply(1:nrow(x),function(j){\n            list(\n              tags$h4(\"AML Free Check Id: \",tags$span(tags$b(x$id[j]),style='color:black')),\n              tags$h5('AML Free List Code: ',tags$b(HTML(x$amlFreeListCode[j]))),\n              tags$h5(\"Likelihood:\", HTML(x$likelihood[j])),\n              tags$h5(\"Further Information: \"), \n              tags$p(x$matchedText[j]),\n              tags$h5(\"External Sources: \"), \n              HTML(x$matchedUrl[j])\n            )\n          })\n        }),\n        hr()\n      )\n    })\n  })\n  \n  do.call(tagList, ls.subList)\n  return(ls.subList)\n}\n##########################################################################################################################################\n##########################################################################################################################################\n\n\n##############################################################################################################################################\n##############################################################################################################################################\n##############################################################################################################################################\nget.AMLBusinessData <- function(apiUUID, amlPaidCheck){\n  cat(apiUUID,' ',amlPaidCheck, 'get.amlbusinessdata\\n')\n  ## first get the user Business List \n  ## this returns a frankBusinessRole field to indentify if its a frankBusiness, Payor Or Supplier\n  tbl.userBusinessList <- get.userBusinessList(apiUUID)\n  \n  ## call kyc for each business\n  ls.amlFreeBusiness <- lapply(tbl.userBusinessList$businessId, get.apiKYCBusinessIDCall,kserv='prod.',amlPaidCheck =  amlPaidCheck)\n  \n  ## add in search query from call \n  # [[20]]\n  # [1] \"uuid:b8c920b3-6827-4f84-85b2-c71518b93013, countries1:be, countries2:rw, cities:202061, companyNames:agfa healthcare\"\n  tbl.userBusinessList$searchQuery <- lapply(lapply(ls.amlFreeBusiness, function(x){unlist(x$aml$free$indexFoundData$searchQuery)}), function(x){paste(names(x),x, sep = ':',collapse = ', ')})\n  \n  ## tbl.businessAMLFreeTable <- bind_rows(lapply(ls.amlFreeBusiness, get.businessAMLFreeTable))\n  tbl.userBusinessList$rawDataTable <- lapply(ls.amlFreeBusiness, get.businessAMLFreeTable)\n  \n  ## add to master business table paidTables from  get.AMLBusinessPaidData Call\n  tbl.userBusinessList$paidTable <-  lapply(ls.amlFreeBusiness, get.AMLBusinessPaidData)\n  \n  # ## we need to add \n  # tbl.businessAMLFreeTable <- dplyr::left_join(tbl.businessAMLFreeTable, tbl.userBusinessList, by ='businessId')\n  \n  return(tbl.userBusinessList)\n}\n##############################################################################################################################################\n##############################################################################################################################################\n\n##############################################################################################################################################\n##############################################################################################################################################\n##############################################################################################################################################\nget.AMLBusinessPaidData <- function(apiBusiness){\n  require(shiny)\n  require(dplyr)\n  cat(\"called get.AMLPaidData \\n\")\n  ## if no paid data return null\n  if (!is.null(apiBusiness$aml$paid$indexFoundData$foundIds$rawData)){\n    ### WorldCheck Column Names\n    worldCheckColumnNames <- c(\"UID\",\n                               \"LAST NAME\",\n                               \"FIRST NAME\",\n                               \"ALIASES\",\n                               \"ALTERNATIVE SPELLING\",\n                               \"CATEGORY\",\n                               \"TITLE\",\n                               \"SUB-CATEGORY\",\n                               \"POSITION\",\n                               \"AGE\",\n                               \"DOB\",\n                               \"PLACE OF BIRTH\",\n                               \"DECEASED\",\n                               \"PASSPORTS\",\n                               \"SSN\",\n                               \"LOCATIONS\",\n                               \"COUNTRIES\",\n                               \"COMPANIES\",\n                               \"E/I\",\n                               \"LINKED TO\",\n                               \"FURTHER INFORMATION\",\n                               \"KEYWORDS\",\n                               \"EXTERNAL SOURCES\",\n                               \"ENTERED\",\n                               \"UPDATED\",\n                               \"EDITOR\",\n                               \"AGE DATE (AS OF DATE)\")\n    \n    \n    ## ok first lets breakout FURTHER INFORMATION, EXTERNAL SOURCES and KEYWORDS into table elements.\n    ## add Key words, likelihood\n    ## paste the rest into Caption text\n    ## combine together\n    ls.amlPaidRawData <- lapply(lapply(apiBusiness$aml$paid$indexFoundData$foundIds$rawData, function(x){strsplit(x, '\\t')}), function(x){lapply(x,function(y){setNames(y,worldCheckColumnNames[1:length(y)])})})\n    \n    \n    \n    ### EXTERNAL SOURCES\n    ## name it right\n    externalSources <-  sapply(sapply(ls.amlPaidRawData, function(i){sapply(i, function(j){strsplit(j[[\"EXTERNAL SOURCES\"]], ' ')})}),function(y){paste0(sapply(y, function(x){paste0(tags$a(x, href=x, target=\"_blank\"))}),collapse = ', ')})\n    \n    ### FURTHER INFORMATION\n    ## name it right\n    furtherInformation <-  sapply(ls.amlPaidRawData, function(i){sapply(i, function(j){j[[\"FURTHER INFORMATION\"]]})})\n    \n    ### KEYWORDS\n    ## name it right\n    \n    keywords <- gsub('~',', ',toupper(sapply(ls.amlPaidRawData, function(i){sapply(i, function(j){j[[\"KEYWORDS\"]]})})))\n    \n    \n    ### Likelihood\n    \n    likelihood <- sapply(apiBusiness$aml$paid$indexFoundData$foundIds$likelihood, \n                         function(likelihood){ ifelse(likelihood < 0.25, paste0(tags$span(likelihood,style=\"color:green\")), \n                                                      ifelse(likelihood < 0.50, tags$span(paste0(likelihood),style=\"color:gold\"),\n                                                             tags$span(paste0(likelihood),style=\"color:red\")))})\n    \n    ### UID\n    ##\n    # toupper(tbl.apiKYCPersonSearch$id)\n    ## sapply(ls.amlPaidRawData, function(i){sapply(i, function(j){j[[\"UID\"]]})})\n    \n    ## add in search query from call \n    # [[20]]\n    # [1] \"uuid:b8c920b3-6827-4f84-85b2-c71518b93013, countries1:be, countries2:rw, cities:202061, companyNames:agfa healthcare\"\n    # searchQuery <- paste(names(uuidApiKYC$aml$paid$profile$indexFoundData$searchQuery),\n    #                      unlist(uuidApiKYC$aml$paid$profile$indexFoundData$searchQuery), sep = ':',collapse = ', ')\n    ## paste together everything but what is published in table form,  The idea here is to do firstNames: bill, Joe; LastNames: murray, pesci \n    searchQuery <- paste(sapply(names(sapply(apiBusiness$aml$paid$indexFoundData$searchQuery, function(x){ paste(x,collapse = ', ')})), function(x){paste(tags$span(x,style = 'font-weight:bold'))}), sapply(apiBusiness$aml$paid$indexFoundData$searchQuery, function(x){ paste(x,collapse = ', ')}), sep = ': ',collapse = '; ')\n    \n    \n    \n    ## select fields for keyData caption from worldcheck master list\n    captionNames <- c(\"UID\",\"LAST NAME\",\"FIRST NAME\",\"ALIASES\",\"ALTERNATIVE SPELLING\",\"CATEGORY\",\"TITLE\",\"SUB-CATEGORY\",\"POSITION\",\n                      \"AGE\",\"DOB\",\"PLACE OF BIRTH\",\"DECEASED\",\"PASSPORTS\",\"SSN\",\"LOCATIONS\",\"COUNTRIES\",\"COMPANIES\",\"E/I\",\"LINKED TO\",\n                      \"ENTERED\",\"AGE DATE (AS OF DATE)\")\n    \n    # paste(names(unlist(ls.amlPaidRawData[[1]][[1]][captionNames])),unlist(ls.amlPaidRawData[[1]][[1]][captionNames]), sep = ':',collapse = ', ')\n    \n    ## make keyData\n    keyData <- sapply(ls.amlPaidRawData, function(i){sapply(i, function(j){paste(names(unlist(j[captionNames])),unlist(j[captionNames]), sep = ':',collapse = ', ')})})\n    \n    \n    \n    \n    ## make it a data frame\n    tbl.amlPaidProfile <- data_frame(searchQuery,keyData,keywords,likelihood,furtherInformation,externalSources, id = apiBusiness$aml$paid$indexFoundData$foundIds$id)\n    \n    ## user ID\n    tbl.amlPaidProfile$businessId <- apiBusiness$aml$paid$identity$sourceUser\n    \n    ## business name and business description \n    tbl.amlPaidProfile$businessName <- apiBusiness$information$name \n    tbl.amlPaidProfile$businessDescription <- apiBusiness$information$description \n    \n    ## return table\n    return(tbl.amlPaidProfile)\n  }\n  else {\n    ## if no rows in found Ids return No Match Table\n    cat('No Rows Found In AMLBusinessPaidData for businessId:',apiBusiness$aml$paid$identity$sourceUser,'\\n')\n    ## paste together everything but what is published in table form,  The idea here is to do firstNames: bill, Joe; LastNames: murray, pesci \n    searchQuery <- paste(sapply(names(sapply(apiBusiness$aml$paid$indexFoundData$searchQuery, function(x){ paste(x,collapse = ', ')})), function(x){paste(tags$span(x,style = 'font-weight:bold'))}), sapply(apiBusiness$aml$paid$indexFoundData$searchQuery, function(x){ paste(x,collapse = ', ')}), sep = ': ',collapse = '; ')\n    \n    tbl.amlPaidProfile <- data_frame(searchQuery=searchQuery,keyData = paste0(tags$b(\"No Match\",style=\"color:green\")),keywords=paste0(tags$b(\"No Match\",style=\"color:green\")),likelihood=' ',furtherInformation=' ',externalSources= ' ', id  = ' ')\n    ## user ID\n    tbl.amlPaidProfile$businessId <- apiBusiness$aml$paid$identity$sourceUser\n    ## user first name, last name\n    tbl.amlPaidProfile$businessName <- apiBusiness$information$name \n    tbl.amlPaidProfile$businessDescription <- apiBusiness$information$description \n    \n    return(tbl.amlPaidProfile)\n  }\n  \n  \n}\n##############################################################################################################################################\n##############################################################################################################################################\n\n##########################################################################################################################################\n##########################################################################################################################################\n##########################################################################################################################################\nget.AMLBusinessPaidDataOutputList <- function(tbl.AMLBusinessData, amlPaidCheck, shinyUser) {\n  require(shiny)\n  ## call get.AMLPaidData\n  # tbl.AMLPaidData <- tbl.AMLBusinessData$paidTable[[1]]$keyData\n  #str(tbl.AMLBusinessData$paidTable[[1]])\n  cat(\"called get.AMLBusinessPaidDataOutputList amlPaidCheck = \",amlPaidCheck, \"\\n\")\n  \n  #lapply(tbl.AMLBusinessData$paidTable, function(tbl.AMLPaidData){lapply(1:nrow(tbl.AMLPaidData), function(y){tbl.AMLPaidData$likelihood[y]})})\n  if(amlPaidCheck == 'true'){\n    \n    \n    #  my_list_1 <- lapply(tbl.AMLBusinessData$paidTable, function(tbl.AMLPaidData){lapply(1:nrow(tbl.AMLPaidData), function(i) {\n    #   glimpse(tbl.AMLPaidData)\n    #   # plotname <- paste(\"amlPaid\", i, sep=\"\") \n    #   # output[[paste0('amlPaid', i)]] <- renderUI({\n    #   outputItem <- renderUI({\n    #     list(\n    #       tags$div(tags$h3(\"AML World Check Id: \",tags$span(tags$b(tbl.AMLPaidData$id[i]),style='color:black')),\n    #                tags$p(tags$b(tags$span('Business Id: ',style='color:black'),tbl.AMLPaidData$businessId[[i]],\n    #                              tags$span(' Business Name: ',style='color:black'), tbl.AMLPaidData$businessName[[i]],\n    #                              tags$span(' Business Description: ',style='color:black'), tbl.AMLPaidData$businessDescription[[i]],\n    #                              style = 'color:blue')) ## Use span to change color of labels\n    #                , tags$blockquote(\"Search Query: \",HTML(tbl.AMLPaidData$searchQuery[[i]])),\n    #                tags$blockquote(\"Key Data: \",HTML(tbl.AMLPaidData$keyData[i]))),\n    #       tags$h4(\"Details\"),\n    #       tags$h4('Keywords: ',tags$b(HTML(tbl.AMLPaidData$keywords[i]))),\n    #       tags$h4(\"Likelihood:\", HTML(tbl.AMLPaidData$likelihood[i])),\n    #       tags$h4(\"Further Information: \"), \n    #       tags$p(tbl.AMLPaidData$furtherInformation[i]),\n    #       tags$h4(\"External Sources: \"), \n    #       HTML(tbl.AMLPaidData$externalSources[i]),\n    #       hr()\n    #     )\n    #   })\n    # })})\n    # do.call(tagList, my_list_1)\n    # return(my_list_1) \n    tbl.AMLBusinessData$paidTable <- lapply(tbl.AMLBusinessData$paidTable, function(x){\n      ## add rowCount which is a row number.  Use this number on mutate to create the checkboxes and signature fields\n      x$rowCount <-  1:nrow(x)\n      x <- x %>% rowwise() %>% \n        mutate(reviewCompleted = paste0(tags$div(checkboxInput(paste0(\"paidCheckbox_input_\",rowCount), label=\"\", value = FALSE, width = 25), style = \"float:right\")),\n               completedBy =paste0(textInput(paste0(\"paidTextInputSignature_\",rowCount), label = \"\",value = shinyUser, width='250px')))\n      \n    })\n    \n    ls.subList <- lapply(1:nrow(tbl.AMLBusinessData), function(i) {\n      outputItem <- renderUI({\n        list(\n          tags$div(\n            tags$h4(\"AML Worldcheck Business Seach For: \"),\n            tags$p(tags$b(tags$span('Business Role: ',style='color:black'),toupper(tbl.AMLBusinessData$frankBusinessRole[[i]]),\n                          tags$span('Business Id: ',style='color:black'),tbl.AMLBusinessData$businessId[[i]],\n                          tags$span(' Business Name: ',style='color:black'), tbl.AMLBusinessData$name[[i]],\n                          tags$span(' Business Description: ',style='color:black'), tbl.AMLBusinessData$description[[i]],\n                          style = 'color:blue')) ## Use span to change color of labels\n            , tags$blockquote(paste0(\"Search Query: \", tbl.AMLBusinessData$searchQuery[[i]])) ## Use span to change color of labels\n          ),\n          DT::renderDataTable({\n            DT::datatable(tbl.AMLBusinessData$paidTable[[i]][,c(\"likelihood\",\"keywords\",\"id\",'reviewCompleted','completedBy')],class='compact stripe', escape = FALSE, rownames = FALSE,\n                          options = list(\n                            #order = list(list(2, 'desc'), list(4, 'desc')),\n                            # pageLength=nrow(AMLFreeBusinessData()), # needs to match nrow on the table, currently with 4 addins its 24\n                            # autoWidth = TRUE,\n                            bLengthChange=0, # show/hide records per page dropdown\n                            bFilter=0,       # global search box on/off\n                            bInfo=0,         #removes # of reccords filter bottom left\n                            bPaginate=0,      #removes the page select bottom right\n                            columnDefs = list(list(width = 100, targets = c(0, 1, 2, 3)),\n                                              list(className=\"dt-center\", targets=c(0))\n                            )\n                          )\n            ) \n          }),\n          tags$h4(\"Details\"),\n          lapply(  tbl.AMLBusinessData$paidTable[i], function(x){\n            lapply(1:nrow(x),function(j){\n              list(\n                tags$h4(\"AML World Check Id: \",tags$span(tags$b(x$id[j]),style='color:black')),\n                tags$h5('Keywords: ',tags$b(HTML(x$keywords[j]))),\n                tags$h5(\"Likelihood:\", HTML(x$likelihood[j])),\n                tags$h5(\"Key Data: \"),\n                tags$p(HTML(x$keyData[j])),\n                tags$h5(\"Further Information: \"), \n                tags$p(x$furtherInformation[j]),\n                tags$h5(\"External Sources: \"), \n                HTML(x$externalSources[j])\n              )\n            })\n          }),\n          hr()\n        )\n      })\n    })\n    do.call(tagList, ls.subList)\n    return(ls.subList) \n    \n  } else{\n    tags$p(\"Worldcheck Not Selected\")  \n  }\n  \n}\n##########################################################################################################################################\n##########################################################################################################################################\n\n\n##########################################################################################################################################\n##########################################################################################################################################\n##########################################################################################################################################\n\nget.apiKYCBusinessIDCall <- function(businessID='346',kserv='prod.', \n                                     amlPaidCheck='false' \n) {  \n  require(httr)\n  require(jsonlite)\n  # curl -X GET --header 'Accept: application/json' 'http://staging.kyc-api.kountable.com/v0/admin/users'\n  cat('businessID: ',businessID, \" Called get.apiKYCBusinessIDCall\",'amlPaidCheck =',amlPaidCheck,\"\\n\",sep = \"\")\n  attempts <- 0\n  \n  if (kserv == 'staging.') {\n    repeat {\n      ## Starts with 1\n      attempts <-  attempts + 1\n      # this Prod website bearer token call is\n      # curl -X GET --header 'Accept: application/json' 'http://staging.kyc-api.kountable.com/v0/admin/users'\n      # needs user name and password authentication 'admin', 'RzpvnDXv8fVjpu3h'\n      getAuthenticationToken <- GET(paste('http://',kserv,'kyc-api.kountable.com/v0/admin/users', sep = \"\"),\n                                    authenticate('admin', 'RzpvnDXv8fVjpu3h', type = \"basic\"),\n                                    add_headers(\n                                      \"Accept\" = \"application/json\")\n      )         \n      # the content returns a group of token calls in Json format, but first convert from raw to Char format\n      AuthenticationTokenGroup <- fromJSON(rawToChar(getAuthenticationToken$content))\n      # for the 'staging' server look for the admin permissions token find the location index with grep \n      adminAuthenticationToken <- AuthenticationTokenGroup$token[ grep('admin',AuthenticationTokenGroup$description)]\n      #getAuthenticationToken$status_code\n      cat(KYCUUID,\"--> BearerToken attempts-->\", attempts, ' TimeStamp: ',strftime(Sys.time(),\"%Y-%m-%d %H:%M:%S\"),\"\\n\", sep = \"\")\n      # exit if the condition is met\n      if (grepl(\"Resource representation is only available with these Content-Types:\\ntext/plain; charset=UTF-8\\ntext/plain\", \n                rawToChar(getAuthenticationToken$content)) == FALSE) {break} \n    }\n  } else {\n    repeat {\n      ## Starts with 1\n      attempts <-  attempts + 1\n      # this Prod website bearer token call is\n      # curl -X GET --header 'Accept: application/json' 'http://kyc-api.kountable.com/v0/admin/users'\n      # needs user name and password authentication 'admin', 'RzpvnDXv8fVjpu3h'\n      getAuthenticationToken <- GET(paste('http://',kserv,'kyc-api.kountable.com/v0/admin/users', sep = \"\"),\n                                    authenticate('admin', 'RzpvnDXv8fVjpu3h', type = \"basic\"),\n                                    add_headers(\n                                      \"Accept\" = \"application/json\")\n      )         \n      # the content returns a group of token calls in Json format, but first convert from raw to Char format\n      AuthenticationTokenGroup <- fromJSON( rawToChar(getAuthenticationToken$content))\n      # for the 'Prod' server look for the person permissions token find the location index with grep \n      personAuthenticationToken <- AuthenticationTokenGroup$token[ grep('person',AuthenticationTokenGroup$description)]\n      #getAuthenticationToken$status_code\n      cat(\"--> BearerToken attempts-->\", attempts, ' TimeStamp: ',strftime(Sys.time(),\"%Y-%m-%d %H:%M:%S\"),\"\\n\", sep = \"\")\n      # exit if the condition is met\n      if (grepl(\"Resource representation is only available with these Content-Types:\\ntext/plain; charset=UTF-8\\ntext/plain\", \n                rawToChar(getAuthenticationToken$content)) == FALSE) {break} \n      \n    }\n  }\n  \n  ## Part 2 call the data using the bearer token from part one, each server has a different token name to use\n  attempts <- 0\n  ## repeat the call if it 'hangsup'\n  if (kserv == 'staging.') {\n    bearerToken <-  adminAuthenticationToken\n  } else {\n    bearerToken <- personAuthenticationToken\n  }\n  repeat {\n    attempts = attempts + 1\n    ## curl -X GET --header 'Accept: application/json' --header 'KYC-Bearer-Token: faus5t9yuQYYK8lGE4ZvJuwS4G2Fr3uq' \n    ## 'http://kyc-api.kountable.com/v0/businesses?amlPaidCheck=true&\n    ## companyNames=berry%20and%20donaldson%20pty%20limited%20\n    ## &contacts=hayden%20fynn%20nikita%20britow%20wayne%20frazer\n    ## &cities=captown\n    ## &countries=south%20africa\n    ## &phones=0219340212\n    ## &aliases=bob\n    ## &regions=bremen%20close'\n    ## curl -X GET --header 'Accept: application/json' --header 'KYC-Bearer-Token: slkjdfa;sljdf;alksjdf' \n    ## 'http://kyc-api.kountable.com/v0/businesses/1011?amlPaidCheck=true'\n    \n    apiKYCget <- GET(paste0('http://',kserv,'kyc-api.kountable.com/v0/businesses/',businessID,'?amlPaidCheck=', amlPaidCheck),\n                     add_headers(\n                       \"Accept\" = \"application/json\",\n                       \"KYC-Bearer-Token\" = bearerToken\n                     ))\n    ## How many call attempts\n    cat(\"--> get.kycbusiness attempts-->\", attempts, ' Server--> ',kserv, ' TimeStamp: ',strftime(Sys.time(),\"%Y-%m-%d %H:%M:%S\"),\"\\n\", sep=\"\")\n    \n    # exit if the condition is met\n    if (grepl(\"Resource representation is only available with these Content-Types:\\ntext/plain; charset=UTF-8\\ntext/plain\"\n              ,rawToChar(apiKYCget$content))==FALSE){ break} \n  }\n  \n  x <- fromJSON( rawToChar(apiKYCget$content), simplifyVector = TRUE, simplifyMatrix = TRUE, simplifyDataFrame = TRUE)\n  ## the business call may not return the information endpoint, this is to put in businessId for the rest of the functions to access the correct \n  ## businessId\n  if(is.null(x$information$id)) {\n    x$information$id <- businessID\n  }\n  \n  return(x) \n}\n\n##########################################################################################################################################\n##########################################################################################################################################\n# test.buscall <- get.apiKYCBusinessIDCall('346')\n# test.buscall$aml\n# glimpse(tbl.userBusinessList$rawDataTable[[3]])\n\n##########################################################################################################################################\n##########################################################################################################################################\n##########################################################################################################################################\n\n\nget.AMLPaidData <- function(uuidApiKYC){\n  require(shiny)\n  require(dplyr)\n  cat(\"called get.AMLPaidData \\n\")\n  ## if no paid data return null\n  if (!is.null(uuidApiKYC$aml$paid$profile$indexFoundData$foundIds$rawData)){\n    ### WorldCheck Column Names\n    worldCheckColumnNames <- c(\"UID\",\n                               \"LAST NAME\",\n                               \"FIRST NAME\",\n                               \"ALIASES\",\n                               \"ALTERNATIVE SPELLING\",\n                               \"CATEGORY\",\n                               \"TITLE\",\n                               \"SUB-CATEGORY\",\n                               \"POSITION\",\n                               \"AGE\",\n                               \"DOB\",\n                               \"PLACE OF BIRTH\",\n                               \"DECEASED\",\n                               \"PASSPORTS\",\n                               \"SSN\",\n                               \"LOCATIONS\",\n                               \"COUNTRIES\",\n                               \"COMPANIES\",\n                               \"E/I\",\n                               \"LINKED TO\",\n                               \"FURTHER INFORMATION\",\n                               \"KEYWORDS\",\n                               \"EXTERNAL SOURCES\",\n                               \"ENTERED\",\n                               \"UPDATED\",\n                               \"EDITOR\",\n                               \"AGE DATE (AS OF DATE)\")\n    \n    \n    ## ok first lets breakout FURTHER INFORMATION, EXTERNAL SOURCES and KEYWORDS into table elements.\n    ## add Key words, likelihood\n    ## paste the rest into Caption text\n    ## combine together\n    ls.amlPaidRawData <- lapply(lapply(uuidApiKYC$aml$paid$profile$indexFoundData$foundIds$rawData, function(x){strsplit(x, '\\t')}), function(x){lapply(x,function(y){setNames(y,worldCheckColumnNames[1:length(y)])})})\n    \n    \n    \n    ### EXTERNAL SOURCES\n    ## name it right\n    externalSources <-  sapply(sapply(ls.amlPaidRawData, function(i){sapply(i, function(j){strsplit(j[[\"EXTERNAL SOURCES\"]], ' ')})}),function(y){paste0(sapply(y, function(x){paste0(tags$a(x, href=x, target=\"_blank\"))}),collapse = ', ')})\n    \n    ### FURTHER INFORMATION\n    ## name it right\n    furtherInformation <-  sapply(ls.amlPaidRawData, function(i){sapply(i, function(j){j[[\"FURTHER INFORMATION\"]]})})\n    \n    ### KEYWORDS\n    ## name it right\n    \n    keywords <- gsub('~',', ',toupper(sapply(ls.amlPaidRawData, function(i){sapply(i, function(j){j[[\"KEYWORDS\"]]})})))\n    \n    \n    ### Likelihood\n    \n    likelihood <- sapply(uuidApiKYC$aml$paid$profile$indexFoundData$foundIds$likelihood, \n                         function(likelihood){ ifelse(likelihood < 0.25, paste0(tags$span(likelihood,style=\"color:green\")), \n                                                      ifelse(likelihood < 0.50, tags$span(paste0(likelihood),style=\"color:gold\"),\n                                                             tags$span(paste0(likelihood),style=\"color:red\")))})\n    \n    ### UID\n    ##\n    # toupper(uuidApiKYC$aml$paid$profile$indexFoundData$foundIds$id)\n    ## sapply(ls.amlPaidRawData, function(i){sapply(i, function(j){j[[\"UID\"]]})})\n    \n    ## add in search query from call \n    # [[20]]\n    # [1] \"uuid:b8c920b3-6827-4f84-85b2-c71518b93013, countries1:be, countries2:rw, cities:202061, companyNames:agfa healthcare\"\n    # searchQuery <- paste(names(uuidApiKYC$aml$paid$profile$indexFoundData$searchQuery),\n    #                      unlist(uuidApiKYC$aml$paid$profile$indexFoundData$searchQuery), sep = ':',collapse = ', ')\n    ## paste together everything but what is published in table form,  The idea here is to do firstNames: bill, Joe; LastNames: murray, pesci \n    searchQuery <- paste(sapply(names(sapply(uuidApiKYC$aml$paid$profile$indexFoundData$searchQuery, function(x){ paste(x,collapse = ', ')})), function(x){paste(tags$span(x,style = 'font-weight:bold'))}), sapply(uuidApiKYC$aml$paid$profile$indexFoundData$searchQuery, function(x){ paste(x,collapse = ', ')}), sep = ': ',collapse = '; ')\n    \n    \n    \n    ## select fields for keyData caption from worldcheck master list\n    captionNames <- c(\"UID\",\"LAST NAME\",\"FIRST NAME\",\"ALIASES\",\"ALTERNATIVE SPELLING\",\"CATEGORY\",\"TITLE\",\"SUB-CATEGORY\",\"POSITION\",\n                      \"AGE\",\"DOB\",\"PLACE OF BIRTH\",\"DECEASED\",\"PASSPORTS\",\"SSN\",\"LOCATIONS\",\"COUNTRIES\",\"COMPANIES\",\"E/I\",\"LINKED TO\",\n                      \"ENTERED\",\"AGE DATE (AS OF DATE)\")\n    \n    # paste(names(unlist(ls.amlPaidRawData[[1]][[1]][captionNames])),unlist(ls.amlPaidRawData[[1]][[1]][captionNames]), sep = ':',collapse = ', ')\n    \n    ## make keyData\n    keyData <- sapply(ls.amlPaidRawData, function(i){sapply(i, function(j){paste(names(unlist(j[captionNames])),unlist(j[captionNames]), sep = ':',collapse = ', ')})})\n    \n    \n    \n    \n    ## make it a data frame\n    tbl.amlPaidProfile <- data_frame(searchQuery,keyData,keywords,likelihood,furtherInformation,externalSources, id = uuidApiKYC$aml$paid$profile$indexFoundData$foundIds$id)\n    \n    ## user ID\n    tbl.amlPaidProfile$userId <- uuidApiKYC$aml$paid$profile$identity$sourceUser\n    \n    ## user first name, last name\n    tbl.amlPaidProfile$firstName <- uuidApiKYC$profile$firstName\n    tbl.amlPaidProfile$lastName <- uuidApiKYC$profile$lastName\n    \n    ## return table\n    return(tbl.amlPaidProfile)\n  }\n  else {\n    ## if no rows in found Ids return No Match Table\n    cat('No Rows Found In AMLPaidData for userId:',uuidApiKYC$aml$paid$profile$identity$sourceUser,'\\n')\n    searchQuery <- paste(sapply(names(sapply(uuidApiKYC$aml$paid$profile$indexFoundData$searchQuery, function(x){ paste(x,collapse = ', ')})), function(x){paste(tags$span(x,style = 'color:black;font-weight:bold'))}), sapply(uuidApiKYC$aml$paid$profile$indexFoundData$searchQuery, function(x){ paste(x,collapse = ', ')}), sep = ': ',collapse = '; ')\n    \n    tbl.amlPaidProfile <- data_frame(searchQuery=searchQuery,keyData = paste0(tags$b(\"No Match\",style=\"color:green\")),keywords=paste0(tags$b(\"No Match\",style=\"color:green\")),likelihood=' ',furtherInformation=' ',externalSources= ' ', id  = ' ')\n    ## user ID\n    tbl.amlPaidProfile$userId <- uuidApiKYC$aml$paid$profile$identity$sourceUser\n    ## user first name, last name\n    tbl.amlPaidProfile$firstName <- uuidApiKYC$profile$firstName\n    tbl.amlPaidProfile$lastName <- uuidApiKYC$profile$lastName\n    \n    return(tbl.amlPaidProfile)\n  }\n  \n  \n}\n\n##########################################################################################################################################\n##########################################################################################################################################\n\n##########################################################################################################################################\n##########################################################################################################################################\n##########################################################################################################################################\nget.AMLPaidDataOutput <- function(uuidApiKYC) {\n  require(shiny)\n  ## call get.AMLPaidData\n  tbl.AMLPaidData <- get.AMLPaidData(uuidApiKYC = uuidApiKYC)\n  cat(\"called get.AMLPaidDataOutput \\n\")\n  # Insert plot output objects the list\n  plot_output_list <- lapply(1:nrow(tbl.AMLPaidData), function(i) {\n    plotname <- paste(\"plot\", i, sep=\"\")\n    plot_output_object <- DT::dataTableOutput(plotname, width = \"100%\") ## plotOutput(plotname, height = 280, width = 250)\n    plot_output_object <- DT::renderDataTable({\n      ## 'frankBusinessRole','businessId','name',\n      DT::datatable(tbl.AMLPaidData[i,c('keywords','likelihood','furtherInformation','externalSources','id')], \n                    class='compact stripe', \n                    escape = FALSE, \n                    rownames = FALSE,\n                    caption = tags$caption(style = 'caption-side: top; text-align: left;',\n                                           tags$div(tags$h4(\"AML World Check For: \",\n                                                            tags$p(tags$b(tags$span('User Id: ',style='color:black'),tbl.AMLPaidData$userId[[i]], \n                                                                          tags$span(' First Name: ',style='color:black'), tbl.AMLPaidData$firstName[[i]], \n                                                                          tags$span(' Last Name: ',style='color:black'), tbl.AMLPaidData$lastName[[i]], \n                                                                          style = 'color:blue'))) ## Use span to change color of labels\n                                                    , tags$blockquote(\"Search Query: \",HTML(tbl.AMLPaidData$searchQuery[[i]])),\n                                                    tags$blockquote(\"Key Data: \",HTML(tbl.AMLPaidData$keyData[i])))),\n                    options = list(\n                      #order = list(list(2, 'desc'), list(4, 'desc')),\n                      pageLength=nrow(tbl.AMLPaidData[i,]), # needs to match nrow on the table, currently with 4 addins its 24\n                      # autoWidth = TRUE,\n                      bLengthChange=0, # show/hide records per page dropdown\n                      bFilter=0,       # global search box on/off\n                      bInfo=0,         #removes # of reccords filter bottom left\n                      bPaginate=0,      #removes the page select bottom right\n                      columnDefs = list(list(width = 50, targets = c(0, 1)),\n                                        list(width = 400, targets = c(2,3)),\n                                        list(className=\"dt-center\", targets=c(0,1)))\n                    )\n                    \n      )\n    })\n  })\n  \n  do.call(tagList, plot_output_list) # needed to display properly.\n  \n  return(plot_output_list)\n}\n##########################################################################################################################################\n##########################################################################################################################################\n# uuidApiKYC <- get.apiKYCCall('10711', amlPaid = 'true')\n##########################################################################################################################################\n##########################################################################################################################################\n##########################################################################################################################################\nget.AMLPaidDataOutputList <- function(uuidApiKYC, amlPaid='false', shinyUser) {\n  require(shiny)\n  ## call get.AMLPaidData\n  tbl.AMLPaidData <- get.AMLPaidData(uuidApiKYC = uuidApiKYC)\n  cat(\"====================================================\\n\")\n  cat(\"called get.AMLPaidDataOutputList \\n\")\n  cat(\"amlPaid = \",amlPaid,'\\n')\n  cat(\"====================================================\\n\")\n  \n  ## make checkbox Review?\n  ## tbl.AMLPaidData$amlPaidCheckBoxInputs <- lapply(1:nrow(tbl.AMLPaidData), function(j){paste0(tags$div(checkboxInput(paste0(\"paidCheckbox_input_\", j), label = tags$h6(\"Reviewed by\"), value = 0)))})\n  \n  ## add rowCount which is a row number.  Use this number on mutate to create the checkboxes and signature fields\n  tbl.AMLPaidData$rowCount <-  1:nrow(tbl.AMLPaidData)\n  \n  # tags$style(type=\"text/css\", \"input.shiny-bound-input { font-size:20px; height:35px;}\")\n  \n  tbl.AMLPaidData <- tbl.AMLPaidData %>% rowwise() %>% \n    mutate(reviewCompleted = paste0(tags$div(checkboxInput(paste0(\"paidCheckbox_input_\",rowCount), label=\"\", value = FALSE, width = 25), style = \"float:right\")),\n           completedBy =paste0(textInput(paste0(\"paidTextInputSignature_\",rowCount), label = \"\", value=shinyUser,  width='250px')))\n  \n  # Insert plot output objects the list\n  # plot_output_list <- lapply(1:nrow(tbl.AMLPaidData), function(i) {\n  #   plotname <- paste(\"plot\", i, sep=\"\")\n  #   plot_output_object <- DT::dataTableOutput(plotname, width = \"100%\") ## plotOutput(plotname, height = 280, width = 250)\n  #   plot_output_object <- DT::renderDataTable({\n  #     ## 'frankBusinessRole','businessId','name',\n  #     DT::datatable(tbl.AMLPaidData[i,c('keywords','likelihood','furtherInformation','externalSources','id')], \n  #                   class='compact stripe', \n  #                   escape = FALSE, \n  #                   rownames = FALSE,\n  #                   caption = tags$caption(style = 'caption-side: top; text-align: left;',\n  #                                          tags$div(tags$h4(\"AML World Check For: \",\n  #                                                           tags$p(tags$b(tags$span('User Id: ',style='color:black'),tbl.AMLPaidData$userId[[i]], \n  #                                                                         tags$span(' First Name: ',style='color:black'), tbl.AMLPaidData$firstName[[i]], \n  #                                                                         tags$span(' Last Name: ',style='color:black'), tbl.AMLPaidData$lastName[[i]], \n  #                                                                         style = 'color:blue'))) ## Use span to change color of labels\n  #                                                   , tags$blockquote(\"Search Query: \",HTML(tbl.AMLPaidData$searchQuery[[i]])),\n  #                                                   tags$blockquote(\"Key Data: \",HTML(tbl.AMLPaidData$keyData[i])))),\n  #                   options = list(\n  #                     #order = list(list(2, 'desc'), list(4, 'desc')),\n  #                     pageLength=nrow(tbl.AMLPaidData[i,]), # needs to match nrow on the table, currently with 4 addins its 24\n  #                     # autoWidth = TRUE,\n  #                     bLengthChange=0, # show/hide records per page dropdown\n  #                     bFilter=0,       # global search box on/off\n  #                     bInfo=0,         #removes # of reccords filter bottom left\n  #                     bPaginate=0,      #removes the page select bottom right\n  #                     columnDefs = list(list(width = 50, targets = c(0, 1)),\n  #                                       list(width = 400, targets = c(2,3)),\n  #                                       list(className=\"dt-center\", targets=c(0,1)))\n  #                   )\n  #                   \n  #     )\n  #   })\n  # })\n  ## if worldcheck not selected return \"worldcheck not selected\"\n  if(amlPaid == 'true'){\n    #   my_list_1 <- lapply(1:nrow(tbl.AMLPaidData), function(i) {\n    #     \n    #     # plotname <- paste(\"amlPaid\", i, sep=\"\") \n    #     # output[[paste0('amlPaid', i)]] <- renderUI({\n    #     outputItem <- renderUI({\n    #       list(\n    #         tags$div(tags$h3(\"AML World Check Id: \",tags$span(tags$b(tbl.AMLPaidData$id[i]),style='color:black')),\n    #                  tags$p(tags$b(tags$span('User Id: ',style='color:black'),tbl.AMLPaidData$userId[[i]],\n    #                                tags$span(' First Name: ',style='color:black'), tbl.AMLPaidData$firstName[[i]],\n    #                                tags$span(' Last Name: ',style='color:black'), tbl.AMLPaidData$lastName[[i]],\n    #                                style = 'color:blue')) ## Use span to change color of labels\n    #                  , tags$blockquote(\"Search Query: \",HTML(tbl.AMLPaidData$searchQuery[[i]])),\n    #                  tags$blockquote(\"Key Data: \",HTML(tbl.AMLPaidData$keyData[i]))),\n    #         tags$h4(\"Details\"),\n    #         tags$h4('Keywords: ',tags$b(HTML(tbl.AMLPaidData$keywords[i]))),\n    #         tags$h4(\"Likelihood:\", HTML(tbl.AMLPaidData$likelihood[i])),\n    #         tags$h4(\"Further Information: \"), \n    #         tags$p(tbl.AMLPaidData$furtherInformation[i]),\n    #         tags$h4(\"External Sources: \"), \n    #         HTML(tbl.AMLPaidData$externalSources[i]),\n    #         hr()\n    #       )\n    #     })\n    #   })\n    #   do.call(tagList, my_list_1)\n    #   return(my_list_1)\n    ls.subList <- lapply(1, function(i) {\n      outputItem <- renderUI({\n        list(\n          tags$div(\n            tags$h4(\"AML Worldcheck Seach For: \",\n                    tags$p(tags$b(tags$span('User Id: ',style='color:black'),tbl.AMLPaidData$userId[[i]],\n                                  tags$span(' First Name: ',style='color:black'), tbl.AMLPaidData$firstName[[i]],\n                                  tags$span(' Last Name: ',style='color:black'), tbl.AMLPaidData$lastName[[i]],\n                                  style = 'color:blue'))) ## Use span to change color of labels\n            , tags$blockquote(\"Search Query: \", HTML(tbl.AMLPaidData$searchQuery[[i]]))),\n          DT::renderDataTable({\n            DT::datatable(tbl.AMLPaidData[,c(\"likelihood\",\"keywords\",\"id\",'reviewCompleted','completedBy')],class='compact stripe', escape = FALSE, rownames = FALSE,\n                          options = list(\n                            #order = list(list(2, 'desc'), list(4, 'desc')),\n                            # pageLength=nrow(AMLFreeBusinessData()), # needs to match nrow on the table, currently with 4 addins its 24\n                            # autoWidth = TRUE,\n                            bLengthChange=0, # show/hide records per page dropdown\n                            bFilter=0,       # global search box on/off\n                            bInfo=0,         #removes # of reccords filter bottom left\n                            bPaginate=0,      #removes the page select bottom right\n                            columnDefs = list(list(width = 100, targets = c(0, 1, 2, 3)),\n                                              list(className=\"dt-center\", targets=c(0))\n                            )\n                          )\n            ) \n          }),\n          tags$h4(\"Details\"),\n          lapply(  1:nrow(tbl.AMLPaidData), function(j){\n            list(\n              tags$h4(\"AML World Check Id: \",tags$span(tags$b(tbl.AMLPaidData$id[j]),style='color:black')),\n              tags$h5('Keywords: ',tags$b(HTML(tbl.AMLPaidData$keywords[j]))),\n              tags$h5(\"Likelihood:\", HTML(tbl.AMLPaidData$likelihood[j])),\n              tags$h5(\"Key Data: \"),\n              tags$p(HTML(tbl.AMLPaidData$keyData[j])),\n              tags$h5(\"Further Information: \"), \n              tags$p(tbl.AMLPaidData$furtherInformation[j]),\n              tags$h5(\"External Sources: \"), \n              HTML(tbl.AMLPaidData$externalSources[j])\n            )\n          }),\n          hr()\n        )\n      })\n    })\n    do.call(tagList, ls.subList)\n    return(ls.subList) \n  } else{\n    tags$p(\"Worldcheck Not Selected\")  \n  }\n  \n  \n}\n##########################################################################################################################################\n##########################################################################################################################################\n# firstNames='paul'\n# lastNames='davis'\n# birthDays='1'\n# amlPaidCheck='true'\n##############################################################################################################################################\n##############################################################################################################################################\n##############################################################################################################################################\nget.apiKYCPersonSearchCall <- function(kserv='', amlPaidCheck='false', firstNames='paul', lastNames='davis', emails='', cities='', \n                                       regions='', countries='', phones='', birthDays='', birthMonths='',birthYears='',nickName='') {  \n  require(httr)\n  require(jsonlite)\n  # curl -X GET --header 'Accept: application/json' 'http://staging.kyc-api.kountable.com/v0/admin/users'\n  cat(\" Called get.apiKYCPersonSearchCall \\n Search Query - firstNames:\",\tfirstNames,\t\n      \" lastNames:\",\tlastNames,\t\n      \"\\n emails:\",\temails,\t\n      \" cities:\",\t\tcities,\n      \" regions:\",\tregions,\t\n      \" countries:\",\tcountries,\t\n      \"\\n phones:\",\tphones,\t\n      \" birthDays:\",\tbirthDays,\t\n      \" birthMonths:\",\tbirthMonths,\t\n      \" birthYears:\",\tbirthYears,\t\n      \"\\n nickName:\",nickName, \"\\n amlPaidCheck: \",amlPaidCheck,\"\\n\",sep = \"\")\n  attempts <- 0\n  \n  if (kserv == 'staging.') {\n    repeat {\n      ## Starts with 1\n      attempts <-  attempts + 1\n      # this Prod website bearer token call is\n      # curl -X GET --header 'Accept: application/json' 'http://staging.kyc-api.kountable.com/v0/admin/users'\n      # needs user name and password authentication 'admin', 'RzpvnDXv8fVjpu3h'\n      getAuthenticationToken <- GET(paste('http://',kserv,'kyc-api.kountable.com/v0/admin/users', sep = \"\"),\n                                    authenticate('admin', 'RzpvnDXv8fVjpu3h', type = \"basic\"),\n                                    add_headers(\n                                      \"Accept\" = \"application/json\")\n      )         \n      # the content returns a group of token calls in Json format, but first convert from raw to Char format\n      AuthenticationTokenGroup <- fromJSON(rawToChar(getAuthenticationToken$content))\n      # for the 'staging' server look for the admin permissions token find the location index with grep \n      adminAuthenticationToken <- AuthenticationTokenGroup$token[ grep('admin',AuthenticationTokenGroup$description)]\n      #getAuthenticationToken$status_code\n      cat(KYCUUID,\"--> BearerToken attempts-->\", attempts, ' TimeStamp: ',strftime(Sys.time(),\"%Y-%m-%d %H:%M:%S\"),\"\\n\", sep = \"\")\n      # exit if the condition is met\n      if (grepl(\"Resource representation is only available with these Content-Types:\\ntext/plain; charset=UTF-8\\ntext/plain\", \n                rawToChar(getAuthenticationToken$content)) == FALSE) {break} \n    }\n  } else {\n    repeat {\n      ## Starts with 1\n      attempts <-  attempts + 1\n      # this Prod website bearer token call is\n      # curl -X GET --header 'Accept: application/json' 'http://kyc-api.kountable.com/v0/admin/users'\n      # needs user name and password authentication 'admin', 'RzpvnDXv8fVjpu3h'\n      getAuthenticationToken <- GET(paste('http://',kserv,'kyc-api.kountable.com/v0/admin/users', sep = \"\"),\n                                    authenticate('admin', 'RzpvnDXv8fVjpu3h', type = \"basic\"),\n                                    add_headers(\n                                      \"Accept\" = \"application/json\")\n      )         \n      # the content returns a group of token calls in Json format, but first convert from raw to Char format\n      AuthenticationTokenGroup <- fromJSON( rawToChar(getAuthenticationToken$content))\n      # for the 'Prod' server look for the person permissions token find the location index with grep \n      personAuthenticationToken <- AuthenticationTokenGroup$token[ grep('person',AuthenticationTokenGroup$description)]\n      #getAuthenticationToken$status_code\n      cat(\"--> BearerToken attempts-->\", attempts, ' TimeStamp: ',strftime(Sys.time(),\"%Y-%m-%d %H:%M:%S\"),\"\\n\", sep = \"\")\n      # exit if the condition is met\n      if (grepl(\"Resource representation is only available with these Content-Types:\\ntext/plain; charset=UTF-8\\ntext/plain\", \n                rawToChar(getAuthenticationToken$content)) == FALSE) {break} \n      \n    }\n  }\n  \n  ## Part 2 call the data using the bearer token from part one, each server has a different token name to use\n  attempts <- 0\n  ## repeat the call if it 'hangsup'\n  if (kserv == 'staging.') {\n    bearerToken <-  adminAuthenticationToken\n  } else {\n    bearerToken <- personAuthenticationToken\n  }\n  repeat {\n    attempts = attempts + 1\n    ## curl -X GET --header 'Accept: application/json' --header 'KYC-Bearer-Token: oJLXXlf4Q24FZgCnYeYR3ps2oIXtVqzZ' \n    ## 'http://kyc-api.kountable.com/v0/persons/aml?searchInPaidIndex=true\n    ## &firstNames=Joe\n    ## &lastNames=Doucette\n    ## &emails=doucetteemail%40yahoo.com\n    ## &cities=Keller\n    # &regions=Texas\n    # &countries=USA\n    # &phones=8178769670\n    # &birthDays=1\n    # &birthMonths=5\n    # &birthYears=2000\n    # &nickName=Your%20Majesty'\n    ### none of the birth fields work\n    # paste0('http://',kserv,'kyc-api.kountable.com/v0/persons/aml?searchInPaidIndex=',amlPaidCheck, \n    #        '&firstNames=',URLencode(firstNames, reserved = TRUE),\n    #        '&lastNames=',URLencode(lastNames, reserved = TRUE),\n    #        '&emails=', URLencode(emails, reserved = TRUE),\n    #        '&cities=', URLencode(cities, reserved = TRUE),\n    #        '&regions=',URLencode(regions, reserved = TRUE),\n    #        '&countries=',URLencode(countries, reserved = TRUE),\n    #        '&phones=',URLencode(phones, reserved = TRUE),\n    #        '&birthDays=',URLencode(birthDays, reserved = TRUE),\n    #        '&birthMonths=', URLencode(birthMonths, reserved = TRUE),\n    #        '&birthYears=', URLencode(birthYears, reserved = TRUE),\n    #        '&nickName=',URLencode(nickName, reserved = TRUE))\n    # # curl -X GET --header 'Accept: application/json' --header 'KYC-Bearer-Token: oJLXXlf4Q24FZgCnYeYR3ps2oIXtVqzZ' 'http://kyc-api.kountable.com/v0/persons/aml?searchInPaidIndex=false&firstNames=Paul&lastNames=Davis&emails=pauldavis%40gmail.com&cities=test&regions=texas&countries=usa&phones=555&nickName=the%20man'\n    # paste0('http://',kserv,'kyc-api.kountable.com/v0/persons/aml?searchInPaidIndex=',amlPaidCheck, \n    #        '&firstNames=',URLencode(firstNames, reserved = TRUE),\n    #        '&lastNames=',URLencode(lastNames, reserved = TRUE),\n    #        '&emails=', URLencode(emails, reserved = TRUE),\n    #        '&cities=', URLencode(paste(cities, collapse = ' '), reserved = TRUE),\n    #        '&regions=',URLencode(regions, reserved = TRUE),\n    #        '&countries=',URLencode(countries, reserved = TRUE),\n    #        '&phones=',URLencode(phones, reserved = TRUE),\n    #        '&nickName=',URLencode(nickName, reserved = TRUE))\n    # '&cities=', URLencode(paste(cities, collapse = ' '), reserved = TRUE)\n    cat('+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++\\n')\n    cat(paste0('http://',kserv,'kyc-api.kountable.com/v0/persons/aml?searchInPaidIndex=',amlPaidCheck, \n               '&firstNames=',URLencode(firstNames, reserved = TRUE),\n               '&lastNames=',URLencode(lastNames, reserved = TRUE),\n               '&emails=', URLencode(emails, reserved = TRUE),\n               '&cities=', URLencode(cities, reserved = TRUE),\n               '&regions=',URLencode(regions, reserved = TRUE),\n               '&countries=',URLencode(countries, reserved = TRUE),\n               '&phones=',URLencode(phones, reserved = TRUE),\n               '&birthDays=',URLencode(birthDays, reserved = TRUE),\n               '&birthMonths=', URLencode(birthMonths, reserved = TRUE),\n               '&birthYears=', URLencode(birthYears, reserved = TRUE),\n               '&nickName=',URLencode(nickName, reserved = TRUE)),'\\n')\n    cat('+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++\\n')\n    apiKYCget <- GET(paste0('http://',kserv,'kyc-api.kountable.com/v0/persons/aml?searchInPaidIndex=',amlPaidCheck, \n                            '&firstNames=',URLencode(firstNames, reserved = TRUE),\n                            '&lastNames=',URLencode(lastNames, reserved = TRUE),\n                            '&emails=', URLencode(emails, reserved = TRUE),\n                            '&cities=', URLencode(cities, reserved = TRUE),\n                            '&regions=',URLencode(regions, reserved = TRUE),\n                            '&countries=',URLencode(countries, reserved = TRUE),\n                            '&phones=',URLencode(phones, reserved = TRUE),\n                            '&birthDays=',URLencode(birthDays, reserved = TRUE),\n                            '&birthMonths=', URLencode(birthMonths, reserved = TRUE),\n                            '&birthYears=', URLencode(birthYears, reserved = TRUE),\n                            '&nickName=',URLencode(nickName, reserved = TRUE)),\n                     add_headers(\n                       \"Accept\" = \"application/json\",\n                       \"KYC-Bearer-Token\" = bearerToken\n                     ))\n    ## How many call attempts\n    cat(\"--> get.apiKYCPersonSearchCall attempts-->\", attempts, ' Server--> ',kserv, ' TimeStamp: ',strftime(Sys.time(),\"%Y-%m-%d %H:%M:%S\"),\"\\n\", sep=\"\")\n    \n    # exit if the condition is met\n    if (grepl(\"Resource representation is only available with these Content-Types:\\ntext/plain; charset=UTF-8\\ntext/plain\"\n              ,rawToChar(apiKYCget$content))==FALSE){ break} \n  }\n  \n  x <- fromJSON( rawToChar(apiKYCget$content), simplifyVector = TRUE, simplifyMatrix = TRUE, simplifyDataFrame = TRUE)\n  \n  print(x)\n  ## if nothing is returned i.e. list() then create 'empty' table with included search tearms\n  if (length(x) > 0 ){\n    cat(\"______length > 0__________________\\n\")\n    ## clean up the return call\n    tbl.apiKYCPersonSearch <- tbl_df(x)\n    \n    \n    ## To check existence ifelse(\"var2\" %in% names(df), var2,NA)) \n    ## unlist, paste0 and collapse on ',' turns \"joe\" \"smith\" into \"joe, smith\"\n    tbl.apiKYCPersonSearch <- tbl.apiKYCPersonSearch %>% rowwise() %>% \n      mutate(age = ifelse(\"age\" %in% colnames(tbl.apiKYCPersonSearch), paste0(unlist( age), collapse = ', '),' '),\n             birthYears = paste0(unlist( birthYears), collapse = ', '),\n             birthDays = paste0(unlist( birthDays), collapse = ', '),\n             birthMonths = paste0(unlist( birthMonths), collapse = ', '),\n             countries = paste0(unlist( countries), collapse = ', '),\n             lastNames = paste0(unlist( lastNames), collapse = ', '),\n             firstNames = paste0(unlist( firstNames), collapse = ', '),\n             regions = paste0(unlist( regions), collapse = ', '),\n             cities = paste0(unlist( cities), collapse = ', '))\n    ## add search query back in\n    searchQuery <- paste0(\"First Names:\",\tfirstNames,\t\n                          \"; Last Names:\",\tlastNames,\t\n                          \"; Emails:\",\temails,\t\n                          \"; Cities:\",\t\tcities,\n                          \"; Regions:\",\tregions,\t\n                          \"; Countries:\",\tcountries,\t\n                          \"; Phones:\",\tphones,\t\n                          \"; BirthDays:\",\tbirthDays,\t\n                          \"; BirthMonths:\",\tbirthMonths,\t\n                          \"; BirthYears:\",\tbirthYears,\t\n                          \"; NickName:\",nickName)\n    tbl.apiKYCPersonSearch$searchQuery <- searchQuery  \n    tbl.apiKYCPersonSearch$searchFirstNames <- firstNames\n    tbl.apiKYCPersonSearch$searchLastNames <- lastNames\n    tbl.apiKYCPersonSearch$searchEmails <- emails\n    tbl.apiKYCPersonSearch$searchRegions <- regions\n    tbl.apiKYCPersonSearch$searchCountries <- countries\n    tbl.apiKYCPersonSearch$searchPhones <- phones\n    tbl.apiKYCPersonSearch$searchBirthDays <- birthDays\n    tbl.apiKYCPersonSearch$searchBirthMonths <- birthMonths\n    tbl.apiKYCPersonSearch$searchBirthYears <- birthYears\n    tbl.apiKYCPersonSearch$searchNickName <- nickName\n    \n    ## select fields for keyData caption from worldcheck master list\n    captionNames <- c(\"firstNames\", \"birthYears\", \"age\", \"countries\", \"birthMonths\", \"lastNames\", \"birthDays\", \"regions\", \"cities\")\n    \n    \n    ## make amlKeyData which combines all of the fields returned by the apiKYCPersonSearchCall\n    amlKeyData <- sapply(1:nrow(tbl.apiKYCPersonSearch), function(i){paste(names(unlist(tbl.apiKYCPersonSearch[i,captionNames])),unlist(tbl.apiKYCPersonSearch[i,captionNames]), sep = ':',collapse = ', ')})\n    tbl.apiKYCPersonSearch$amlKeyData <- amlKeyData\n    return(tbl.apiKYCPersonSearch) \n  } else{\n    \n    tbl.apiKYCPersonSearch <- data_frame(likelihood=' ',source= ' ',firstNames= ' ',rawData= ' ',birthYears= ' ',age= ' ',countries= ' ',id= ' ',\n                                         birthMonths= ' ',lastNames= ' ',birthDays= ' ',regions= ' ',cities=' ' )\n    ## add search query back in\n    searchQuery <- paste0(\"First Names:\",\tfirstNames,\t\n                          \"; Last Names:\",\tlastNames,\t\n                          \"; Emails:\",\temails,\t\n                          \"; Cities:\",\t\tcities,\n                          \"; Regions:\",\tregions,\t\n                          \"; Countries:\",\tcountries,\t\n                          \"; Phones:\",\tphones,\t\n                          \"; BirthDays:\",\tbirthDays,\t\n                          \"; BirthMonths:\",\tbirthMonths,\t\n                          \"; BirthYears:\",\tbirthYears,\t\n                          \"; NickName:\",nickName)\n    tbl.apiKYCPersonSearch$searchQuery <- searchQuery  \n    tbl.apiKYCPersonSearch$searchFirstNames <- firstNames\n    tbl.apiKYCPersonSearch$searchLastNames <- lastNames\n    tbl.apiKYCPersonSearch$searchEmails <- emails\n    tbl.apiKYCPersonSearch$searchRegions <- regions\n    tbl.apiKYCPersonSearch$searchCountries <- countries\n    tbl.apiKYCPersonSearch$searchPhones <- phones\n    tbl.apiKYCPersonSearch$searchBirthDays <- birthDays\n    tbl.apiKYCPersonSearch$searchBirthMonths <- birthMonths\n    tbl.apiKYCPersonSearch$searchBirthYears <- birthYears\n    tbl.apiKYCPersonSearch$searchNickName <- nickName\n    \n    ## select fields for keyData caption from worldcheck master list\n    captionNames <- c(\"firstNames\", \"birthYears\", \"age\", \"countries\", \"birthMonths\", \"lastNames\", \"birthDays\", \"regions\", \"cities\")\n    \n    \n    ## make amlKeyData which combines all of the fields returned by the apiKYCPersonSearchCall\n    amlKeyData <- sapply(1:nrow(tbl.apiKYCPersonSearch), function(i){paste(names(unlist(tbl.apiKYCPersonSearch[i,captionNames])),unlist(tbl.apiKYCPersonSearch[i,captionNames]), sep = ':',collapse = ', ')})\n    tbl.apiKYCPersonSearch$amlKeyData <- amlKeyData\n    \n    return(tbl.apiKYCPersonSearch)   \n  }\n  \n  \n}\n##############################################################################################################################################\n##############################################################################################################################################\n\n##############################################################################################################################################\n##############################################################################################################################################\n##############################################################################################################################################\n\nget.searchAMLFreeData <- function(tbl.apiKYCPersonSearch){\n  ## Frank AML FREE\n  require(dplyr)\n  require(shiny)\n  \n  cat(\"---------------------------------------------------------------------\\n\")\n  cat(\"inside get.searchAMLFreeTable\\n\")\n  tbl.foundIDs <- tbl.apiKYCPersonSearch[which(tbl.apiKYCPersonSearch$source == 'freecheck'),]\n  cat(\"---------------------------------------------------------------------\\n\")\n  cat(\"print tbl.foundIDs --get.searchAMLFreeTable\\n\")\n  print(tbl.foundIDs)\n  \n  # \n  # ## if no Frank free aml data then \n  # if (nrow(tbl.foundIDs) > 0) {\n  #   tbl.foundIDs <- tbl.foundIDs %>% \n  #     mutate(amlFreeListCode = toupper(gsub('([^_]*)_(.*)','\\\\1',id)),\n  #            matchedUrl = ifelse(regexec('http',rawData)==1, gsub('(http.*?)(\\t.*)','\\\\1',rawData), \"no Url\"),\n  #            matchedText = gsub('\\\\)','', gsub('List\\\\(','', gsub('\\t','; ', gsub('(http.*?)(\\t.*?)(.*)','\\\\3', rawData)))))\n  #   ## build HTML tags for Shiny DT table\n  #   ## color likelihood \n  #   ## Add hyperlinks to matchedUrl\n  #   tbl.foundIDs <- tbl.foundIDs %>% rowwise() %>% \n  #     mutate(likelihood = ifelse(likelihood < 0.25, paste0(tags$span(likelihood,style=\"color:green\")), \n  #                                ifelse(likelihood < 0.50, tags$span(paste0(likelihood),style=\"color:gold\"),\n  #                                       tags$span(paste0(likelihood),style=\"color:red\"))),\n  #            matchedUrl = paste0(tags$a(paste0(matchedUrl), href = matchedUrl,target='_blank')))\n  #   return(tbl.foundIDs)\n  #   \n  # } else {\n  #   ## if no rows in found Ids return No Match Table\n  #   cat('No Rows Found In frankAMLFreeTable')\n  #   tbl.foundIDs <-  data_frame(amlFreeListCode = paste0(tags$span(\"No Match\",style=\"color:green\")),likelihood = ' ',matchedText = ' ', matchedUrl = ' ', id = ' ' )\n  #   \n  #   return(tbl.foundIDs)}\n  # \n  ## if no Frank free aml data then \n  if (nrow(tbl.foundIDs) > 0) {\n    tbl.foundIDs <- tbl.foundIDs %>% \n      mutate(amlFreeListCode = toupper(gsub('([^_]*)_(.*)','\\\\1',id)),\n             matchedUrl = ifelse(regexec('http',rawData)==1, gsub('(http.*?)(\\t.*)','\\\\1',rawData), \"no Url\"),\n             matchedText = gsub('\\\\)','', gsub('List\\\\(','', gsub('\\t','; ', gsub('(http.*?)(\\t.*?)(.*)','\\\\3', rawData)))))\n    ## build HTML tags for Shiny DT table\n    ## color likelihood \n    ## Add hyperlinks to matchedUrl\n    tbl.foundIDs <- tbl.foundIDs %>% rowwise() %>% \n      mutate(likelihood = ifelse(likelihood < 0.25, paste0(tags$span(likelihood,style=\"color:green\")), \n                                 ifelse(likelihood < 0.50, paste0(tags$span(likelihood,style=\"color:gold\")),\n                                        paste0(tags$span(likelihood,style=\"color:red\")))),\n             matchedUrl = paste0(tags$a(paste0(matchedUrl), href = matchedUrl,target='_blank')))\n    \n    \n    \n    return(tbl.foundIDs)\n    \n    \n  } else {\n    ## if no rows in found Ids return No Match Table\n    cat('_____________________________\\n')\n    cat('No Rows Found In AMLFreeTable\\n')\n    cat('_____________________________\\n')\n    \n    # amlKYCSearchFields <- c(\"searchQuery\",\"searchFirstNames\",\"searchLastNames\",\"searchEmails\",\"searchRegions\",\"searchCountries\",\"searchPhones\",\"searchBirthDays\",\"searchBirthMonths\",\"searchBirthYears\",\"searchNickName\",\"amlKeyData\") \n    # tbl.foundIDs <-  data_frame(amlFreeListCode = paste0(tags$span(\"No Match\",style=\"color:green\")),likelihood = ' ',matchedText = ' ', matchedUrl = ' ', id = ' ', tbl.apiKYCPersonSearch[,amlKYCSearchFields] )\n    tbl.apiKYCPersonSearch <- tbl.apiKYCPersonSearch[1,]\n    tbl.apiKYCPersonSearch$amlFreeListCode <- paste0(tags$span(\"No Match\",style=\"color:green\"))\n    tbl.apiKYCPersonSearch$likelihood <-  ' '\n    tbl.apiKYCPersonSearch$matchedText <-  ' '\n    tbl.apiKYCPersonSearch$matchedUrl <-  ' '\n    tbl.apiKYCPersonSearch$id <-  paste0(tags$span(\"No Match\",style=\"color:green\"))\n    return(tbl.apiKYCPersonSearch)}\n}\n##############################################################################################################################################\n##############################################################################################################################################\n\n##########################################################################################################################################\n##########################################################################################################################################\n##########################################################################################################################################\nget.searchAMLFreeDataOutputList <- function(tbl.apiKYCPersonSearch, shinyUser) {\n  require(shiny)\n  ## call get.AMLPaidData\n  tbl.AMLPaidData <- get.searchAMLFreeData(tbl.apiKYCPersonSearch = tbl.apiKYCPersonSearch)\n  cat(\"====================================================\\n\")\n  cat(\"called get.AMLFreeDataOutputList \\n\")\n  cat(\"====================================================\\n\")\n  ## make checkbox Review?\n  ## tbl.AMLPaidData$amlPaidCheckBoxInputs <- lapply(1:nrow(tbl.AMLPaidData), function(j){paste0(tags$div(checkboxInput(paste0(\"paidCheckbox_input_\", j), label = tags$h6(\"Reviewed by\"), value = 0)))})\n  \n  ## add rowCount which is a row number.  Use this number on mutate to create the checkboxes and signature fields\n  tbl.AMLPaidData$rowCount <-  1:nrow(tbl.AMLPaidData)\n  \n  # tags$style(type=\"text/css\", \"input.shiny-bound-input { font-size:20px; height:35px;}\")\n  \n  tbl.AMLPaidData <- tbl.AMLPaidData %>% rowwise() %>% \n    mutate(reviewCompleted = paste0(tags$div(checkboxInput(paste0(\"paidCheckbox_input_\",rowCount), label=\"\", value = FALSE, width = 25), style = \"float:right\")),\n           completedBy =paste0(textInput(paste0(\"paidTextInputSignature_\",rowCount), label = \"\",value=shinyUser, width='250px')))\n  \n  # my_list_1 <- lapply(1:nrow(tbl.AMLPaidData), function(i) {\n  #   \n  #   # plotname <- paste(\"amlPaid\", i, sep=\"\") \n  #   # output[[paste0('amlPaid', i)]] <- renderUI({\n  #   outputItem <- renderUI({\n  #     list(\n  #       tags$div(tags$h3(\"AML Free Check Id: \",tags$span(tags$b(tbl.AMLPaidData$id[i]),style='color:black')),\n  #                tags$p(tags$b(tags$span('User Id: ',style='color:black'),tbl.AMLPaidData$userId[[i]],\n  #                              tags$span(' First Name: ',style='color:black'), tbl.AMLPaidData$firstName[[i]],\n  #                              tags$span(' Last Name: ',style='color:black'), tbl.AMLPaidData$lastName[[i]],\n  #                              style = 'color:blue')) ## Use span to change color of labels\n  #                , tags$blockquote(\"Search Query: \",HTML(tbl.AMLPaidData$searchQuery[[i]]))\n  #       ),\n  #       tags$h4(\"Details\"),\n  #       tags$h4('AML Free List Code: ',tags$b(HTML(tbl.AMLPaidData$amlFreeListCode[i]))),\n  #       tags$h4(\"Likelihood:\", HTML(tbl.AMLPaidData$likelihood[i])),\n  #       tags$h4(\"Further Information: \"), \n  #       tags$p(tbl.AMLPaidData$matchedText[i]),\n  #       tags$h4(\"External Sources: \"), \n  #       HTML(tbl.AMLPaidData$matchedUrl[i]),\n  #       hr()\n  #     )\n  #   })\n  # })\n  # do.call(tagList, my_list_1)\n  # return(my_list_1)\n  ls.subList <- lapply(1, function(i) {\n    outputItem <- renderUI({\n      list(\n        tags$div(\n          tags$h4(\"AML Free Seach For: \"),\n          tags$p(tags$b(tags$span(' First Name: ',style='color:black'), tbl.AMLPaidData$searchFirstNames[[i]],\n                        tags$span(' Last Name: ',style='color:black'), tbl.AMLPaidData$searchLastNames[[i]],\n                        style = 'color:blue')) ## Use span to change color of labels\n          , tags$blockquote(\"Search Query: \", HTML(tbl.AMLPaidData$searchQuery[[i]]))), \n        DT::renderDataTable({\n          DT::datatable(tbl.AMLPaidData[,c(\"likelihood\",\"amlFreeListCode\",\"id\",'reviewCompleted','completedBy')],class='compact stripe', escape = FALSE, rownames = FALSE,\n                        options = list(\n                          #order = list(list(2, 'desc'), list(4, 'desc')),\n                          # pageLength=nrow(AMLFreeBusinessData()), # needs to match nrow on the table, currently with 4 addins its 24\n                          # autoWidth = TRUE,\n                          bLengthChange=0, # show/hide records per page dropdown\n                          bFilter=0,       # global search box on/off\n                          bInfo=0,         #removes # of reccords filter bottom left\n                          bPaginate=0,      #removes the page select bottom right\n                          columnDefs = list(list(width = 100, targets = c(0, 1, 2, 3)),\n                                            list(className=\"dt-center\", targets=c(0))\n                          )\n                        )\n          ) \n        }),\n        tags$h4(\"Details\"),\n        lapply(  1:nrow(tbl.AMLPaidData), function(j){\n          list(\n            tags$h4('AML Free List Code: ',tags$b(HTML(tbl.AMLPaidData$amlFreeListCode[j]))),\n            tags$h5(\"AML Free Check Id: \",tags$span(tags$b(HTML(tbl.AMLPaidData$id[j])),style='color:black')),\n            tags$h5(\"Likelihood:\", HTML(tbl.AMLPaidData$likelihood[j])),\n            tags$h5(\"Key Data: \"),\n            tags$p(HTML(tbl.AMLPaidData$amlKeyData[j])),\n            tags$h5(\"Further Information: \"), \n            tags$p(tbl.AMLPaidData$matchedText[j]),\n            tags$h5(\"External Sources: \"), \n            HTML(tbl.AMLPaidData$matchedUrl[j])\n          )\n        }),\n        hr()\n      )\n    })\n  })\n  do.call(tagList, ls.subList)\n  return(ls.subList) \n}\n##########################################################################################################################################\n##########################################################################################################################################\n\n\n##########################################################################################################################################\n##########################################################################################################################################\n##########################################################################################################################################\n\n\nget.searchAMLPaidData <- function(tbl.apiKYCPersonSearch){\n  require(shiny)\n  require(dplyr)\n  cat(\"++++++++++++++++++++++++++++++++++++++++++++++++\\n\")\n  cat(\"called get.searchAMLPaidData \\n\")\n  \n  tbl.searchAMLPaidData <- tbl.apiKYCPersonSearch[which(tbl.apiKYCPersonSearch$source == 'worldcheck'),]\n  cat(\"++++++++++++++++++++++++++++++++++++++++++++++++\\n\")\n  cat(\"Print tbl.searchAMLPaidData\\n\")\n  print(tbl.searchAMLPaidData)\n  ## if no paid data return null\n  if (length(tbl.searchAMLPaidData$rawData)>0){\n    ### WorldCheck Column Names\n    cat('======================Inside tbl.searchAMLPaidData$rawData >0===============')\n    worldCheckColumnNames <- c(\"UID\",\n                               \"LAST NAME\",\n                               \"FIRST NAME\",\n                               \"ALIASES\",\n                               \"ALTERNATIVE SPELLING\",\n                               \"CATEGORY\",\n                               \"TITLE\",\n                               \"SUB-CATEGORY\",\n                               \"POSITION\",\n                               \"AGE\",\n                               \"DOB\",\n                               \"PLACE OF BIRTH\",\n                               \"DECEASED\",\n                               \"PASSPORTS\",\n                               \"SSN\",\n                               \"LOCATIONS\",\n                               \"COUNTRIES\",\n                               \"COMPANIES\",\n                               \"E/I\",\n                               \"LINKED TO\",\n                               \"FURTHER INFORMATION\",\n                               \"KEYWORDS\",\n                               \"EXTERNAL SOURCES\",\n                               \"ENTERED\",\n                               \"UPDATED\",\n                               \"EDITOR\",\n                               \"AGE DATE (AS OF DATE)\")\n    \n    \n    ## ok first lets breakout FURTHER INFORMATION, EXTERNAL SOURCES and KEYWORDS into table elements.\n    ## add Key words, likelihood\n    ## paste the rest into Caption text\n    ## combine together\n    ls.amlPaidRawData <- lapply(lapply(tbl.searchAMLPaidData$rawData, function(x){strsplit(x, '\\t')}), function(x){lapply(x,function(y){setNames(y,worldCheckColumnNames[1:length(y)])})})\n    \n    \n    \n    ### EXTERNAL SOURCES\n    ## name it right\n    externalSources <-  sapply(sapply(ls.amlPaidRawData, function(i){sapply(i, function(j){strsplit(j[[\"EXTERNAL SOURCES\"]], ' ')})}),function(y){paste0(sapply(y, function(x){paste0(tags$a(x, href=x, target=\"_blank\"))}),collapse = ', ')})\n    \n    ### FURTHER INFORMATION\n    ## name it right\n    furtherInformation <-  sapply(ls.amlPaidRawData, function(i){sapply(i, function(j){j[[\"FURTHER INFORMATION\"]]})})\n    \n    ### KEYWORDS\n    ## name it right\n    \n    keywords <- gsub('~',', ',toupper(sapply(ls.amlPaidRawData, function(i){sapply(i, function(j){j[[\"KEYWORDS\"]]})})))\n    \n    \n    ### Likelihood\n    \n    likelihood <- sapply(tbl.searchAMLPaidData$likelihood, \n                         function(likelihood){ ifelse(likelihood < 0.25, paste0(tags$span(likelihood,style=\"color:green\")), \n                                                      ifelse(likelihood < 0.50, tags$span(paste0(likelihood),style=\"color:gold\"),\n                                                             tags$span(paste0(likelihood),style=\"color:red\")))})\n    \n    ### UID\n    ##\n    # toupper(tbl.apiKYCPersonSearch$id)\n    ## sapply(ls.amlPaidRawData, function(i){sapply(i, function(j){j[[\"UID\"]]})})\n    \n    ## add in search query from call \n    # [[20]]\n    # [1] \"uuid:b8c920b3-6827-4f84-85b2-c71518b93013, countries1:be, countries2:rw, cities:202061, companyNames:agfa healthcare\"\n    # searchQuery <- paste(names(uuidApiKYC$aml$paid$profile$indexFoundData$searchQuery),\n    #                      unlist(uuidApiKYC$aml$paid$profile$indexFoundData$searchQuery), sep = ':',collapse = ', ')\n    ## paste together everything but what is published in table form,  The idea here is to do firstNames: bill, Joe; LastNames: murray, pesci \n    # searchQuery <- paste(sapply(names(sapply(uuidApiKYC$aml$paid$profile$indexFoundData$searchQuery, function(x){ paste(x,collapse = ', ')})), function(x){paste(tags$span(x,style = 'font-weight:bold'))}), sapply(uuidApiKYC$aml$paid$profile$indexFoundData$searchQuery, function(x){ paste(x,collapse = ', ')}), sep = ': ',collapse = '; ')\n    \n    \n    \n    ## select fields for keyData caption from worldcheck master list\n    captionNames <- c(\"UID\",\"LAST NAME\",\"FIRST NAME\",\"ALIASES\",\"ALTERNATIVE SPELLING\",\"CATEGORY\",\"TITLE\",\"SUB-CATEGORY\",\"POSITION\",\n                      \"AGE\",\"DOB\",\"PLACE OF BIRTH\",\"DECEASED\",\"PASSPORTS\",\"SSN\",\"LOCATIONS\",\"COUNTRIES\",\"COMPANIES\",\"E/I\",\"LINKED TO\",\n                      \"ENTERED\",\"AGE DATE (AS OF DATE)\")\n    \n    # paste(names(unlist(ls.amlPaidRawData[[1]][[1]][captionNames])),unlist(ls.amlPaidRawData[[1]][[1]][captionNames]), sep = ':',collapse = ', ')\n    \n    ## make keyData\n    keyData <- sapply(ls.amlPaidRawData, function(i){sapply(i, function(j){paste(names(unlist(j[captionNames])),unlist(j[captionNames]), sep = ':',collapse = ', ')})})\n    \n    \n    \n    tbl.searchAMLPaidData$keyData <- keyData\n    tbl.searchAMLPaidData$keywords <- keywords\n    tbl.searchAMLPaidData$likelihood <- likelihood\n    tbl.searchAMLPaidData$furtherInformation <- furtherInformation\n    tbl.searchAMLPaidData$externalSources <- externalSources\n    \n    ## user ID\n    # tbl.amlPaidProfile$userId <- uuidApiKYC$aml$paid$profile$identity$sourceUser\n    \n    ## user first name, last name\n    # tbl.amlPaidProfile$firstName <- uuidApiKYC$profile$firstName\n    # tbl.amlPaidProfile$lastName <- uuidApiKYC$profile$lastName\n    # \n    ## return table\n    return(tbl.searchAMLPaidData)\n  }\n  else {\n    ## if no rows in found Ids return No Match Table\n    cat('No Rows Found In searchAMLPaidData for search:','\\n')\n    ##  \n    \n    tbl.apiKYCPersonSearch$id <-  paste0(tags$span(\"No Match\",style=\"color:green\"))\n    tbl.apiKYCPersonSearch$keyData <- ' '\n    tbl.apiKYCPersonSearch$keywords <- paste0(tags$span(\"No Match\",style=\"color:green\"))\n    tbl.apiKYCPersonSearch$likelihood <- ' '\n    tbl.apiKYCPersonSearch$furtherInformation <- ' '\n    tbl.apiKYCPersonSearch$externalSources <- ' '\n    \n    return(tbl.apiKYCPersonSearch)\n  }\n  \n  \n}\n\n##########################################################################################################################################\n##########################################################################################################################################\n\n\n##########################################################################################################################################\n##########################################################################################################################################\n##########################################################################################################################################\nget.searchAMLPaidDataOutputList <- function(tbl.apiKYCPersonSearch, amlPaidCheck='false',shinyUser) {\n  require(shiny)\n  ## call get.AMLPaidData\n  tbl.AMLPaidData <- get.searchAMLPaidData(tbl.apiKYCPersonSearch = tbl.apiKYCPersonSearch)\n  \n  ## make checkbox Review?\n  ## tbl.AMLPaidData$amlPaidCheckBoxInputs <- lapply(1:nrow(tbl.AMLPaidData), function(j){paste0(tags$div(checkboxInput(paste0(\"paidCheckbox_input_\", j), label = tags$h6(\"Reviewed by\"), value = 0)))})\n  \n  ## add rowCount which is a row number.  Use this number on mutate to create the checkboxes and signature fields\n  tbl.AMLPaidData$rowCount <-  1:nrow(tbl.AMLPaidData)\n  \n  # tags$style(type=\"text/css\", \"input.shiny-bound-input { font-size:20px; height:35px;}\")\n  \n  tbl.AMLPaidData <- tbl.AMLPaidData %>% rowwise() %>% \n    mutate(reviewCompleted = paste0(tags$div(checkboxInput(paste0(\"paidCheckbox_input_\",rowCount), label=\"\", value = FALSE, width = 25), style = \"float:right\")),\n           completedBy =paste0(textInput(paste0(\"paidTextInputSignature_\",rowCount), label = \"\", value=shinyUser,  width='250px')))\n  # tbl.AMLPaidData$completedBy\n  # tbl.AMLPaidData <- tbl.AMLPaidData %>% rowwise() %>% \n  #   mutate(reviewCompleted = paste0(tags$div(checkboxInput(paste0(\"paidCheckbox_input_\",rowCount), label=\"\", value = FALSE, width = 25), style = \"float:right\")),\n  #          completedBy =paste0(tags$div(textInput(paste0(\"paidTextInputSignature_\",rowCount), label = \"\", width=250),tags$style(type=\"text/css\", paste0(\"#paidTextInputSignature_\",rowCount, \"{ font-size:20px; height:35px;}\")))))\n  # \n  # tbl.AMLPaidData$completedBy\n  # tbl.AMLPaidData <- tbl.AMLPaidData %>% rowwise() %>% \n  #   mutate(amlPaidCheckBoxInputs = paste0(checkboxInput(paste0(\"paidCheckbox_input_\",rowCount), label=\"Reviewed By: \", value = FALSE, width = 150), textInput(paste0(\"paidTextInputSignature_\",rowCount), label = \"\", width=50)))\n  # \n  # tbl.AMLPaidData %>% rowwise() %>% mutate(amlPaidCheckBoxInputs = )\n  cat(\"called get.AMLPaidDataOutputList \\n\")\n  if(amlPaidCheck == 'true'){\n    ls.subList <- lapply(1, function(i) {\n      outputItem <- renderUI({\n        list(\n          tags$div(\n            tags$h4(\"AML Worldcheck Seach For: \"),\n            tags$p(tags$b(tags$span(' First Name: ',style='color:black'), tbl.AMLPaidData$searchFirstNames[[i]],\n                          tags$span(' Last Name: ',style='color:black'), tbl.AMLPaidData$searchLastNames[[i]],\n                          style = 'color:blue')) ## Use span to change color of labels\n            , tags$blockquote(\"Search Query: \", HTML(tbl.AMLPaidData$searchQuery[[i]]))),\n          DT::renderDataTable({\n            DT::datatable(tbl.AMLPaidData[,c(\"likelihood\",\"keywords\",\"id\",'reviewCompleted','completedBy')],class='compact stripe', escape = FALSE, rownames = FALSE,\n                          options = list(\n                            #order = list(list(2, 'desc'), list(4, 'desc')),\n                            # pageLength=nrow(AMLFreeBusinessData()), # needs to match nrow on the table, currently with 4 addins its 24\n                            # autoWidth = TRUE,\n                            bLengthChange=0, # show/hide records per page dropdown\n                            bFilter=0,       # global search box on/off\n                            bInfo=0,         #removes # of reccords filter bottom left\n                            bPaginate=0,      #removes the page select bottom right\n                            columnDefs = list(list(width = 100, targets = c(0, 1, 2, 3)),\n                                              list(className=\"dt-center\", targets=c(0))\n                            )\n                          )\n            ) \n          }),\n          tags$h4(\"Details\"),\n          lapply(  1:nrow(tbl.AMLPaidData), function(j){\n            list(\n              # checkboxInput(paste0(\"checkbox_input_\", j), label = tags$h6(\"Reviewed\", tags$span(tags$b(HTML(tbl.AMLPaidData$id[j])),style='color:black')), value = 0),\n              tags$h4(\"AML Worldcheck Id: \",tags$span(tags$b(HTML(tbl.AMLPaidData$id[j])),style='color:black')),\n              tags$h4('Keywords: ',tags$b(HTML(tbl.AMLPaidData$keywords[j]))),\n              tags$h5(\"Likelihood:\", HTML(tbl.AMLPaidData$likelihood[j])),\n              tags$h5(\"Key Data: \"),\n              tags$p(HTML(tbl.AMLPaidData$keyData[j])),\n              tags$h5(\"Further Information: \"), \n              tags$p(tbl.AMLPaidData$furtherInformation[j]),\n              tags$h5(\"External Sources: \"), \n              HTML(tbl.AMLPaidData$externalSources[j])\n            )\n          }),\n          hr()\n        )\n      })\n    })\n    do.call(tagList, ls.subList)\n    return(ls.subList) \n  } else{\n    tags$p(\"Worldcheck Not Selected\")  \n  }\n}\n##########################################################################################################################################\n##########################################################################################################################################\n\n\n##############################################################################################################################################\n##############################################################################################################################################\n##############################################################################################################################################\nget.apiKYCBusinesSearchCall <- function(kserv='', amlPaidCheck='false', companyNames='', \n                                        contacts='',\n                                        cities='',\n                                        countries='',\n                                        phones='',\n                                        aliases='',\n                                        regions='') {  \n  require(httr)\n  require(jsonlite)\n  # curl -X GET --header 'Accept: application/json' 'http://staging.kyc-api.kountable.com/v0/admin/users'\n  cat(\" Called get.apiKYCBusinesSearchCall \\n Search Query - \\n\",\n      ' companyNames: ', companyNames,\n      '\\n contacts: ', contacts,\n      '\\n cities: ', cities,\n      '\\n countries: ', countries,\n      '\\n phones: ', phones,\n      '\\n aliases: ', aliases,\n      '\\n regions: ', regions, \"\\n amlPaidCheck: \",amlPaidCheck,\"\\n\",sep = \"\")\n  \n  \n  \n  # this Prod website bearer token call is\n  # curl -X GET --header 'Accept: application/json' 'http://kyc-api.kountable.com/v0/admin/users'\n  # needs user name and password authentication 'admin', 'RzpvnDXv8fVjpu3h'\n  getAuthenticationToken <- GET(paste('http://',kserv,'kyc-api.kountable.com/v0/admin/users', sep = \"\"),\n                                authenticate('admin', 'RzpvnDXv8fVjpu3h', type = \"basic\"),\n                                add_headers(\n                                  \"Accept\" = \"application/json\"))         \n  # the content returns a group of token calls in Json format, but first convert from raw to Char format\n  AuthenticationTokenGroup <- fromJSON( rawToChar(getAuthenticationToken$content))\n  # for the 'Prod' server look for the person permissions token find the location index with grep \n  personAuthenticationToken <- AuthenticationTokenGroup$token[ grep('person',AuthenticationTokenGroup$description)]\n  #getAuthenticationToken$status_code\n  cat(\"--> BearerToken  on Prod-->\", ' TimeStamp: ',strftime(Sys.time(),\"%Y-%m-%d %H:%M:%S\"),\"\\n\", sep = \"\")\n  # exit if the condition is met\n  # if (grepl(\"Resource representation is only available with these Content-Types:\\ntext/plain; charset=UTF-8\\ntext/plain\", \n  #           rawToChar(getAuthenticationToken$content)) == FALSE) {break} \n  # \n  \n  \n  \n  ## Part 2 call the data using the bearer token from part one, each server has a different token name to use\n  \n  bearerToken <- personAuthenticationToken\n  ########### build \n  ## curl -X GET --header 'Accept: application/json' --header 'KYC-Bearer-Token: oJLXXlf4Q24FZgCnYeYR3ps2oIXtVqzZ' \n  ## 'http://kyc-api.kountable.com/v0/businesses/aml\n  ## ?amlPaidCheck=false\n  ## &companyNames=Biopharmacia%20limited\n  ## &contacts=bill%20bradley\n  ## &cities=louisville\n  ## &countries=Rwanda\n  ## &phones=555\n  ## &aliases=biomurder\n  ## &regions=kigali'\n  cat('We Got Here Joe \\n')\n  cat(paste0('http://',kserv,'kyc-api.kountable.com/v0/businesses/aml?amlPaidCheck=',amlPaidCheck,\n             '&companyNames=',URLencode(companyNames, reserved = TRUE),\n             '&contacts=',URLencode(contacts, reserved = TRUE),\n             '&cities=', URLencode(cities, reserved = TRUE),\n             '&countries=',URLencode(countries, reserved = TRUE),\n             '&phones=',URLencode(phones, reserved = TRUE),\n             '&aliases=',URLencode(aliases, reserved = TRUE),\n             '&regions=',URLencode(regions, reserved = TRUE)),'\\n')\n  cat('+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++\\n')\n  \n  apiKYCget <- GET(paste0('http://',kserv,'kyc-api.kountable.com/v0/businesses/aml?amlPaidCheck=',amlPaidCheck, \n                          '&companyNames=',URLencode(companyNames, reserved = TRUE),\n                          '&contacts=',URLencode(contacts, reserved = TRUE),\n                          '&cities=', URLencode(cities, reserved = TRUE),\n                          '&countries=',URLencode(countries, reserved = TRUE),\n                          '&phones=',URLencode(phones, reserved = TRUE),\n                          '&aliases=',URLencode(aliases, reserved = TRUE),\n                          '&regions=',URLencode(regions, reserved = TRUE)),\n                   add_headers(\n                     \"Accept\" = \"application/json\",\n                     \"KYC-Bearer-Token\" = bearerToken\n                   ))\n  ## How many call attempts\n  cat(\"--> get.apiKYCBusinesSearchCall attempts-->\", ' Server--> ',kserv, ' TimeStamp: ',strftime(Sys.time(),\"%Y-%m-%d %H:%M:%S\"),\"\\n\", sep=\"\")\n  \n  \n  \n  x <- fromJSON( rawToChar(apiKYCget$content), simplifyVector = TRUE, simplifyMatrix = TRUE, simplifyDataFrame = TRUE)\n  \n  print(x)\n  \n  ## if nothing is returned i.e. list() then create 'empty' table with included search tearms\n  if (length(x) > 0 ){\n    cat(\"______length > 0__________________\\n\")\n    ## clean up the return call\n    tbl.apiKYCBusinessSearch <- tbl_df(x)\n    \n    ## To check existence ifelse(\"var2\" %in% names(df), var2,NA)) \n    ## unlist, paste0 and collapse on ',' turns \"joe\" \"smith\" into \"joe, smith\"\n    ## age = ifelse(\"age\" %in% colnames(tbl.apiKYCBusinessSearch), paste0(unlist( age), collapse = ', '),' '),\n    tbl.apiKYCBusinessSearch <- tbl.apiKYCBusinessSearch %>% rowwise() %>% \n      mutate(companyNames = paste0(unlist( companyNames), collapse = ', '),\n             countries = paste0(unlist( countries), collapse = ', '),\n             regions = paste0(unlist( regions), collapse = ', '),\n             cities = paste0(unlist( cities), collapse = ', '),\n             aliases = paste0(unlist( aliases), collapse = ', '))\n    \n    \n    \n    ## add search query back in\n    # 'companyNames'\n    # 'contacts'\n    # 'cities'\n    # 'countries'\n    # 'phones'\n    # 'aliases'\n    # 'regions'\n    \n    searchQuery <- paste0(\"Company Names:\",\tcompanyNames,\t\n                          \"; Contacts:\",\tcontacts,\t\n                          \"; Cities:\",\tcities,\t\n                          \"; Countries:\",\t\tcountries,\n                          \"; Phones:\",\tphones,\t\n                          \"; Aliases:\",\taliases,\t\n                          \"; Regions:\",\tregions)\n    tbl.apiKYCBusinessSearch$searchQuery <- searchQuery  \n    tbl.apiKYCBusinessSearch$searchCompanyNames <- companyNames\n    tbl.apiKYCBusinessSearch$searchContacts <- contacts\n    tbl.apiKYCBusinessSearch$searchCities <- cities\n    tbl.apiKYCBusinessSearch$searchCountries <- countries\n    tbl.apiKYCBusinessSearch$searchPhones <- phones\n    tbl.apiKYCBusinessSearch$searchAliases <- aliases\n    tbl.apiKYCBusinessSearch$searchRegions <- regions\n    \n    ## select fields for keyData caption from worldcheck master list\n    captionNames <- c(\"companyNames\", \"countries\", \"regions\", \"cities\", \"aliases\")\n    \n    ## make amlKeyData which combines all of the fields returned by the apiKYCBusinessSearchCall\n    amlKeyData <- sapply(1:nrow(tbl.apiKYCBusinessSearch), function(i){paste(names(unlist(tbl.apiKYCBusinessSearch[i,captionNames])),unlist(tbl.apiKYCBusinessSearch[i,captionNames]), sep = ':',collapse = ', ')})\n    tbl.apiKYCBusinessSearch$amlKeyData <- amlKeyData\n    return(tbl.apiKYCBusinessSearch) \n  } else{\n    \n    tbl.apiKYCBusinessSearch <- data_frame(id=' ',companyNames= ' ',likelihood= ' ',source= ' ',countries= ' ',rawData= ' ',regions= ' ',cities= ' ',\n                                           aliases= ' ')\n    \n    ## add search query back in\n    searchQuery <- paste0(\"Company Names:\",\tcompanyNames,\t\n                          \"; Contacts:\",\tcontacts,\t\n                          \"; Cities:\",\tcities,\t\n                          \"; Countries:\",\t\tcountries,\n                          \"; Phones:\",\tphones,\t\n                          \"; Aliases:\",\taliases,\t\n                          \"; Regions:\",\tregions)\n    tbl.apiKYCBusinessSearch$searchQuery <- searchQuery  \n    tbl.apiKYCBusinessSearch$searchCompanyNames <- companyNames\n    tbl.apiKYCBusinessSearch$searchContacts <- contacts\n    tbl.apiKYCBusinessSearch$searchCities <- cities\n    tbl.apiKYCBusinessSearch$searchCountries <- countries\n    tbl.apiKYCBusinessSearch$searchPhones <- phones\n    tbl.apiKYCBusinessSearch$searchAliases <- aliases\n    tbl.apiKYCBusinessSearch$searchRegions <- regions\n    \n    captionNames <- c(\"companyNames\", \"countries\", \"regions\", \"cities\", \"aliases\")\n    \n    ## make amlKeyData which combines all of the fields returned by the apiKYCBusinessSearchCall\n    amlKeyData <- sapply(1:nrow(tbl.apiKYCBusinessSearch), function(i){paste(names(unlist(tbl.apiKYCBusinessSearch[i,captionNames])),unlist(tbl.apiKYCBusinessSearch[i,captionNames]), sep = ':',collapse = ', ')})\n    tbl.apiKYCBusinessSearch$amlKeyData <- amlKeyData\n    return(tbl.apiKYCBusinessSearch)   \n  }\n  \n  \n}\n##############################################################################################################################################\n##############################################################################################################################################\n\n##############################################################################################################################################\n##############################################################################################################################################\n##############################################################################################################################################\n\nget.searchAMLBusinessFreeData <- function(tbl.apiKYCBusinessSearch){\n  ## Frank AML FREE\n  require(dplyr)\n  require(shiny)\n  \n  cat(\"---------------------------------------------------------------------\\n\")\n  cat(\"inside get.searchAMLBusinessFreeData\\n\")\n  tbl.foundIDs <- tbl.apiKYCBusinessSearch[which(tbl.apiKYCBusinessSearch$source == 'freecheck'),]\n  cat(\"---------------------------------------------------------------------\\n\")\n  cat(\"print tbl.foundIDs --get.searchAMLBusinessFreeData\\n\")\n  print(tbl.foundIDs)\n  \n  \n  ## if no Frank free aml data then \n  if (nrow(tbl.foundIDs) > 0) {\n    tbl.foundIDs <- tbl.foundIDs %>% \n      mutate(amlFreeListCode = toupper(gsub('([^_]*)_(.*)','\\\\1',id)),\n             matchedUrl = ifelse(regexec('http',rawData)==1, gsub('(http.*?)(\\t.*)','\\\\1',rawData), \"no Url\"),\n             matchedText = gsub('\\\\)','', gsub('List\\\\(','', gsub('\\t','; ', gsub('(http.*?)(\\t.*?)(.*)','\\\\3', rawData)))))\n    \n    ## url search link for adborg\n    ## http://lnadbg4.adb.org/oga0009p.nsf/sancALL1P?SearchView&Query=grasco%20company&Count=30\n    tbl.foundIDs <- tbl.foundIDs %>% rowwise() %>% \n      mutate(matchedUrl = ifelse(amlFreeListCode == 'ADBORG', \n                                 paste0('http://lnadbg4.adb.org/oga0009p.nsf/sancALL1P?SearchView&Query=',\n                                        URLencode(companyNames, reserved = TRUE)), matchedUrl))\n    \n    ## build HTML tags for Shiny DT table\n    ## color likelihood \n    ## Add hyperlinks to matchedUrl\n    tbl.foundIDs <- tbl.foundIDs %>% rowwise() %>% \n      mutate(likelihood = ifelse(likelihood < 0.25, paste0(tags$span(likelihood,style=\"color:green\")), \n                                 ifelse(likelihood < 0.50, paste0(tags$span(likelihood,style=\"color:gold\")),\n                                        paste0(tags$span(likelihood,style=\"color:red\")))),\n             matchedUrl = paste0(tags$a(paste0(matchedUrl), href = matchedUrl,target='_blank')))\n    \n    \n    \n    return(tbl.foundIDs)\n    \n    \n  } else {\n    ## if no rows in found Ids return No Match Table\n    cat('_____________________________\\n')\n    cat('No Rows Found In searchAMLBusinessFreeTable\\n')\n    cat('_____________________________\\n')\n    \n    # amlKYCSearchFields <- c(\"searchQuery\",\"searchFirstNames\",\"searchLastNames\",\"searchEmails\",\"searchRegions\",\"searchCountries\",\"searchPhones\",\"searchBirthDays\",\"searchBirthMonths\",\"searchBirthYears\",\"searchNickName\",\"amlKeyData\") \n    # tbl.foundIDs <-  data_frame(amlFreeListCode = paste0(tags$span(\"No Match\",style=\"color:green\")),likelihood = ' ',matchedText = ' ', matchedUrl = ' ', id = ' ', tbl.apiKYCPersonSearch[,amlKYCSearchFields] )\n    tbl.apiKYCBusinessSearch <- tbl.apiKYCBusinessSearch[1,]\n    tbl.apiKYCBusinessSearch$amlFreeListCode <- paste0(tags$span(\"No Match\",style=\"color:green\"))\n    tbl.apiKYCBusinessSearch$likelihood <-  ' '\n    tbl.apiKYCBusinessSearch$matchedText <-  ' '\n    tbl.apiKYCBusinessSearch$matchedUrl <-  ' '\n    tbl.apiKYCBusinessSearch$id <-  paste0(tags$span(\"No Match\",style=\"color:green\"))\n    return(tbl.apiKYCBusinessSearch)}\n}\n##############################################################################################################################################\n##############################################################################################################################################\n\n##########################################################################################################################################\n##########################################################################################################################################\n##########################################################################################################################################\nget.searchAMLBusinessFreeDataOutputList <- function(tbl.apiKYCBusinessSearch, shinyUser) {\n  require(shiny)\n  ## call get.AMLPaidData\n  tbl.AMLPaidData <- get.searchAMLBusinessFreeData(tbl.apiKYCBusinessSearch = tbl.apiKYCBusinessSearch)\n  cat(\"====================================================\\n\")\n  cat(\"called get.searchAMLBusinessFreeDataOutputList \\n\")\n  cat(\"====================================================\\n\")\n  ## make checkbox Review?\n  ## tbl.AMLPaidData$amlPaidCheckBoxInputs <- lapply(1:nrow(tbl.AMLPaidData), function(j){paste0(tags$div(checkboxInput(paste0(\"paidCheckbox_input_\", j), label = tags$h6(\"Reviewed by\"), value = 0)))})\n  \n  ## add rowCount which is a row number.  Use this number on mutate to create the checkboxes and signature fields\n  tbl.AMLPaidData$rowCount <-  1:nrow(tbl.AMLPaidData)\n  \n  # tags$style(type=\"text/css\", \"input.shiny-bound-input { font-size:20px; height:35px;}\")\n  \n  tbl.AMLPaidData <- tbl.AMLPaidData %>% rowwise() %>% \n    mutate(reviewCompleted = paste0(tags$div(checkboxInput(paste0(\"paidCheckbox_input_\",rowCount), label=\"\", value = FALSE, width = 25), style = \"float:right\")),\n           completedBy =paste0(textInput(paste0(\"paidTextInputSignature_\",rowCount), label = \"\", value = shinyUser, width='250px')))\n  \n  ls.subList <- lapply(1, function(i) {\n    outputItem <- renderUI({\n      list(\n        tags$div(\n          tags$h4(\"AML Business Free Seach For: \"),\n          tags$p(tags$b(tags$span(' Company Names: ',style='color:black'), tbl.AMLPaidData$searchCompanyNames[[i]],\n                        style = 'color:blue')) ## Use span to change color of labels\n          , tags$blockquote(\"Search Query: \", HTML(tbl.AMLPaidData$searchQuery[[i]]))),\n        DT::renderDataTable({\n          DT::datatable(tbl.AMLPaidData[,c(\"likelihood\",\"amlFreeListCode\",\"id\",'reviewCompleted','completedBy')],class='compact stripe', escape = FALSE, rownames = FALSE,\n                        options = list(\n                          #order = list(list(2, 'desc'), list(4, 'desc')),\n                          # pageLength=nrow(AMLFreeBusinessData()), # needs to match nrow on the table, currently with 4 addins its 24\n                          # autoWidth = TRUE,\n                          bLengthChange=0, # show/hide records per page dropdown\n                          bFilter=0,       # global search box on/off\n                          bInfo=0,         #removes # of reccords filter bottom left\n                          bPaginate=0,      #removes the page select bottom right\n                          columnDefs = list(list(width = 100, targets = c(0, 1, 2, 3)),\n                                            list(className=\"dt-center\", targets=c(0))\n                          )\n                        )\n          ) \n        }),\n        tags$h4(\"Details\"),\n        lapply(  1:nrow(tbl.AMLPaidData), function(j){\n          list(\n            tags$h4('AML Free List Code: ',tags$b(HTML(tbl.AMLPaidData$amlFreeListCode[j]))),\n            tags$h5(\"AML Free Check Id: \",tags$span(tags$b(HTML(tbl.AMLPaidData$id[j])),style='color:black')),\n            tags$h5(\"Likelihood:\", HTML(tbl.AMLPaidData$likelihood[j])),\n            tags$h5(\"Key Data: \"),\n            tags$p(HTML(tbl.AMLPaidData$amlKeyData[j])),\n            tags$h5(\"Further Information: \"), \n            tags$p(tbl.AMLPaidData$matchedText[j]),\n            tags$h5(\"External Sources: \"), \n            HTML(tbl.AMLPaidData$matchedUrl[j])\n          )\n        }),\n        hr()\n      )\n    })\n  })\n  do.call(tagList, ls.subList)\n  return(ls.subList) \n}\n\n##########################################################################################################################################\n##########################################################################################################################################\n\n##########################################################################################################################################\n##########################################################################################################################################\n##########################################################################################################################################\n\n\nget.searchAMLBusinessPaidData <- function(tbl.apiKYCBusinessSearch){\n  require(shiny)\n  require(dplyr)\n  cat(\"++++++++++++++++++++++++++++++++++++++++++++++++\\n\")\n  cat(\"called get.searchAMLBusinessPaidData \\n\")\n  \n  tbl.searchAMLPaidData <- tbl.apiKYCBusinessSearch[which(tbl.apiKYCBusinessSearch$source == 'worldcheck'),]\n  cat(\"++++++++++++++++++++++++++++++++++++++++++++++++\\n\")\n  cat(\"Print tbl.searchAMLBusinessPaidData\\n\")\n  print(tbl.searchAMLPaidData)\n  ## if no paid data return null\n  if (length(tbl.searchAMLPaidData$rawData)>0){\n    ### WorldCheck Column Names\n    cat('======================Inside tbl.searchAMLBusinessPaidData$rawData >0===============')\n    worldCheckColumnNames <- c(\"UID\",\n                               \"LAST NAME\",\n                               \"FIRST NAME\",\n                               \"ALIASES\",\n                               \"ALTERNATIVE SPELLING\",\n                               \"CATEGORY\",\n                               \"TITLE\",\n                               \"SUB-CATEGORY\",\n                               \"POSITION\",\n                               \"AGE\",\n                               \"DOB\",\n                               \"PLACE OF BIRTH\",\n                               \"DECEASED\",\n                               \"PASSPORTS\",\n                               \"SSN\",\n                               \"LOCATIONS\",\n                               \"COUNTRIES\",\n                               \"COMPANIES\",\n                               \"E/I\",\n                               \"LINKED TO\",\n                               \"FURTHER INFORMATION\",\n                               \"KEYWORDS\",\n                               \"EXTERNAL SOURCES\",\n                               \"ENTERED\",\n                               \"UPDATED\",\n                               \"EDITOR\",\n                               \"AGE DATE (AS OF DATE)\")\n    \n    \n    ## ok first lets breakout FURTHER INFORMATION, EXTERNAL SOURCES and KEYWORDS into table elements.\n    ## add Key words, likelihood\n    ## paste the rest into Caption text\n    ## combine together\n    ls.amlPaidRawData <- lapply(lapply(tbl.searchAMLPaidData$rawData, function(x){strsplit(x, '\\t')}), function(x){lapply(x,function(y){setNames(y,worldCheckColumnNames[1:length(y)])})})\n    \n    \n    \n    ### EXTERNAL SOURCES\n    ## name it right\n    externalSources <-  sapply(sapply(ls.amlPaidRawData, function(i){sapply(i, function(j){strsplit(j[[\"EXTERNAL SOURCES\"]], ' ')})}),function(y){paste0(sapply(y, function(x){paste0(tags$a(x, href=x, target=\"_blank\"))}),collapse = ', ')})\n    \n    ### FURTHER INFORMATION\n    ## name it right\n    furtherInformation <-  sapply(ls.amlPaidRawData, function(i){sapply(i, function(j){j[[\"FURTHER INFORMATION\"]]})})\n    \n    ### KEYWORDS\n    ## name it right\n    \n    keywords <- gsub('~',', ',toupper(sapply(ls.amlPaidRawData, function(i){sapply(i, function(j){j[[\"KEYWORDS\"]]})})))\n    \n    \n    ### Likelihood\n    \n    likelihood <- sapply(tbl.searchAMLPaidData$likelihood, \n                         function(likelihood){ ifelse(likelihood < 0.25, paste0(tags$span(likelihood,style=\"color:green\")), \n                                                      ifelse(likelihood < 0.50, paste0(tags$span(likelihood,style=\"color:gold\")),\n                                                             paste0(tags$span(likelihood,style=\"color:red\"))))})\n    \n    ### UID\n    ##\n    # toupper(tbl.apiKYCPersonSearch$id)\n    ## sapply(ls.amlPaidRawData, function(i){sapply(i, function(j){j[[\"UID\"]]})})\n    \n    ## add in search query from call \n    # [[20]]\n    # [1] \"uuid:b8c920b3-6827-4f84-85b2-c71518b93013, countries1:be, countries2:rw, cities:202061, companyNames:agfa healthcare\"\n    # searchQuery <- paste(names(uuidApiKYC$aml$paid$profile$indexFoundData$searchQuery),\n    #                      unlist(uuidApiKYC$aml$paid$profile$indexFoundData$searchQuery), sep = ':',collapse = ', ')\n    ## paste together everything but what is published in table form,  The idea here is to do firstNames: bill, Joe; LastNames: murray, pesci \n    # searchQuery <- paste(sapply(names(sapply(uuidApiKYC$aml$paid$profile$indexFoundData$searchQuery, function(x){ paste(x,collapse = ', ')})), function(x){paste(tags$span(x,style = 'font-weight:bold'))}), sapply(uuidApiKYC$aml$paid$profile$indexFoundData$searchQuery, function(x){ paste(x,collapse = ', ')}), sep = ': ',collapse = '; ')\n    \n    \n    \n    ## select fields for keyData caption from worldcheck master list\n    captionNames <- c(\"UID\",\"LAST NAME\",\"FIRST NAME\",\"ALIASES\",\"ALTERNATIVE SPELLING\",\"CATEGORY\",\"TITLE\",\"SUB-CATEGORY\",\"POSITION\",\n                      \"AGE\",\"DOB\",\"PLACE OF BIRTH\",\"DECEASED\",\"PASSPORTS\",\"SSN\",\"LOCATIONS\",\"COUNTRIES\",\"COMPANIES\",\"E/I\",\"LINKED TO\",\n                      \"ENTERED\",\"AGE DATE (AS OF DATE)\")\n    \n    # paste(names(unlist(ls.amlPaidRawData[[1]][[1]][captionNames])),unlist(ls.amlPaidRawData[[1]][[1]][captionNames]), sep = ':',collapse = ', ')\n    \n    ## make keyData\n    keyData <- sapply(ls.amlPaidRawData, function(i){sapply(i, function(j){paste(names(unlist(j[captionNames])),unlist(j[captionNames]), sep = ':',collapse = ', ')})})\n    \n    \n    \n    tbl.searchAMLPaidData$keyData <- keyData\n    tbl.searchAMLPaidData$keywords <- keywords\n    tbl.searchAMLPaidData$likelihood <- likelihood\n    tbl.searchAMLPaidData$furtherInformation <- furtherInformation\n    tbl.searchAMLPaidData$externalSources <- externalSources\n    \n    ## user ID\n    # tbl.amlPaidProfile$userId <- uuidApiKYC$aml$paid$profile$identity$sourceUser\n    \n    ## user first name, last name\n    # tbl.amlPaidProfile$firstName <- uuidApiKYC$profile$firstName\n    # tbl.amlPaidProfile$lastName <- uuidApiKYC$profile$lastName\n    # \n    ## return table\n    return(tbl.searchAMLPaidData)\n  }\n  else {\n    ## if no rows in found Ids return No Match Table\n    cat('No Rows Found In searchAMLBusinessPaidData for search:','\\n')\n    ##  \n    \n    tbl.apiKYCBusinessSearch$id <-  paste0(tags$span(\"No Match\",style=\"color:green\"))\n    tbl.apiKYCBusinessSearch$keyData <- ' '\n    tbl.apiKYCBusinessSearch$keywords <- paste0(tags$span(\"No Match\",style=\"color:green\"))\n    tbl.apiKYCBusinessSearch$likelihood <- ' '\n    tbl.apiKYCBusinessSearch$furtherInformation <- ' '\n    tbl.apiKYCBusinessSearch$externalSources <- ' '\n    \n    return(tbl.apiKYCBusinessSearch)\n  }\n  \n  \n}\n\n##########################################################################################################################################\n##########################################################################################################################################\n\n##########################################################################################################################################\n##########################################################################################################################################\n##########################################################################################################################################\nget.searchAMLBusinessPaidDataOutputList <- function(tbl.apiKYCBusinessSearch, amlPaidCheck='false',shinyUser) {\n  require(shiny)\n  ## call get.AMLPaidData\n  tbl.AMLPaidData <- get.searchAMLBusinessPaidData(tbl.apiKYCBusinessSearch = tbl.apiKYCBusinessSearch)\n  ## make checkbox Review?\n  ## tbl.AMLPaidData$amlPaidCheckBoxInputs <- lapply(1:nrow(tbl.AMLPaidData), function(j){paste0(tags$div(checkboxInput(paste0(\"paidCheckbox_input_\", j), label = tags$h6(\"Reviewed by\"), value = 0)))})\n  \n  ## add rowCount which is a row number.  Use this number on mutate to create the checkboxes and signature fields\n  tbl.AMLPaidData$rowCount <-  1:nrow(tbl.AMLPaidData)\n  \n  # tags$style(type=\"text/css\", \"input.shiny-bound-input { font-size:20px; height:35px;}\")\n  \n  tbl.AMLPaidData <- tbl.AMLPaidData %>% rowwise() %>% \n    mutate(reviewCompleted = paste0(tags$div(checkboxInput(paste0(\"paidCheckbox_input_\",rowCount), label=\"\", value = FALSE, width = 25), style = \"float:right\")),\n           completedBy =paste0(textInput(paste0(\"paidTextInputSignature_\",rowCount), label = \"\", value = shinyUser, width='250px')))\n  \n  cat(\"called get.AMLBusinessPaidDataOutputList \\n\")\n  if (amlPaidCheck == 'true'){\n    ## build list in shiny\n    ls.subList <- lapply(1, function(i) {\n      outputItem <- renderUI({\n        list(\n          tags$div(\n            tags$h4(\"AML Worldcheck Business Seach For: \"),\n            tags$p(tags$b(tags$span(' Company Names: ',style='color:black'), tbl.AMLPaidData$searchCompanyNames[[i]],\n                          style = 'color:blue')) ## Use span to change color of labels\n            , tags$blockquote(\"Search Query: \", HTML(tbl.AMLPaidData$searchQuery[[i]]))),\n          DT::renderDataTable({\n            DT::datatable(tbl.AMLPaidData[,c(\"likelihood\",\"keywords\",\"id\",'reviewCompleted','completedBy')],class='compact stripe', escape = FALSE, rownames = FALSE,\n                          options = list(\n                            #order = list(list(2, 'desc'), list(4, 'desc')),\n                            # pageLength=nrow(AMLFreeBusinessData()), # needs to match nrow on the table, currently with 4 addins its 24\n                            # autoWidth = TRUE,\n                            bLengthChange=0, # show/hide records per page dropdown\n                            bFilter=0,       # global search box on/off\n                            bInfo=0,         #removes # of reccords filter bottom left\n                            bPaginate=0,      #removes the page select bottom right\n                            columnDefs = list(list(width = 100, targets = c(0, 1, 2, 3)),\n                                              list(className=\"dt-center\", targets=c(0))\n                            )\n                          )\n            ) \n          }),\n          tags$h4(\"Details\"),\n          lapply(  1:nrow(tbl.AMLPaidData), function(j){\n            list(\n              tags$h4(\"AML Worldcheck Id: \",tags$span(tags$b(HTML(tbl.AMLPaidData$id[j])),style='color:black')),\n              tags$h4('Keywords: ',tags$b(HTML(tbl.AMLPaidData$keywords[j]))),\n              tags$h5(\"Likelihood:\", HTML(tbl.AMLPaidData$likelihood[j])),\n              tags$h5(\"Key Data: \"),\n              tags$p(HTML(tbl.AMLPaidData$keyData[j])),\n              tags$h5(\"Further Information: \"), \n              tags$p(tbl.AMLPaidData$furtherInformation[j]),\n              tags$h5(\"External Sources: \"), \n              HTML(tbl.AMLPaidData$externalSources[j])\n            )\n          }),\n          hr()\n        )\n      })\n    })\n    do.call(tagList, ls.subList)\n    return(ls.subList)   \n  }else{\n    tags$p(\"Worldcheck Not Selected\")  \n  }\n  \n}\n##########################################################################################################################################\n##########################################################################################################################################\n##############################################################################################################################################\n##############################################################################################################################################\n##############################################################################################################################################\nget.citiesCodeNames <- function(tbl.requests){\n  ## read in cities codes and make rds file\n  ## cities_codes <- tbl_df(readRDS(\"/Users/doucetteemail/Documents/KountableFiles/RDevelopment/RMarker/RMarker/data/cities_codes.rds\"))\n  cities_codes <- tbl_df(readRDS(\"data/cities_codes.rds\"))\n  ## replace V1, V2 with cities, code\n  colnames(cities_codes) <- c(\"cities\",\"cityCodes\")\n  \n  ## paste0(sapply(unlist(strsplit(tbl.requests$cities[19],', ')), function(x){paste0(cities_codes$cities[which(cities_codes$code == x)],collapse = ', ')}), collapse = '; ')\n  \n  ## unpack city codes and mark with row id cIndex\n  ## combine into one table\n  tbl.cities <- bind_rows(\n    lapply(1:length(tbl.requests$cities), function(i){\n      if (length(tbl.requests$cities[[i]])!=0){\n        data_frame(cityCodes = tbl.requests$cities[[i]], cIndex=i)\n      } else {\n        data_frame(cityCodes = '', cIndex = i)\n      }\n    }))\n  ## make cityCodes int to merge with cities_codes by cityCodes\n  tbl.cities <- tbl.cities %>% mutate(cityCodes = as.integer(cityCodes))\n  tbl.cities <- dplyr::left_join(tbl.cities,cities_codes, by = 'cityCodes')\n  \n  ## now pack up the rows into \n  ## final creation is \"202061: kygaly, kigalis, kiqali, kgl, ji jia li, kigali, kigale, khikali, kigari, kigaly, gorad kigali, kinkali, kyghaly, kigalo, kigalli, kikali\"\n  tbl.cities <- tbl.cities %>% group_by(cIndex, cityCodes) %>% summarise(cityNames=paste(cities, collapse=\", \"))\n  tbl.cities <- tbl.cities %>% rowwise() %>% mutate(cityCodeNames = paste0(cityCodes,': ', cityNames))\n  tbl.cities <- tbl.cities %>% group_by(cIndex) %>% summarise(cityCodeNames = paste(cityCodeNames, collapse=\"; \"))\n  \n  ## cleanup \"NA: NA\" and make blank\n  tbl.cities <- tbl.cities %>% rowwise() %>% mutate(cityCodeNames = ifelse(cityCodeNames == \"NA: NA\",\"\",cityCodeNames))\n  ## final step merge back in columns\n  \n  tbl.requests$cityCodeNames <- tbl.cities$cityCodeNames\n  return(tbl.requests)  \n}\n##############################################################################################################################################\n##############################################################################################################################################\n\n##############################################################################################################################################\n##############################################################################################################################################\n##############################################################################################################################################\nget.regionsCodeNames <- function(tbl.requests){\n  ## read in cities codes and make rds file\n  ## regions_codes <- tbl_df(readRDS(\"/Users/doucetteemail/Documents/KountableFiles/RDevelopment/RMarker/RMarker/data/regions_codes.rds\"))\n  regions_codes <- tbl_df(readRDS(\"data/regions_codes.rds\"))\n  ## replace V1, V2 with regions, code\n  colnames(regions_codes) <- c(\"regions\",\"regionsCodes\")\n  \n  ## paste0(sapply(unlist(strsplit(tbl.requests$regions[19],', ')), function(x){paste0(regions_codes$regions[which(regions_codes$code == x)],collapse = ', ')}), collapse = '; ')\n  \n  ## unpack city codes and mark with row id cIndex\n  ## combine into one table\n  tbl.regions <- bind_rows(\n    lapply(1:length(tbl.requests$regions), function(i){\n      if (length(tbl.requests$regions[[i]])!=0){\n        data_frame(regionsCodes = tbl.requests$regions[[i]], cIndex=i)\n      } else {\n        data_frame(regionsCodes = '', cIndex = i)\n      }\n    }))\n  ## make cityCodes int to merge with regions_codes by cityCodes\n  tbl.regions <- tbl.regions %>% mutate(regionsCodes = as.integer(regionsCodes))\n  tbl.regions <- dplyr::left_join(tbl.regions,regions_codes, by = 'regionsCodes')\n  \n  ## now pack up the rows into \n  ## final creation is \"202061: kygaly, kigalis, kiqali, kgl, ji jia li, kigali, kigale, khikali, kigari, kigaly, gorad kigali, kinkali, kyghaly, kigalo, kigalli, kikali\"\n  tbl.regions <- tbl.regions %>% group_by(cIndex, regionsCodes) %>% summarise(regionsNames=paste(regions, collapse=\", \"))\n  tbl.regions <- tbl.regions %>% rowwise() %>% mutate(regionsCodeNames = paste0(regionsCodes,': ', regionsNames))\n  tbl.regions <- tbl.regions %>% group_by(cIndex) %>% summarise(regionsCodeNames = paste(regionsCodeNames, collapse=\"; \"))\n  \n  ## cleanup \"NA: NA\" and make blank\n  tbl.regions <- tbl.regions %>% rowwise() %>% mutate(regionsCodeNames = ifelse(regionsCodeNames == \"NA: NA\",\"\",regionsCodeNames))\n  \n  \n  ## final step merge back in columns\n  \n  tbl.requests$regionsCodeNames <- tbl.regions$regionsCodeNames\n  return(tbl.requests)  \n}\n##############################################################################################################################################\n##############################################################################################################################################\n\n",
    "created" : 1480619403662.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "404519252",
    "id" : "348E1C24",
    "lastKnownWriteTime" : 1480626516,
    "last_content_update" : 1480626594593,
    "path" : "~/Rproject/Badges/kApiKYCCallsSource.R",
    "project_path" : "kApiKYCCallsSource.R",
    "properties" : {
        "docOutlineVisible" : "1"
    },
    "relative_order" : 4,
    "source_on_save" : true,
    "source_window" : "",
    "type" : "r_source"
}