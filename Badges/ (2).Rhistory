# exit if the condition is met
if (grepl("Resource representation is only available with these Content-Types:\ntext/plain; charset=UTF-8\ntext/plain",
rawToChar(getAuthenticationToken$content)) == FALSE) {break}
}
} else {
repeat {
## Starts with 1
attempts <-  attempts + 1
# this Prod website bearer token call is
# curl -X GET --header 'Accept: application/json' 'http://kyc-api.kountable.com/v0/admin/users'
# needs user name and password authentication 'admin', 'RzpvnDXv8fVjpu3h'
getAuthenticationToken <- GET(paste('http://',kserv,'kyc-api.kountable.com/v0/admin/users', sep = ""),
authenticate('admin', 'RzpvnDXv8fVjpu3h', type = "basic"),
add_headers(
"Accept" = "application/json")
)
# the content returns a group of token calls in Json format, but first convert from raw to Char format
AuthenticationTokenGroup <- fromJSON( rawToChar(getAuthenticationToken$content))
# for the 'Prod' server look for the person permissions token find the location index with grep
personAuthenticationToken <- AuthenticationTokenGroup$token[ grep('person',AuthenticationTokenGroup$description)]
#getAuthenticationToken$status_code
cat(KYCUUID,"--> BearerToken attempts-->", attempts, ' TimeStamp: ',strftime(Sys.time(),"%Y-%m-%d %H:%M:%S"),"\n", sep = "")
# exit if the condition is met
if (grepl("Resource representation is only available with these Content-Types:\ntext/plain; charset=UTF-8\ntext/plain",
rawToChar(getAuthenticationToken$content)) == FALSE) {break}
}
}
## Part 2 call the data using the bearer token from part one, each server has a different token name to use
attempts <- 0
## repeat the call if it 'hangsup'
if (kserv == 'staging.') {
bearerToken <-  adminAuthenticationToken
} else {
bearerToken <- personAuthenticationToken
}
repeat {
attempts = attempts + 1
# this Prod website data call with bearer token is
# curl -X GET --header 'Accept: application/json' --header 'KYC-Bearer-Token: oJLXXlf4Q24FZgCnYeYR3ps2oIXtVqzZ'
# 'http://kyc-api.kountable.com/v0/persons/2099?amlPaidCheck=false'
# curl -X GET --header 'Accept: application/json' --header 'KYC-Bearer-Token: cv6yzIsmvMiwXFjit5-wtZHWPGBD-4l-'
# 'http://staging.kyc-api.kountable.com/v0/persons/2099?amlFriendsPaidCnt=0&amlFriendsFreeCnt=100'
## october 18, 2016
# curl -X GET --header 'Accept: application/json' --header 'KYC-Bearer-Token: oJLXXlf4Q24FZgCnYeYR3ps2oIXtVqzZ'
# 'http://kyc-api.kountable.com/v0/persons/10747?amlPaidCheck=false&amlFriendsPaidCnt=0&amlFriendsFreeCnt=100'
apiKYCget <- GET(paste0('http://',kserv,'kyc-api.kountable.com/v0/persons/', KYCUUID,'?amlPaidCheck=',amlPaid,'&amlFriendsPaidCnt=',amlFriendsPaidCnt,'&amlFriendsFreeCnt=',amlFriendsFreeCnt),
add_headers(
"Accept" = "application/json",
"KYC-Bearer-Token" = bearerToken
))
## How many call attempts
cat(KYCUUID,"--> apiKYCCall6 attempts-->", attempts, ' Server--> ',kserv, ' TimeStamp: ',strftime(Sys.time(),"%Y-%m-%d %H:%M:%S"),"\n", sep="")
# exit if the condition is met
if (grepl("Resource representation is only available with these Content-Types:\ntext/plain; charset=UTF-8\ntext/plain"
,rawToChar(apiKYCget$content))==FALSE){ break}
}
x <- fromJSON( rawToChar(apiKYCget$content), simplifyVector = TRUE, simplifyMatrix = TRUE, simplifyDataFrame = TRUE)
## check to make sure profile has data if not call swagger profile
if(is.null(x$profile)){
cat('================================================================\n')
cat('================================================================\n')
cat('======================no Profile data===========================\n')
cat('================================================================\n')
cat('================================================================\n')
x$profile <- get.V2UserProfile(apiUUID = x$uuid)
}
return(x)
}
apikycCall <- get.apiKYCCall('10198')
source('~/Rproject/Badges/kApiKYCCallsSource.R')
source('~/Rproject/Badges/kApiKYCCallsSource.R')
source('~/Rproject/Badges/kApiKYCCallsSource.R')
source('~/Rproject/Badges/scraper.R')
chess ='http://ratings.fide.com/top.phtml?list=men'
chess.table = readHTMLTable(chess, header=T, which=5,stringsAsFactors=F)
library(XML)
install.packages("XML")
library(XML)
chess ='http://ratings.fide.com/top.phtml?list=men'
chess.table = readHTMLTable(chess, header=T, which=5,stringsAsFactors=F)
View(chess.table)
fortune1000 ='https://www.geolounge.com/fortune-1000-companies-list-2016/'
fortune1000
chess.table = readHTMLTable(fortune1000, header=T, which=5,stringsAsFactors=F)
chess.table = readHTMLTable(fortune1000)
chess.table
chess.table = readHTMLTable(fortune1000, header=T, which=1,stringsAsFactors=F)
library(RCurl)
library(XML)
install.packages("RCurl")
input <- "http://www.google.co.uk/search?gcx=c&sourceid=chrome&ie=UTF-8&q=r+project#pq=%22hello+%3C+world%22&hl=en&cp=5&gs_id=3r&xhr=t&q=phd+comics&pf=p&sclient=psy-ab&source=hp&pbx=1&oq=phd+c&aq=0&aqi=g4&aql=&gs_sm=&gs_upl=&bav=on.2,or.r_gc.r_pw.r_cp.,cf.osb&fp=27ff09b2758eb4df&biw=1599&bih=904"
txt <- htmlToText(input)
library(RCurl)
library(XML)
input <- "http://www.google.co.uk/search?gcx=c&sourceid=chrome&ie=UTF-8&q=r+project#pq=%22hello+%3C+world%22&hl=en&cp=5&gs_id=3r&xhr=t&q=phd+comics&pf=p&sclient=psy-ab&source=hp&pbx=1&oq=phd+c&aq=0&aqi=g4&aql=&gs_sm=&gs_upl=&bav=on.2,or.r_gc.r_pw.r_cp.,cf.osb&fp=27ff09b2758eb4df&biw=1599&bih=904"
# evaluate input and convert to text
txt <- htmlToText(input)
fortune1000 ='https://www.geolounge.com/fortune-1000-companies-list-2016/'
chess.table = readHTMLTable(fortune1000, header=T, which=1,stringsAsFactors=F)
webpage <- getURL(fortune1000)
webpage
install.package("rvest")
install.packages("rvest")
library("rvest")
url <- "http://en.wikipedia.org/wiki/List_of_U.S._states_and_territories_by_population"
population <- url %>%
html() %>%
html_nodes(xpath='//*[@id="mw-content-text"]/table[1]') %>%
html_table()
population <- population[[1]]
population
library("rvest")
url <- "http://en.wikipedia.org/wiki/List_of_U.S._states_and_territories_by_population"
population <- url %>%
html() %>%
html_nodes(xpath='//*[@id="tablepress-28"]/table[1]') %>%
html_table()
url <- "http://en.wikipedia.org/wiki/List_of_U.S._states_and_territories_by_population"
population <- url %>%
read_html() %>%
html_nodes(xpath='//*[@id="tablepress-28"]/table[1]') %>%
html_table()
population
x <- read_html(url)
x
x <-  html(url)
x <-  read_html(url)
x
html_nodes(xpath='//*[@id="mw-content-text"]/table[1]')
html_nodes(x,xpath='//*[@id="mw-content-text"]/table[1]')
url <- "http://en.wikipedia.org/wiki/List_of_U.S._states_and_territories_by_population"
x <-  rehtml(url)
x <-  read_html(url)
x
x <-  read_html(url) %>%
html_nodes(xpath='//*[@id="tablepress-28"]/table[1]') %>%
html_table()
x
x <-  read_html(url)
x
html_nodes(x,xpath='//*[@id="tablepress-28"]/table')
html_nodes(x,xpath='//*[@id="#tablepress-28"]/table')
html_nodes(x,xpath='//*[@id="#tablepress-28"]/table[0]')
html_nodes(x,xpath='//table[@id="#tablepress-28"]/table[0]')
url <- "https://www.geolounge.com/fortune-1000-companies-list-2016/"
x <-  read_html(url)
x
html_nodes(x,xpath='//table[@id="#tablepress-28"]/table[0]')
html_nodes(x,xpath='//*[@id="#tablepress-28"]/table[0]')
y <-  html_nodes(x,xpath='//*[@id="#tablepress-28"]/table[0]')
y <-  html_nodes(x,xpath='//table[@id="#tablepress-28"]')
y
y <-  html_nodes(x,xpath='//*[@id="tablepress-28"]')
y
z <-  html_table(y)
z
z.table <-  html_table(y)
z.table
z.table
chess.table = readHTMLTable(fortune1000, header=T, which=1,stringsAsFactors=F)
chess.table
population <- url %>%
read_html() %>%
html_nodes(xpath='//*[@id="tablepress-28"]') %>%
html_table()
population
population[[1]]
population[[1]]$Company
population <- url %>%
read_html() %>%
html_nodes(xpath='//*[@id="tablepress-28"]/table[[0]]') %>%
html_table()
population <- url %>%
read_html() %>%
html_nodes(xpath='//*[@id="tablepress-28"]/table[[1]]') %>%
html_table()
population <- url %>%
read_html() %>%
html_nodes(xpath='//*[@id="tablepress-28"]/table[0]') %>%
html_table()
population
library("rvest")
require(dplyr)
url <- "https://www.geolounge.com/fortune-1000-companies-list-2016/"
fortune1000 <- url %>%
read_html() %>%
html_nodes(xpath='//*[@id="tablepress-28"]') %>%
html_table()
tbl.fortune100 <- data_frame(Company = fortune1000[[1]]$Company,
2016 = fortune1000[[1]]$`2016`,
2015 = Company = fortune1000[[1]]$`2015`,
city = Company = fortune1000[[1]]$City,
state = Company = fortune1000[[1]]$State,
yearsOnList = fortune1000[[1]]$`Years On List (Fortune 500 only)`)
tbl.fortune100 <- data_frame(Company = fortune1000[[1]]$Company,
2016 = fortune1000[[1]]$`2016`,
2015 = fortune1000[[1]]$`2015`,
city = fortune1000[[1]]$City,
state = fortune1000[[1]]$State,
yearsOnList = fortune1000[[1]]$`Years On List (Fortune 500 only)`)
tbl.fortune100 <- data_frame(Company = fortune1000[[1]]$Company,
2016 = fortune1000[[1]]$'2016',
2015 = fortune1000[[1]]$'2015',
city = fortune1000[[1]]$City,
state = fortune1000[[1]]$State,
yearsOnList = fortune1000[[1]]$Years On List (Fortune 500 only))
fortune1000[[1]]$'2016'
fortune1000[[1]]$Years On List (Fortune 500 only)
tbl.fortune100 <- data_frame(Company = fortune1000[[1]]$Company,
2016 = fortune1000[[1]]$'2016',
2015 = fortune1000[[1]]$'2015',
city = fortune1000[[1]]$City,
state = fortune1000[[1]]$State,
yearsOnList = fortune1000[[1]]$'Years On List (Fortune 500 only)')
tbl.fortune100 <- data_frame(Company = fortune1000[[1]]$Company,
'2016' = fortune1000[[1]]$'2016',
'2015' = fortune1000[[1]]$'2015',
city = fortune1000[[1]]$City,
state = fortune1000[[1]]$State,
yearsOnList = fortune1000[[1]]$'Years On List (Fortune 500 only)')
tbl.fortune100
View(tbl.fortune100)
View(tbl.fortune100)
tbl.fortune100[, id := seq_len(.N), by = cat]
tbl.fortune100[, id := seq_len(.N)]
tbl.fortune100 %>% group_by(cat) %>% mutate(id = row_number())
tbl.fortune100 %>% mutate(id = row_number())
tbl.fortune100
View(tbl.fortune100)
source('~/Rproject/Badges/scraper.R')
source('~/Rproject/Badges/kApiKYCCallsSource.R')
source('~/Rproject/Badges/Get_data.R')
get.kScoreV2Data <- function(uuidKyc){
require(dplyr)
if(!is.null(uuidKyc$collectedProfile$scoreV2$kScoreV2$breakdown)){
category <- gsub('"(.*)\\.(.*):.*','\\1', uuidKyc$collectedProfile$scoreV2$kScoreV2$breakdown)
## get between the . and the :
categoryDetail <- gsub(".*\\.(.*):.*", "\\1", uuidKyc$collectedProfile$scoreV2$kScoreV2$breakdown)
## use as.numberic to convert the +2.0 into positive numbers
kScore <- as.numeric(gsub('(.*):(.*)\"',"\\2",uuidKyc$collectedProfile$scoreV2$kScoreV2$breakdown))
tbl.KScoreV2 <- data_frame(category = category, categoryDetail = categoryDetail, k_score_v2 = kScore)
tbl.KScoreV2$uuid <- uuidKyc$uuid
} else {
tbl.KScoreV2 <- data_frame(category = '', categoryDetail = '', k_score_v2 = 0, uuid = uuidKyc$uuid)
}
return(tbl.KScoreV2)
}
get.kScoreV2Summaries <- function(uuidKyc){
require(dplyr)
cat(uuidKyc$uuid,'\n')
tbl.KScoreV2 <- data_frame(uuid = uuidKyc$uuid, totalKScore = uuidKyc$collectedProfile$scoreV2$kScoreV2$score,
profileDataScoreV2 = uuidKyc$collectedProfile$scoreV2$profileDataScoreV2$score,
socialMediaAuthScoreV2 = uuidKyc$collectedProfile$scoreV2$socialMediaAuthScoreV2$score,
businessProfileScoreV2 = uuidKyc$collectedProfile$scoreV2$businessProfileScoreV2$score,
documentUploadsScoreV2 = uuidKyc$collectedProfile$scoreV2$documentUploadsScoreV2$score)
return(tbl.KScoreV2)
}
tbl.kScoreV2Users <- bind_rows(lapply(ls.api,get.kScoreV2Data))
tbl.kscoreV2Summaries <- bind_rows(lapply(ls.api, get.kScoreV2Summaries))
tbl.kscoreV2Summaries
View(tbl.kscoreV2Summaries)
saveRDS(tbl.kscoreV2Summaries, file = "my_data.rds")
saveRDS(tbl.kScoreV2Users, file = "data.rds")
tbl.kscoreV2Summaries
write(tbl.kscoreV2Summaries$uuid, file = "uuidzerokscore.txt",append = TRUE, sep = "\n")
write(tbl.kscoreV2Summaries, file = "uuidzerokscore.txt",append = TRUE, sep = "\n")
uuids <- list()
uuids <- lapply(ls.api, function(x){
if(x$collectedProfile$scoreV2$kScoreV2$score == 0 || x$collectedProfile$scoreV2$kScoreV2$score == 0.0){
return(x$uuid)
}
})
uuids
write(uuids, file = "uuidzerokscore.txt",append = TRUE, sep = "\n")
uuids
x <- get.apiKYCCallNoProfile(21)
if(x$collectedProfile$scoreV2$kScoreV2$score == 0 || x$collectedProfile$scoreV2$kScoreV2$score == 0.0){
return(x$uuid)
}
if(x$collectedProfile$scoreV2$kScoreV2$score == 0 || x$collectedProfile$scoreV2$kScoreV2$score == 0.0){
x$uuid
}
x <- get.apiKYCCallNoProfile(2311)
if(x$collectedProfile$scoreV2$kScoreV2$score == 0 || x$collectedProfile$scoreV2$kScoreV2$score == 0.0){
x$uuid
}
x <- get.apiKYCCallNoProfile(2311)
if(x$collectedProfile$scoreV2$kScoreV2$score %in% c(0,0.0)){
x$uuid
}
x <- get.apiKYCCallNoProfile(2311)
if(!(x$collectedProfile$scoreV2$kScoreV2$score %in% c(0,0.0)){
x$uuid
}
x <- get.apiKYCCallNoProfile(2311)
if(!(x$collectedProfile$scoreV2$kScoreV2$score %in% c(0,0.0))){
x$uuid
}
x <- get.apiKYCCallNoProfile(2311)
if(!(x$collectedProfile$scoreV2$kScoreV2$score %in% c("0","0.0"))){
x$uuid
}
x$collectedProfile$scoreV2$kScoreV2$score
x <- get.apiKYCCallNoProfile(2311)
x$collectedProfile$scoreV2$kScoreV2$score
x <- get.apiKYCCallNoProfile(10795)
x$collectedProfile$scoreV2$kScoreV2$score
x <- get.apiKYCCallNoProfile(10795)
if(!(x$collectedProfile$scoreV2$kScoreV2$score %in% c("0","0.0"))){
x$uuid
}
})
x <- get.apiKYCCallNoProfile(10795)
if(!(x$collectedProfile$scoreV2$kScoreV2$score %in% c("0","0.0"))){
x$uuid
}
x <- get.apiKYCCallNoProfile(10073)
if(!(x$collectedProfile$scoreV2$kScoreV2$score %in% c("0","0.0"))){
x$uuid
}
if(!(x$collectedProfile$scoreV2$kScoreV2$score %in% c("0","0.0"))){
x$uuid
}
x <- get.apiKYCCallNoProfile(2616)
x$collectedProfile$scoreV2$kScoreV2$score
x$uuid
x <- get.apiKYCCallNoProfile(2616)
if(!(x$collectedProfile$scoreV2$kScoreV2$score %in% c("0","0.0"))){
x$uuid
}
x <- get.apiKYCCallNoProfile(99)
if(!(x$collectedProfile$scoreV2$kScoreV2$score %in% c("0","0.0"))){
x$uuid
}
x$collectedProfile$scoreV2$kScoreV2$score
x <- get.apiKYCCallNoProfile(99)
if((x$collectedProfile$scoreV2$kScoreV2$score %in% c("0","0.0"))){
x$uuid
}
uuids <- lapply(ls.api, function(x){
x <- get.apiKYCCallNoProfile(99)
if((x$collectedProfile$scoreV2$kScoreV2$score %in% c("0","0.0"))){
x$uuid
}
})
uuids <- lapply(ls.api, function(x){
if((x$collectedProfile$scoreV2$kScoreV2$score %in% c("0","0.0"))){
x$uuid
}
})
uuids
})
write(uuids, file = "uuidzerokscore.txt",append = TRUE, sep = "\n")
write(uuids, file = "uuidzerokscore.txt",append = TRUE, sep = "\n")
write(unlist(uuids), file = "uuidzerokscore.txt",append = TRUE, sep = "\n")
write(unlist(uuids), file = "uuidzerokscore.txt",append = TRUE, sep = "\n")
tbl.userProfilesKScoreV2 <- readRDS('userProfilesKScoreV2')
View(tbl.userProfilesKScoreV2)
tbl.userProfilesKScoreV2
View(tbl.kscoreV2Summaries)
count(users)
length(users)
users <- get.V2UsersList()
length(users)
ls.api <- lapply(users, get.apiKYCCallNoProfile)
tbl.kScoreV2Users <- bind_rows(lapply(ls.api,get.kScoreV2Data))
tbl.kscoreV2Summaries <- bind_rows(lapply(ls.api, get.kScoreV2Summaries))
tbl.kscoreV2Summaries
tbl.userProfilesKScoreV2
rename(tbl.userProfilesKScoreV2, uuid = userId)
tbl.userProfilesKScoreV2
View(tbl.userProfilesKScoreV2)
rename(tbl.userProfilesKScoreV2, uuid = userId)
View(tbl.userProfilesKScoreV2)
rename(tbl.userProfilesKScoreV2, userId =uuid)
library(dplyr)
rename(tbl.userProfilesKScoreV2, uuid = userId)
tbl.userProfilesKScoreV2 <- rename(tbl.userProfilesKScoreV2, uuid = userId)
tbl.kscoreV2Summaries %>% inner_join(tbl.userProfilesKScoreV2) %>% knitr::kable()
tbl.kscoreV2Summaries %>% mutate_each_(funs(as.numeric), tbl.kscoreV2Summaries)
tbl.kscoreV2Summaries %>% mutate_each_(funs(as.numeric), uuid)
x$collectedProfile$scoreV2$kScoreV2$score
x$uuid
is_numeric(x$uuid)
as.numeric(x$uuid)
tbl.kscoreV2Summaries %>% mutate_each_(funs(as.numeric), uuid)
tbl.kscoreV2Summaries %>% mutate_each(funs(as.numeric), uuid)
tbl.kscoreV2Summaries
View(tbl.kscoreV2Summaries)
tbl.kscoreV2Summaries %>% mutate_each(funs(as.numeric), uuid)
tbl.kscoreV2Summaries
View(tbl.kscoreV2Summaries)
tbl.kscoreV2Summaries %>% inner_join(tbl.userProfilesKScoreV2) %>% knitr::kable()
sapply(tbl.kscoreV2Summaries,mode)
sapply(tbl.kscoreV2Summaries,class)
transform(tbl.kscoreV2Summaries, uuid = as.numeric(uuid))
tbl.kscoreV2Summaries <- transform(tbl.kscoreV2Summaries, uuid = as.numeric(uuid))
tbl.kscoreV2Summaries
tbl.kscoreV2Summaries %>% inner_join(tbl.userProfilesKScoreV2) %>% knitr::kable()
tbl.kscoreV2Summaries
tbl.kscoreV2Summaries %>% inner_join(tbl.userProfilesKScoreV2) %>% knitr::kable()
tbl.kscoreV2Summaries
tbl.kscoreV2Summaries %>% inner_join(tbl.userProfilesKScoreV2, by="uuid")
tbl.kscoreV2Summaries
tbl.kscoreV2Summaries <- tbl.kscoreV2Summaries %>% inner_join(tbl.userProfilesKScoreV2, by="uuid")
tbl.kscoreV2Summaries
xyz <- lapply(tbl.kscoreV2Summaries$uuid, function(uuid){
url <- paste0("http://analytics-prod-proxy.cluster.kountable.com:3000/franks/profiles/",uuid,"?mode=rb")
read_html(url)
})
library("rvest")
xyz <- lapply(tbl.kscoreV2Summaries$uuid, function(uuid){
url <- paste0("http://analytics-prod-proxy.cluster.kountable.com:3000/franks/profiles/",uuid,"?mode=rb")
read_html(url)
})
tbl.kscoreV2Summaries <- tbl.kscoreV2Summaries %>% filter_("totalProfileKScoreV2==profileDataScoreV2")
tbl.kscoreV2Summaries
tbl.kscoreV2Summaries
tbl.kscoreV2Summaries <- bind_rows(lapply(ls.api, get.kScoreV2Summaries))
tbl.userProfilesKScoreV2 <- readRDS('userProfilesKScoreV2')
tbl.userProfilesKScoreV2 <- rename(tbl.userProfilesKScoreV2, uuid = userId)
tbl.kscoreV2Summaries <- transform(tbl.kscoreV2Summaries, uuid = as.numeric(uuid))
tbl.kscoreV2Summaries <- tbl.kscoreV2Summaries %>% inner_join(tbl.userProfilesKScoreV2, by="uuid")
tbl.kscoreV2Summaries <- tbl.kscoreV2Summaries %>% filter_("totalProfileKScoreV2!=profileDataScoreV2")
tbl.kscoreV2Summaries
ls.api <- lapply(users, get.apiKYCCallNoProfile)
tbl.kScoreV2Users <- bind_rows(lapply(ls.api,get.kScoreV2Data))
tbl.kscoreV2Summaries <- bind_rows(lapply(ls.api, get.kScoreV2Summaries))
tbl.userProfilesKScoreV2 <- readRDS('userProfilesKScoreV2')
tbl.userProfilesKScoreV2 <- rename(tbl.userProfilesKScoreV2, uuid = userId)
tbl.kscoreV2Summaries <- transform(tbl.kscoreV2Summaries, uuid = as.numeric(uuid))
tbl.kscoreV2Summaries <- tbl.kscoreV2Summaries %>% inner_join(tbl.userProfilesKScoreV2, by="uuid")
tbl.kscoreV2Summaries <- tbl.kscoreV2Summaries %>% filter_("totalProfileKScoreV2!=profileDataScoreV2")
tbl.kscoreV2Summaries
tbl.kscoreV2Summaries <- bind_rows(lapply(ls.api, get.kScoreV2Summaries))
tbl.kscoreV2Summaries <- transform(tbl.kscoreV2Summaries, uuid = as.numeric(uuid))
tbl.kscoreV2Summaries <- tbl.kscoreV2Summaries %>% inner_join(tbl.userProfilesKScoreV2, by="uuid")
tbl.kscoreV2Summaries <- tbl.kscoreV2Summaries %>% filter_("totalKScore==0")
tbl.kscoreV2Summaries
tbl.kscoreV2Summaries <- bind_rows(lapply(ls.api, get.kScoreV2Summaries))
tbl.userProfilesKScoreV2 <- readRDS('userProfilesKScoreV2')
tbl.userProfilesKScoreV2 <- rename(tbl.userProfilesKScoreV2, uuid = userId)
tbl.kscoreV2Summaries <- transform(tbl.kscoreV2Summaries, uuid = as.numeric(uuid))
tbl.kscoreV2Summaries <- tbl.kscoreV2Summaries %>% inner_join(tbl.userProfilesKScoreV2, by="uuid")
tbl.kscoreV2Summaries <- tbl.kscoreV2Summaries %>% filter_("totalProfileKScoreV2!=profileDataScoreV2")
tbl.kscoreV2Summaries <- bind_rows(lapply(ls.api, get.kScoreV2Summaries))
tbl.userProfilesKScoreV2 <- readRDS('userProfilesKScoreV2')
tbl.userProfilesKScoreV2 <- rename(tbl.userProfilesKScoreV2, uuid = userId)
tbl.kscoreV2Summaries <- transform(tbl.kscoreV2Summaries, uuid = as.numeric(uuid))
tbl.kscoreV2Summaries <- tbl.kscoreV2Summaries %>% inner_join(tbl.userProfilesKScoreV2, by="uuid")
tbl.scoreszero <- tbl.kscoreV2Summaries %>% filter_("totalKScore==0")
tbl.scorenotmatch <- tbl.kscoreV2Summaries %>% filter_("totalProfileKScoreV2!=profileDataScoreV2")
View(tbl.scorenotmatch)
View(tbl.scoreszero)
View(tbl.scorenotmatch)
View(tbl.scoreszero)
tbl.kscoreV2Summaries
View(tbl.kscoreV2Summaries)
tbl.kscoreV2Summaries
View(tbl.kscoreV2Summaries)
tbl.kscoreV2Summaries$socialMediaAuthScoreV2
tbl.kscoreV2Summaries$socialMediaAuthScoreV2[1]
profilecutoff <- 0.75
profilecutoff
View(tbl.kscoreV2Summaries)
profilecutoff <- 0.75*77
profilecutoff
View(tbl.kscoreV2Summaries)
profilecutoff <- 0.75*77
tbl.kScoreV2Summaries <- tbl.kScoreV2Summaries %>% mutate(profileDataIndicator = ifelse(profileDataScoreV2 >= profilecutoff, 1,0))
tbl.kscoreV2Summaries
tbl.kscoreV2Summaries <- tbl.kscoreV2Summaries %>% mutate(profileDataIndicator = ifelse(profileDataScoreV2 >= profilecutoff, 1,0))
tbl.kscoreV2Summaries
View(tbl.kscoreV2Summaries)
profilecutoff <- 0.77*77
tbl.kscoreV2Summaries <- tbl.kscoreV2Summaries %>% mutate(profileDataIndicator = ifelse(profileDataScoreV2 >= profilecutoff, 1,0))
View(tbl.kscoreV2Summaries)
profilecutoff <- 0.7*77
tbl.kscoreV2Summaries <- tbl.kscoreV2Summaries %>% mutate(profileDataIndicator = ifelse(profileDataScoreV2 >= profilecutoff, 1,0))
profilecutoff <- 0.5*77
tbl.kscoreV2Summaries <- tbl.kscoreV2Summaries %>% mutate(profileDataIndicator = ifelse(profileDataScoreV2 >= profilecutoff, 1,0))
View(tbl.kscoreV2Summaries)
profileCutoff <- 0.5*77
mediaCutoff <- 0.5*195
tbl.kscoreV2Summaries <- tbl.kscoreV2Summaries %>% mutate(profileDataIndicator = ifelse(profileDataScoreV2 >= profileCutoff, 1,0))
tbl.kscoreV2Summaries <- tbl.kscoreV2Summaries %>% mutate(SocialMediaDataIndicator = ifelse(socialMediaAuthScoreV2 >= mediaCutoff, 1,0))
View(tbl.kscoreV2Summaries)
View(tbl.kscoreV2Summaries)
tbl.kscoreV2badges <- tbl.kscoreV2Summaries %>% mutate(profileDataIndicator = ifelse(profileDataScoreV2 >= profileCutoff, 1,0))
tbl.kscoreV2badges <- tbl.kscoreV2Summaries %>% mutate(SocialMediaDataIndicator = ifelse(socialMediaAuthScoreV2 >= mediaCutoff, 1,0))
View(tbl.kscoreV2badges)
con = dbConnect(MySQL(),user="kdevdbuser", password="t00rYFWOiRF",
dbname="kountable", host="prod-db.clv18hnrncxz.us-west-2.rds.amazonaws.com")
library(RMySQL)
install.packages("RMySQL")
install.packages("RMySQL")
install.packages("RMySQL")
install.packages(c("BH", "curl", "git2r", "htmlwidgets", "knitr", "R6", "Rcpp", "rmarkdown", "rsconnect", "yaml"))
install.packages(c("BH", "curl", "git2r", "htmlwidgets", "knitr",
))
library(RMySQL)
con = dbConnect(MySQL(),user="kdevdbuser", password="t00rYFWOiRF",
dbname="kountable", host="prod-db.clv18hnrncxz.us-west-2.rds.amazonaws.com")
tbl.userProfilesKScoreV2 <- readRDS('userProfilesKScoreV2')
tbl.userProfilesKScoreV2
tbl.kscoreV2Summaries <- tbl.kscoreV2Summaries %>% mutate_each_(funs(as.numeric), uuid)
library("dplyr", lib.loc="~/R/x86_64-suse-linux-gnu-library/3.3")
library(dplyr)
source('kApiKYCCallsSource.R')
tbl.kscoreV2Summaries <- tbl.kscoreV2Summaries %>% mutate_each_(funs(as.numeric), uuid)
tbl.userProfilesKScoreV2 <- readRDS('userProfilesKScoreV2')
View(tbl.userProfilesKScoreV2)
